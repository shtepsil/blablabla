<?php

namespace apiking\form;

use common\components\Debugger as d;
/*
use common\components\retailcrm\ApiHelper;
use common\models\Items;
use common\models\Orders;
use common\models\OrdersHistory;
use common\models\OrdersItems;
*/
//use common\models\Sets;
use common\models\User;
//use shadow\helpers\StringHelper;
//use frontend\models\retailcrm\CreateCrmOrder;
use frontend\components\SmsController;
use Yii;
use yii\base\Model;
//use yii\db\ActiveQuery;
//use yii\helpers\Json;

class SmsLogin extends Model
{

    public $phone;

    /**
     * Returns the form name that this model class should use.
     *
     * The form name is mainly used by [[\yii\widgets\ActiveForm]] to determine how to name
     * the input fields for the attributes in a model. If the form name is "A" and an attribute
     * name is "b", then the corresponding input name would be "A[b]". If the form name is
     * an empty string, then the input name would be "b".
     *
     * By default, this method returns the model class name (without the namespace part)
     * as the form name. You may override it when the model is used in different forms.
     *
     * @return string the form name of this model class.
     */
    public function formName()
    {
        return 'sms_login';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['phone'], 'required'],
         //   [['phone'],'match','pattern' => '/^((\+?7)(\(?\d{3})\)-?)?(\d{3})(-?\d{4})$/','message'=>Yii::t('main','Некорректный формат поля {attribute}')]
        ];
    }
    /**
     * This method is invoked before validation starts.
     * The default implementation raises a `beforeValidate` event.
     * You may override this method to do preliminary checks before validation.
     * Make sure the parent implementation is invoked so that the event can be raised.
     * @return boolean whether the validation should be executed. Defaults to true.
     * If false is returned, the validation will stop and the model is considered invalid.
     */
	 /*
    public function beforeValidate()
    {
        if ($this->type != 2) {
            $this->scenario = 'popup';
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
	*/
    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'phone' => 'Телефон',
        ];
    }
	
    public function send($phone, $session_id)
    {
        //d::ajax($phone);
		$phone['phone'] = substr($phone['phone'], 0, 7)."-".substr($phone['phone'], 7, 8);

		$user = User::checkPhone($phone['phone'],[
			'username'=>($phone['phone']),
			'isEntity'=>0,
		]);  

		$code = rand(1000, 9999);
		\Yii::$app->session->set($session_id . 'code', $code);
		\Yii::$app->session->set($session_id . 'user_id', $user->id);
		\Yii::$app->session->set($session_id . 'username', $user->username);
		$phone = $phone['phone'];

		$result_ = SmsController::send_sms("$phone", "Код: $code. Никому не сообщайте.kingfisher.kz");
		
		if (TEST_MOBILE) {
            d::td($code);
			$result['message']['success'] = 'Смс ' . $code . ' отправлена на Ваш телефон!!!';
		} else {
            if (count($result_) == 4) {
                $result['message']['success'] = 'Смс отправлена на Ваш телефон!!!';
            } else {
                $result['message']['error'] = 'Смс не отправлена. Что-то пошло не так!!!';
            }
		}
		
        return $result;	
    }
}