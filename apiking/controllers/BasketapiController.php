<?php

namespace apiking\controllers;

use backend\models\Pages;
use common\components\Debugger as d;
use common\models\Actions;
use yii\db\ActiveQuery;
use common\models\Category;
use common\models\Items;
use common\models\User;
use common\models\PromoCode;
use common\models\Orders;
use Yii;
use yii\filters\AccessControl;
use yii\filters\auth\QueryParamAuth;
use yii\rest\ActiveController;
use yii\web\Response;
use yii\web\BadRequestHttpException;
use yii\db\Expression;
use yii\helpers\Html;
use apiking\form\Order;
use yii\filters\auth\HttpHeaderAuth;
use common\models\ItemImg;
use yii\web\Session;
use apiking\components\ApiResponse;

/**
* КОРЗИНА. Описание работы с корзиной 'K I N G F I S H E R'
* baseURL = http://kingfisher.kz
*
* @author 'kingfisher'
* 
*/
class BasketapiController extends MainController
{
	/**
	* @ignore
	*/
    public $modelClass = User::class;
	
	/**
	* @ignore
	*/ 
	public $enable_discount = true;

	/**
	* @ignore
	*/
	public function init()
    {
        if (!Yii::$app->user->isGuest) {
            User::$id = Yii::$app->user->id;
        }
        parent::init();	
	}
	
	/**
	* @ignore
	*/
	protected function verbs()
	{
		return [
			'basket' => ['GET'],
			'addcart' => ['POST'],
//			'addcart' => ['GET'],
			'delcart' => ['POST'],
			'checkpromo' => ['GET'],
			'controlcheckpromo' => ['GET'],			
			'checkoutorder' => ['POST'],
			'successorder' => ['GET'],
			'replayorder' => ['POST'],
			'delcartallitems' => ['POST'],
			'handling' => ['POST'],
			'getSession' => ['POST'],
            'cartClear' => ['GET'],
			'getDataGeojson' => ['POST'],
		];
	}
	
	public function beforeAction($action)
    {
		//d::ajax('haha');
		//d::td(Yii::$app->controller->action->id);
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
	
	public function actionGetSession($session_id)
    {
		Yii::$app->session->open();
//		d::ajax($_SESSION);
    }

//    public function actionClearSession()
//    {
//        $session = Yii::$app->session;
//        $session->destroy();
//        // закрываем сессию
//        $session->close();
//        return 'Сессия сброшена!';
//    }

    public function actionCartClear($session_id)
    {
        $session = Yii::$app->session;
        $session->remove($session_id);
        $session->remove($session_id . 'type_handling');
        $session->remove($session_id . 'sum');
        return 'Корзина очищена!';
    }

	public function actionGetDataGeojson()
    {
		//d::ajax('haha');
        $result = ApiResponse::error();
        $file = Yii::getAlias('@frontend').'/web/uploads/data.geojson';
        if(file_exists($file)){
            if($json_file = file_get_contents($file)){
                $obj_file = json_decode($json_file, true);
                $result = ApiResponse::success($obj_file);
            }else{
                $result = ApiResponse::error('Файл пуст');
            }
        }else{
            $result = ApiResponse::error('Файла не существует');
        }
        return $result;
    }

	/**
	*  НАЛИЧИЕ(ПОКАЗАТЬ) ТОВАРА В КОРЗИНУ. Метод можно использовать для 
	* отображения количества товара для корзины в правом верхнем углу(сколько записей в возвращаемом объекте, столько и товаров)<br>
	* GET запрос на адрес<br>
	*  baseURL/apiking/basketapi/basket?session_id=$token_guest&code=HTFGS<br>
	*, где <br>
	*  $session_id - гостевой токен, code - промокод, если скидка по промокоду<br>	
	* Возвращается строка<br>  
	*{	<br>
	* 	&#8195;"id товара": количество товара<br>
	* }<br>
	* @return string
	*/
	public function actionBasket($session_id, $code = null)
    {
		$basket = [];
	
	 	$basket['sum_promocode_format'] =''; 
		$basket['sum_promocode'] = 0;
		$basket['status'] = '';
	//	$basket['discount_price_promo'] = 0;
  		   
		if (!empty($code)) {
			$actionCheckpromo = $this->actionCheckpromo($session_id, $code);
			$basket['sum_promocode_format'] = $actionCheckpromo['sum'];	
			$basket['sum_promocode'] = $actionCheckpromo['discount_price_promo'];	
			$basket['status'] = $actionCheckpromo['status'];
		//	$basket['discount_price_promo'] = $actionCheckpromo['discount_price_promo'];			
		}
	  
//	return $basket;
	
		$prePath = Yii::$app->function_system->getPrePathPictures();
		
		$selected_sum = Yii::$app->session->get($session_id . 'sum', []);
		$selected_handling = Yii::$app->session->get($session_id . 'type_handling', []);
		$items = Yii::$app->session->get($session_id, []);

		$basket_ = [];

		$sum_final = 0;
		foreach ($items as $key => $result) {
			if (!empty($result)) {
				$item = Items::findOne($key);
                $item->price = ceil($item->real_price());
				$itemImg = ItemImg::find()
				->andWhere(['item_id' => $key])
				->all();

				if ($item->img_list == '' AND isset($itemImg[0])) {
					$item['img_list'] = $itemImg[0]['url'];
				}

				$sum_final+= $item['price'];
											
				$basket_[] = [
					'item' => $item,
					'count' => $result,
					'typeHandlings' => $item->typeHandlings
				];
			}		
		}

        $sum_final = ceil($sum_final);

		$basket['selected_handling'] = $selected_handling;
		$basket['items'] = $basket_;
		$basket['old_sum_final'] = $sum_final;
		$basket['sum_final'] = $selected_sum;
		$basket['prePath'] = $prePath;
		return $basket;
    }
	
	/**
	*  ИЗМЕНИТЬ ИЛИ ОЧИСТИТЬ ДАННЫЕ обработки ПО ТОВАРАМ В КОРЗИНЕ 
	* POST запрос на адрес<br>
	*  baseURL/apiking/basketapi/handling?session_id=$token_guest<br>
	*, где <br>
	*  $session_id - гостевой токен<br>	
	*  отправить json {"selected_handling": выбранная обработка, отправить данные по типу {"id товара":["id обработки","id обработки"]}},  * очистить (удалить) {"selected_handling": ""}<br>
	* @return string  
	*/
	public function actionHandling($session_id)
    {			
		$info = Yii::$app->request->post();		
		$selected_handling = isset($info['selected_handling']) ? $info['selected_handling']: '';
		Yii::$app->session->set($session_id . 'type_handling', $selected_handling);
		return true;
    }
	
	/**
	*  ДОБАВИТЬ ТОВАР В КОРЗИНУ. Метод вызывается в нескольких местах:
	* 1. В карточке товара: get параметры, указанные ниже с условием $count = 1 (количество всегда равно 1) 
	* POST запрос на адрес<br>
	*  baseURL/apiking/basketapi/addcart?session_id=$token_guest<br>
	*, где $token_guest - гостевой токен, который присваивается в самом начале,<br>
	*  отправить json {"id": $id - id товара, "count": $count - количество товара, "selected_handling": выбранная обработка, отправить данные по типу {"id товара":["id обработки","id обработки"]}}<br>
	* Внимание!!! Когда товар первый раз добавляется в корзину, то дополнительно возвращается "type_handling" - массив предложений * *подготовить продукт
	* Возвращается строка<br>
	* {
	* &#8195;"data": {
	*&#8195;&#8195;	"count_string": "<b>1</b> товар",<br>
	*&#8195;&#8195;	"count": 1,<br>
	*&#8195;&#8195;"type_handling - массив предложений подготовить продукт.!!! Выводиться только когда первый раз продукт добавляешь в корзину (когда в корзине нет еще такого товара)": [<br>
	*&#8195;{<br>
	*&#8195;&#8195;"id": 2,<br>
	*&#8195;&#8195;"name": "Почистить и потрошить (бесплатно)",<br>
	*&#8195;&#8195;"isVisible": 1,<br>
	*&#8195;&#8195;"img": "/uploads/typeHandling/2_img.jpg"<br>
	*&#8195;},<br>
	* &#8195;{<br>
	*&#8195;"id": 5,<br>
	*&#8195;"name": "Нарезка бабочкой",<br>
	*&#8195;"isVisible": 1,<br>
	*&#8195;"img": "/uploads/typeHandling/5_img.jpg"<br>
	*&#8195;}<br>
	*]<br>
	*&#8195;	"items": {<br>
	*&#8195;&#8195;	15: {<br>
	*&#8195;&#8195;	"price_full": "22 500 т.",<br>
	*&#8195;&#8195;	"count": 5<br>
	*&#8195;	}<br>
	*&#8195;	},<br>
	*&#8195;	"sets": [],<br>
	*&#8195;	"sum": "22 500 т.",<br>
	*&#8195;	"sum_int": 22500,<br>
	*&#8195;	"sum_normal": 22500,<br>
	*&#8195;	"add_bonus": 225,<br>
	*&#8195;	"price_delivery_popup": 0,<br>
	*&#8195;	"min_sum_delivery": "8 000 т."<br>
	*&#8195;}<br>
	*&#8195;"prePath": "первая часть пути к картинкам (из базы выводится вторая часть)"<br>
	*}<br>	
	* @return string		
	*/
	public function actionAddcart($session_id)
    {
		$info = Yii::$app->request->post();
		$id = $info['id'];
		$count = $info['count'];
		$selected_handling = isset($info['selected_handling']) ? $info['selected_handling']: null;
		
		$selected_handling_= Yii::$app->session->get($session_id . 'type_handling', []);	
		$selected_handling__ = [];
		if (!empty($selected_handling_)) {
			foreach ($selected_handling_ as $key => $result) {
				if (!empty($result) && $result != '') {
					$selected_handling__[$key] = $result;
				}			
			}
		}
		
		if (!empty($selected_handling)) {
			$selected_handling__[$id] = $selected_handling[$id];
			Yii::$app->session->set($session_id . 'type_handling', $selected_handling__);
		}  
			  
		$items = Yii::$app->session->get($session_id, []);
        $new_id = [];
        if (isset($items[$id])) {
            $items[$id] = $items[$id] + $count;
            $new_id[$id] = 'count';
        } else {
            $items[$id] = $count;
            $new_id[$id] = 'new';
        }
        return $this->UpdateSum($items, $session_id, $new_id, 'items');
    }
		
	/**
	* @ignore
	*/
	public function UpdateSum($items, $session_id, $new_id = [], $type = 'items', $code_model = false)
    {
		$user = User::findIdentityByAccessToken($session_id);

//        d::ajax('stop');
        $prePath = Yii::$app->function_system->getPrePathPictures();
		
        if ($type == 'sets') {
            $sets = $items;
            $items = Yii::$app->session->get('items', []);
        } else {			
            $sets = Yii::$app->session->get('sets', []);
        }
        $count_items = count($items);
        $count_sets = count($sets);
        $all_count = $count_items + $count_sets;
        $data['count_string'] = Yii::t('main', 'count_items', ['n' => $all_count]);
        $data['count'] = $all_count;
        $result_items = $result_sets = $db_items = [];
        $sum = $sum_normal = $sum_without_discount = $sum_with_discount = 0;

        if ($items) {
				
            $q = new ActiveQuery(Items::className());
            $q->indexBy('id')
                ->with('itemsTogethers')
                ->andWhere(['id' => array_keys($items)]);
            $db_items = $q->all();

            $functions = Yii::$app->function_system;
            if ($this->enable_discount) {
				
				 if ($user && doubleval($user->discount)) {
                    $discount = [];
                } else {
                    $discount = $functions->discount_sale_items($db_items, $items);
                }
            } else {
                $discount = [];
            }
		
            foreach ($db_items as $item_id => $item) {
				if (!empty($items[$item_id])) {
                $count = $items[$item_id];
                $orig_price_by_weight = $item->origPriceByWeight($count);

                $full_price_item = $functions->full_item_price($discount, $item, $count);

                if (($type == 'items' && isset($new_id[$item_id]))) {
                    $result_items[$item_id]['price_full'] = number_format($full_price_item, 0, '', ' ') . ' т.';
                    switch ($new_id[$item_id]) {
                        case 'new':
                         
							$type_handlings = $item->typeHandlings; 

                            if ($type_handlings) {
								$data['type_handling'] = $type_handlings;
                            }							
							
						$result_items[$item_id]['new'] = ['item' => $item, 'count' => $count];
						break;

                        case 'count':
                            $result_items[$item_id]['count'] = $count;
                            break;
                        default:
                            $result_items[$item_id]['count'] = $count;
                            break;
                    }
                } else {
								
                    $result_items[$item_id]['count'] = $count;
                    $result_items[$item_id]['price_full'] = number_format($full_price_item, 0, '', ' ') . ' т.';
                }

                if(!$item->discount AND !$item->old_price){
                    // Сумма товаров без скидки
                    $sum_without_discount += $orig_price_by_weight;
                }else{
                    // Сумма товаров со скидкой
                    $sum_with_discount += $full_price_item;
                }

                $sum += $full_price_item;
                $sum_normal += $item->sum_price($count);
				
				}			
            }
        }
//        d::ajax($sum);

        /*
         * Проверка на минимальную сумму заказа.
         * Если у промокода указана минимальная сумма заказа,
         * то сделаем проверку.
         */
        if($code_model !== false AND $code_model->min_amount){
            if(($sum_without_discount + $sum_with_discount) < $code_model->min_amount){
                return false;
            }
        }

        if ($sets) { 
            $q = new ActiveQuery(Sets::className());
            $q->indexBy('id')
                ->andWhere(['id' => array_keys($sets)]);
            $db_items = $q->all();
            foreach ($db_items as $item_id => $item) {
                $count = $sets[$item_id];
                if (($type == 'sets' && isset($new_id[$item_id]))) {
                    $result_sets[$item_id]['price_full'] = number_format(round($count * $item->real_price()), 0, '', ' ') . ' т.';
                    switch ($new_id[$item_id]) {
                        case 'new':
                            $result_sets[$item_id]['new'] = ['item' => $item, 'count' => $count];
							
							break;
                        case 'count':
                            $result_sets[$item_id]['count'] = $count;
                            break;
                        default:
                            $result_sets[$item_id]['count'] = $count;
                            break;
                    }
                } else {
                    $result_sets[$item_id]['count'] = $count;
                    $result_sets[$item_id]['price_full'] = number_format(round($count * $item->real_price()), 0, '', ' ') . ' т.';
                }
                $sum += round($count * $item->real_price());
                $sum_normal += round($count * $item->real_price());
            }
        }

        if ($type == 'items') {
            Yii::$app->session->set($session_id, $items);
        } else {
            Yii::$app->session->set($type, $sets);
        }

        if ($this->enable_discount) {
			
            if ($user && doubleval($user->discount)) {
                $order = new Orders(['discount' => $user->discount . '%']);
                $sum = $sum - $order->discount($sum);
            }
		
        }
        $data['items'] = $result_items;

        $sum = ceil($sum);
        $sum_normal = ceil($sum_normal);
        $sum_without_discount = ceil($sum_without_discount);
        $sum_with_discount = ceil($sum_with_discount);

        $data['sets'] = $result_sets;
        $data['sum'] = number_format($sum, 0, '', ' ') . ' т.';
		Yii::$app->session->set($session_id . 'sum', $sum);
        $data['sum_int'] = $sum;
        $data['sum_without_discount'] = $sum_without_discount;
        $data['sum_with_discount'] = $sum_with_discount;
        $data['sum_normal'] = $sum_normal;
		$percent_bonus = \Yii::$app->function_system->percent();
        $add_bonus = ceil(((int)$sum * ($percent_bonus)) / 100);
        $data['add_bonus'] = $add_bonus;
     //   if (Yii::$app->id == 'app-frontend' && Yii::$app->request->get('cart_small')) {
		if (true) {
            $sum_full = (int)$sum;
            $sum_normal = (int)$sum_normal;
            $discount_price = (int)($sum_normal - (int)$sum);
            if ($discount_price <= 0) {
                $discount_price = 0;
            } else {
                $data['discount_price'] = number_format($discount_price, 0, '', ' ') . ' т.';
            }
            $data['sum_full'] = number_format($sum_full, 0, '', ' ') . ' т.';
            $data['sum'] = number_format((int)$sum + $discount_price, 0, '', ' ') . ' т.';
        }
        $max_price_delivery = (int)\Yii::$app->settings->get('max_price_delivery');
        $data['price_delivery_popup'] = 0;
        if ($sum <= \Yii::$app->settings->get('max_price_delivery')) {
            $data['price_delivery_popup'] = number_format($max_price_delivery - $sum, 0, '', ' ') . ' т.';
        }
        $data['min_sum_delivery'] = number_format($max_price_delivery, 0, '', ' ') . ' т.';
//        d::ajax($data);
		return [
			'data' => $data,
			'prePath' => $prePath
		];
    }
	
	/**
	*  ИСПОЛЬЗОВАТЬ ПРОМОКОД ПРИ ОФОРМЛЕНИИ ЗАКАЗА
	* 
	* GET запрос на адрес<br>
	*  baseURL/apiking/basketapi/checkpromo?code=$code&session_id=$token_guest<br>
	*, где $code - промокод, $token_guest - гостевой токен,<br>	
	* Возвращается<br>  
	* объект {<br>
	*&#8195;"count_string": "<b>1</b> товар",<br>
	*	&#8195;"count": количество видов товаров,<br>
	*	&#8195;"items": {<br>
	*	&#8195;id товара: {<br>
	*	"count": количество этого товара,<br>
	*	"price_full": "цена до скидки"<br>
	*	}<br>
	*	},<br>
	*	"sets": [],<br>
	*	"sum": "товаров на сумму",<br>
	*	"sum_int": товаров на сумму(целое число),<br>
	*	"sum_normal": товаров на сумму(целое число),<br>
	*	"add_bonus": 1464,<br>
	*	"price_delivery_popup": 0,<br>
	*	"min_sum_delivery": "минимальная сумма доставки",<br>
	*	"discount_price": "сумма скидки",<br>
	*	"delivery": "<i class="free">Бесплатная</i>",<br>
	*	"sum_full": "цена после скидки"<br>
	*}	<br>
	* @return array
	*/
    public function actionCheckpromo($session_id, $code)
    {
        if (($code_model = PromoCode::find()->andWhere(['code' => $code])->one())
            && $code_model->check_enable()
        ) {
            $items = Yii::$app->session->get($session_id, []);
            $this->enable_discount = false;

			// ...
            // тут был код валидации промокода
			// ...

            $result = $this->UpdateSum($items, $session_id, [], 'items', $code_model);

            if($result === false){
                $result = [];
                $result['sum'] = '';
                $result['sum_out_format'] = 0;
                $result['status'] = 'Минимальная сумма заказа должна быть: '.$code_model->min_amount.'!';
                $result['discount_price_promo'] = 0;
                return $result;
            }

            $sum_full = (int)$result['data']['sum_int'];
            $full_sum_without_discount    = (int)$result['data']['sum_without_discount'];
            $full_sum_with_discount       = (int)$result['data']['sum_with_discount'];

            /*
             * Раньше скидка промокода действовала на все товары.
             * На товары без скидки и на товары с персональной скидкой.
             */
//            $discount_price = $code_model->discount($sum_full);
            // Сейчас - скидка промокода действует только на товары без персональной скидки.
            $discount_price = $code_model->discount($full_sum_without_discount);
						
            if ($discount_price <= 0) {
                $discount_price = 0;
            } else {
                $result['discount_price'] = number_format($discount_price, 0, '', ' ') . ' т.';
                $sum_full = $sum_full - $discount_price;
            }
						
			$prePath = Yii::$app->function_system->getPrePathPictures();	
			$selected_sum = Yii::$app->session->get($session_id. 'sum', []);	
			$selected_handling = Yii::$app->session->get($session_id. 'type_handling', []);			

			$basket_ = [];
			$basket = [];
			$sum_final = 0;
			foreach ($items as $key => $result_) {
				if (!empty($result_)) {
						$item = Items::findOne($key);

					$sum_final+= $item['price'];
												
					$basket_[] = [
						'item' => $item,
						'count' => $result_,
						'typeHandlings' => $item->typeHandlings
					];
				}		
			}
		 	
			$result['selected_handling'] = $selected_handling;
			$result['items'] = $basket_;
			$result['old_sum_final'] = $sum_final;
			//	$result['sum_final'] = $selected_sum;
			$result['prePath'] = $prePath;

			$city = Yii::$app->request->get('city', 1);
			$result['delivery'] = Yii::$app->function_system->delivery_price($sum_full, $city);
			$result['sum_full'] = number_format($sum_full, 0, '', ' ') . ' т.';
			$result['sum_final'] = $sum_full;
			$result['sum'] = number_format((int)$sum_full + $discount_price, 0, '', ' ') . ' т.';
			$result['sum_out_format'] = ((int)$sum_full + $discount_price);
			$result['discount_price_promo'] = $discount_price;
			$result['status'] = 'Данный код действителен!';
		
		//	Yii::$app->session->set($session_id . 'sum', $result['sum']);			
		      	     
		//	return $this->UpdateSum($result, $new_id, 'items', $session_id);

			return $result;
        } else {
			$result['sum'] = '';
			$result['sum_out_format'] = 0;
			$result['status'] = 'Данный код не действителен!';
			$result['discount_price_promo'] = 0;
            return $result;
        }
    }
	      
	/**
	*  ПРОВЕРКА ПРОМОКОДА ПРИ ОФОРМЛЕНИИ ЗАКАЗА
	* 
	* GET запрос на адрес<br>
	*  baseURL/apiking/basketapi/controlcheckpromo?code=$code<br>
	*, где $code - промокод<br>	
	* Возвращается<br>  
	* объект {<br>
	*&#8195;"count_string": "<b>1</b> товар",<br>
	*	&#8195;"count": количество видов товаров,<br>
	*	&#8195;"items": {<br>
	*	&#8195;id товара: {<br>
	*	"count": количество этого товара,<br>
	*	"price_full": "цена до скидки"<br>
	*	}<br>
	*	},<br>
	*	"sets": [],<br>
	*	"sum": "товаров на сумму",<br>
	*	"sum_int": товаров на сумму(целое число),<br>
	*	"sum_normal": товаров на сумму(целое число),<br>
	*	"add_bonus": 1464,<br>
	*	"price_delivery_popup": 0,<br>
	*	"min_sum_delivery": "минимальная сумма доставки",<br>
	*	"discount_price": "сумма скидки",<br>
	*	"delivery": "<i class="free">Бесплатная</i>",<br>
	*	"sum_full": "цена после скидки"<br>
	*}	<br>
	* @return array
	*/
    public function actionControlcheckpromo($code, $key = false, $price = false)
    { 
		$error = false;
		$result = ['status' => true];
        if (($code = \Yii::$app->request->get('code'))
            && ($code_model = PromoCode::find()->andWhere(['code' => $code])->one())
            && $code_model->check_enable()
        ) {
			
			/*
			 * Этот if сработает только для промокода для первого заказа из приложения
			 * =======================================================================
             * Если в GET есть code,
			 * если промокод для первого заказа из приложения,
			 * если в GET есть ключ пользователя
             */
            $error_text = 'Строка ошибок пуста';
            if($code AND $code_model->type == 'first_order_app' AND $key != false){

                $user = User::findIdentityByAccessToken($key);
				
                /*
                 * Если в HTTP заголовке не существует девайса
                 * или промокод несовместим с девайсом,
                 * т.е. промокод для андроида, может активироваться только через андроид,
                 * а промокод для айфона, может активироваться только через айфон.
                 */
                if(!isset($_SERVER['HTTP_APP_TYPE']) OR $code_model->device != $_SERVER['HTTP_APP_TYPE']){
                    $error = true;
                    $error_text = 'Промокод не действителен! Несовместимость устройства.';
                }else{
					if ($code_model->min_amount) {
						if ($price < $code_model->min_amount) {
							$error = true;
							$error_text = 'Минимальная сумма заказа должна быть '.$code_model->min_amount.'!';
						}
					}
					
                    $promo_settings = $user->settings('first_order_app');
                    /*
                     * Если настройки пусты, то этот IF не сработает.
                     * Да оно и не надо, если настроек по промокоду нету.
                     */
                    if(count($promo_settings)){
                        $promo_device = array_search($code, $promo_settings);
                        /*
                         * Если в настройках пользователя, введёный промкод уже есть,
                         * значит вернём предупреждение.
                         */
                        if($promo_device !== false){
                            $error = true;
                            $error_text = 'Промокод уже был использован вами ранее!';
                        } 
                    }
                }
            }
			
			if ($error) {
				$result['status'] = false;
			}
			
        } else {
			$result['status'] = false;
        }
		
		return $result;
    }
	
	/**
	* ОФОРМИТЬ ЗАКАЗ В КОРЗИНЕ (кнопка "все верно оплатить заказ" на вкладке оформления заказа)
	* 
	* POST запрос на адрес<br>
	*  baseURL/apiking/basketapi/checkoutorder?session_id=$token_guest&key=$key<br>
	*, где $token_guest - гостевой токен, который присваивается в самом начале, $key - это ключ полученный при авторизации или *регистрации<br>
	* header 'Accept:application/json'<br>
	* header 'Content-Type:application/json'<br>
	* Отправить json <br>	
	* {<br>	
	* 	&#8195;"first_name":"test",  <br> 
	* 	&#8195;"last_name":"test",<br>
	* &#8195;	"phone":"телефон",<br>
	* 	&#8195;"email":"test",<br>
	* &#8195;	"isEntity":0,<br>
	* &#8195;	"city": id города,<br>
	* &#8195;	"street":"Улица",<br>
	* &#8195;	"home":"Дом",<br>
	* &#8195;	"payment":"1",<br>
	* &#8195;	"type_delivery":"1",<br>
	* &#8195;	"time_order":"15 постоянная константа, означающая время с 15.00 - 19.00 согласно сайта",<br>
	* &#8195;	"house":"test"<br>
	* &#8195;	"bonus":1<br>
	* }<br>	
	* Возвращается cтрока<br>
	*{<br>
	* &#8195;	"data_for_cloud_payments": {<br>
	* &#8195;	"sum_real": 9000,<br>
	* &#8195;	"order_id": "12490",<br>
	* &#8195;	"accountId": 6216,<br>
	* &#8195;	"email": null<br>
	* 	}<br>
	*}<br>
	* @return string
	*/
	public function actionCheckoutorder($session_id, $key)
    {
		$model = new Order();
		$model->load(Yii::$app->request->bodyParams, '');
		$result = $model->send($session_id, $key);
		return $result;
    }
	
	/**
	* УСПЕШНЫЙ ПЛАТЕЖ. Этот метод вызыватся в случае успешного проведения платежа
	* 
	* GET запрос на адрес<br>
	*  baseURL/apiking/basketapi/successorder <br>
	* Возвращается<br>
	* array [
	*	"id": id,<br>
	*	"name": "Спасибо за покупку",<br>
	*	"body": "Спасибо ваш заказ №12505 оформлен, в течение 30 минут с вами свяжется наш менеджер ",<br>
	*	"isVisible": 1,<br>
	*	"not_delete": 1<br>
	* ]<br>
	* @return string
	*/
	public function actionSuccessorder($session_id)
    {
        if ($id = \Yii::$app->session->get($session_id . 'success_order')) {
            $item = Pages::findOne(3);

            if ($success_order_pay = \Yii::$app->session->get($session_id .'success_order_pay')) {
                $order_model = Orders::findOne(intval($success_order_pay));

                $send_mails = explode(',', \Yii::$app->settings->get('manager_emails', 'viktor@instinct.kz'));
                foreach ($send_mails as $key_email => &$value_email) {
                    if (!($value_email = trim($value_email, " \t\n\r\0\x0B"))) {
                        unset($send_mails[$key_email]);
                    }
                }
                \Yii::$app->mailer->compose(['html' => 'admin/order'], ['order' => $order_model])
                    ->setFrom([\Yii::$app->params['supportEmail'] => \Yii::$app->params['siteName'] . ' info'])
                    ->setTo($send_mails)
                    ->setSubject('Новый заказ на сайте ' . \Yii::$app->params['siteName'])->send();
                if ($order_model->user_mail) {
                    \Yii::$app->mailer->compose(['html' => 'order'], ['order' => $order_model])
                        ->setFrom([\Yii::$app->params['supportEmail'] => 'Интернет-магазин ' . \Yii::$app->params['siteName'] . '.kz'])
                        ->setTo($order_model->user_mail)
                        ->setSubject('Заказ на сайте ' . \Yii::$app->params['siteName'] . '.kz')->send();
                }
                \Yii::$app->session->remove($session_id . 'success_order_pay');
                Orders::updateAll(['pay_status' => 'send_pay'], ['id' => $order_model->id, 'pay_status' => 'wait']);
                Yii::$app->session->remove($session_id);
                Yii::$app->session->remove($session_id . 'type_handling');
				Yii::$app->session->remove($session_id . 'sum');
                Yii::$app->session->remove($session_id .'sets');
            }

			$body = preg_replace("'<script[^>]*?>.*?</script>'si", '', $item->body);
			$body = strip_tags($body);		
			$body = preg_replace("~&nbsp;~",' ',$body);

            $item->body = str_replace('{order_number}', $id, $body);
            return $item;
        } else {
            throw new BadRequestHttpException();
        }
    }
	
	/**
	* ПОВТОРИТЬ ЗАКАЗ (из личного кабинета ссылка перезаказать)
	* 
	* POST запрос на адрес<br>
	*  baseURL/apiking/basketapi/replayorder?session_id=$token_guest&id=$id<br>
	*, где $token_guest - гостевой токен, который присваивается в самом начале, $id - номер заказа<br>
	* Возвращается<br>
	* "message": {<br>
	*"success": "Ваш заказ успешно отправлен!"<br>
	*}<br>
	*},<br>
	* @return [<br>
	* "id товара": количество товара<br>
	* 	}<br>
	* 	]<br>
	*/
    public function actionReplayorder($session_id)
    { 	
        if ($id = Yii::$app->request->get('id')) {

            $order = Orders::find()
                ->joinWith([
                    'ordersSets',
                    'ordersItems',
                ])
                ->andWhere('`orders_sets`.id is NOT NULL OR `orders_items`.id is NOT NULL')
                ->andWhere(['orders.id' => $id, 'user_id' => Yii::$app->user->id])
                ->with(['ordersItems.item', 'ordersSets.set'])
                ->one(); 
            if ($order) { 
                $sets = [];
                $items = [];
                $type_handling = [];
                foreach ($order->ordersItems as $item_order) {
                    $items[$item_order->item_id] = $item_order->count;
                    $type_handling[$item_order->item_id] = $item_order->getOrdersItemsHandings()->select('type_handling_id')->column();
                }
                foreach ($order->ordersSets as $item_order) {
                    $items[$item_order->set_id] = $item_order->count;
                }
                if ($items) {
                    Yii::$app->session->set($session_id, $items);
                }
                if($type_handling){
                    Yii::$app->session->set($session_id . 'type_handling', $type_handling);
                }
                if($sets){
                    Yii::$app->session->set($session_id .'sets', $sets);
                }
                return Yii::$app->session->get($session_id, $items);
            } else {
                return 'Заказ не найден';
            }
        } else {
            return 'Данных нет';
        }
    }
	
	/**
	*  УДАЛИТЬ ТОВАР В КОРЗИНЫ. Метод вызывается нажатии на ссылку удалить в корзине.
	*!!! Внимание. После удаления товар из массива не удаляется, а его количество становиться равным NULL согласно сайта.
	* 
	* POST запрос на адрес<br>
	*  baseURL/apiking/basketapi/delcart?&id=$id&session_id=$token_guest<br>
	*, где $token_guest - гостевой токен, который присваивается в самом начале, $id - id товара,<br>
	* $count - количество товара.<br>
	* Возвращается строка<br>
	* {
	* "data": {
	*	"count_string": "<b>1</b> товар",<br>
	*	"count": 1,<br>
	*"type_handling - массив предложений подготовить продукт.!!! Выводиться только когда первый раз продукт добавляешь в корзину (когда в корзине нет еще такого товара)": [<br>
	*{<br>
	*"id": 2,<br>
	*"name": "Почистить и потрошить (бесплатно)",<br>
	*"isVisible": 1,<br>
	*"img": "/uploads/typeHandling/2_img.jpg"<br>
	*},<br>
	* {<br>
	*"id": 5,<br>
	*"name": "Нарезка бабочкой",<br>
	*"isVisible": 1,<br>
	*"img": "/uploads/typeHandling/5_img.jpg"<br>
	*}<br>
	*]<br>
	*	"items": {<br>
	*	15: {<br>
	*	"price_full": "22 500 т.",<br>
	*	"count": 5<br>
	*	}<br>
	*	},<br>
	*	"sets": [],<br>
	*	"sum": "22 500 т.",<br>
	*	"sum_int": 22500,<br>
	*	"sum_normal": 22500,<br>
	*	"add_bonus": 225,<br>
	*	"price_delivery_popup": 0,<br>
	*	"min_sum_delivery": "8 000 т."<br>
	*}<br>
	*"prePath": "первая часть пути к картинкам (из базы выводится вторая часть)"<br>
	*}<br>	
	* @return string		
	*/    
	public function actionDelcart($id, $session_id)
    {	
		// $items = Yii::$app->session->get($session_id, []);		

		// if (isset($items[$id])) {
            // unset($items[$id]);
        // }	
	
        // $new_id = [];
        // if (isset($items[$id])) {
            // $items[$id] = $items[$id] + $count;
            // $new_id[$id] = 'count';
        // } else {
            // $items[$id] = $count;
            // $new_id[$id] = 'new';
        // }	
	 // return $this->UpdateSum($items, $new_id, 'items',$session_id);
		$items = Yii::$app->session->get($session_id, []);
        $type_handlings = Yii::$app->session->get($session_id . 'type_handling', []);
        $new_id = [];

		//return $items;
        if (isset($items[$id])) {
            unset($items[$id]);
        }
		
        if (isset($type_handlings[$id])) {
            unset($type_handlings[$id]);
            Yii::$app->session->set($session_id . 'type_handling', $type_handlings);
        }
		
        return $this->UpdateSum($items, $session_id, $new_id, 'items');
    }
 
	/**
	*  ПОЛНАЯ ОЧИСТКА КОРЗИНЫ.
	* POST запрос на адрес<br>
	*  baseURL/apiking/basketapi/delcartallitems?session_id=$token_guest<br>
	*, где $token_guest - гостевой токен, который присваивается в самом начале<br>
	* $count - количество товара.<br>
	* Возвращается строка<br>
	*}<br>
	*"prePath": "первая часть пути к картинкам (из базы выводится вторая часть)"<br>
	*}<br>	
	* @return string	 	
	*/
	public function actionDelcartallitems($session_id)
    {
		$items = Yii::$app->session->get($session_id, []);
		if (isset($items)) {
			Yii::$app->session->remove($session_id);
			Yii::$app->session->remove($session_id . 'type_handling');
			Yii::$app->session->remove($session_id . 'sum');
        }

		return $items;
    }
}
