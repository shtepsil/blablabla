<?php
namespace backend;

use common\components\Debugger as d;
use shadow\widgets\AdminActiveForm;
use yii\helpers\Json;
use yii\helpers\Url;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use Yii;
use yii\web\Response;
use common\models\User;

/**
 * Class AdminController
 * @package backend
 * @property \yii\db\ActiveRecord $model
 */
class AdminController extends Controller
{
//	public function beforeAction($action)
//	{
//		if(parent::beforeAction($action))
//		{
//			if ($action->controller->id != 'login') {
//				if (!Yii::$app->user->can('loginAdminPanel')) {
//					$test = $action->controller->route;
//					Yii::$app->getUser()->setReturnUrl([$action->controller->route]);
//					$action->controller->redirect(['login/index']);
//				}
//			}
//			return true;
//		} else {
//			return false;
//		}
//	}
    public $model;
    public $url = [
        'back' => ['site/index'],
        'control' => []
    ];
    public $breadcrumb = [];
    /**
     * Initializes the object.
     * This method is invoked at the end of the constructor after the object is initialized with the
     * given configuration.
     */

    public function init()
    {
        $this->enableCsrfValidation = false;
        parent::init(); // TODO: Change the autogenerated stub
        $view = $this->view;
        if ($success = \Yii::$app->session->getFlash('success')) {
            $success = Json::encode($success);
            $this->view->registerJs(<<<JS
$.growl.notice({title: 'Успех', message: {$success}, duration: 5000});
JS
                , $view::POS_LOAD);
        }
        if ($error = \Yii::$app->session->getFlash('error')) {
            $error = Json::encode($error);
            $this->view->registerJs(<<<JS
$.growl.error({title: 'Ошибка', message: {$error}, duration: 5000});
JS
                , $view::POS_LOAD);
        }
        if(!Yii::$app->user->isGuest) {
            User::$id = Yii::$app->user->id;
        }
    }

    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }
    public function MenuActive($active)
    {
        $admin_menu = Yii::$app->params['admin_menu'];
        if(\Yii::$app->params['RetailCRM']['enable'] === false){
            unset($admin_menu['modules']['items']['retailcrm']);
        }
        if ($admin_menu) {
            $admin_menu = $this->searchActive($admin_menu, $active);
        }
        Yii::$app->params['admin_menu'] = $admin_menu;
    }
    function searchActive($array, $active)
    {
        foreach ($array as $key => $value) {
            if ($key === $active) {
                $array[$key]['active'] = true;
            } else {
                $array[$key]['active'] = false;
            }
            if (isset($value['items'])) {
                $array[$key]['items'] = $this->searchActive($value['items'], $active);
            }
        }
        return $array;
    }

    /**
     * @param $action
     * @param $result
     * @return mixed
     */
    public function afterAction($action, $result)
    {
        User::$user_type = false;
        User::$id = null;
        return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
    }

    public function actionControl()
    {
//        d::pex($this->model);
        $item = $this->model;
        if ($id = \Yii::$app->request->get('id')) {
            $item = $item->findOne($id);
        }
        $data['item'] = $item;
        if ($data['item']) {
            return $this->render('//control/form', $data);
        } else {
            return false;
        }
    }

    /**
     * @return Response
     */
    public function actionSave()
    {
		$post = Yii::$app->request->post();
        $record = $this->model;
//        d::pex($record);
//        d::ajax('AdminController->actionSave');
//        d::ajax($_FILES);
//        d::ajax($post);
        if ($id = Yii::$app->request->post('id')) {
            $record = $record->findOne($id);
        }
//        d::pex($record);
        if ($record->load(Yii::$app->request->post())) {
            if (Yii::$app->request->isAjax) {
                Yii::$app->response->format = Response::FORMAT_JSON;
                // Для отправки пуш уведомлений сделаем другие условия
                if(isset($post['onesignal_notification'])){
                    $result = Yii::$app->one_signal->start($post['onesignal_notification']);
                }else{
                    $record->on($record::EVENT_AFTER_VALIDATE, [$record, 'validateAll']);
                    if ($errors = AdminActiveForm::validate($record)) {
                        $result['errors'] = $errors;
                    } else {
//                        d::ajax('Сохраняем');
                        $event = $record->isNewRecord ? $record::EVENT_BEFORE_INSERT : $record::EVENT_BEFORE_UPDATE;
                        $record->on($event, [$record, 'saveAll']);
                        $event_clear = $record->isNewRecord ? $record::EVENT_AFTER_INSERT : $record::EVENT_AFTER_UPDATE;
                        $record->on($event_clear, [$record, 'saveClear']);
                        $save = $record->save(false);
                        if ($save) {
//                    if (1) {
                            if (Yii::$app->request->post('commit') == 1) {
                                $result['url'] = Url::to($this->url['back']);
                            } else {
                                $url = $this->url['control'];
                                $url['id'] = $record->id;
                                $result['url'] = Url::to($url);
                            }
                            $result['set_value']['id'] = $record->id;
                            $result['message']['success'] = 'Сохранено!';
                        } else {
                            $result['message']['error'] = 'Произошла ошибка!';
                        }
                    }
                }
                return $result;
            } else {
                $record->validate();
            }
        }
        if (!Yii::$app->request->isAjax) {
            return $this->goBack();
        }
    }

    /**
     * @param $id
     * @return array|Response
     */
    public function actionDeleted($id)
    {
//        d::ajax(get_class($this->model));
//        d::ajax($id);
        /**
         * @var $item \yii\db\ActiveRecord
         */
        $result = [];
        if(Yii::$app->user->can('admin') || Yii::$app->user->can('copywriter')){
            $item = $this->model->findOne($id);
//            \common\components\Debugger::ajax($item);
            $item->on($item::EVENT_BEFORE_DELETE, [$item, 'saveClear']);
            if($item->getAttribute('not_delete')){
                $result['error'] = 'Данная запись защищена от удаления!';
            }else{
                if($item->delete()){
                    $result['success'] = 'Запись успешно удаленна!';
                }else{
//                    d::ajax($item->getErrors());
                    $result['error'] = 'Произошла ошибка на стороне сервера!';
                }
            }
        }else{
            $result['error'] = 'У вас нет прав!';
        }
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            if (isset($result['success'])) {
                \Yii::$app->session->setFlash('success', $result['success']);
            }
            return $result;
        }else{
            if ($result) {
                foreach ($result as $key => $value) {
                    \Yii::$app->session->setFlash($key, $value);
                }
            }
            return $this->goBack();
        }
    }

    /**
     * @param $id
     * @param $attr
     * @param $val
     * @return array
     * @throws BadRequestHttpException
     */
	public function actionEditAttr($id,$attr,$val)
	{
		Yii::$app->response->format = Response::FORMAT_JSON;
		if(Yii::$app->request->isAjax&&Yii::$app->user->can('admin') || Yii::$app->request->isAjax&&Yii::$app->user->can('copywriter')){
			$item = $this->model->findOne($id);
			if($item->hasAttribute($attr)){
				if($item->getAttribute($attr)!=$val){
					$item->setAttribute($attr, $val);
					if($item->validate((array)$attr)){
						$item->updateAll([$attr => $val], 'id=:id', [':id' => $item->id]);
						return [
							'success' => 'Запись обновлена'
						];
					}
				}else{
					return [
						'success' => 'Запись обновлена'
					];
				}
			}else{
				throw new BadRequestHttpException();
			}
		}else{
			throw new BadRequestHttpException();
		}
	}
	
}//Class