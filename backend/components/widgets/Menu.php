<?php
/**
 * Created by PhpStorm.
 * Project: yii2-cms
 * User: viktor
 * Date: 11.02.15
 * Time: 15:56
 */

namespace backend\components\widgets;

use Closure;
use common\components\Debugger as d;
use Exception;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\helpers\Url;
use Yii;

class Menu extends \yii\widgets\Menu {
    public static $subMenuOpen = false;
	public $subMenuClass = 'mm-dropdown';
	public $linkTemplateWithoutIcon = '<a href="{url}"><span class="mm-text">{label}</span></a>';
	public $subLinkTemplate = '<a tabindex="-1" href="{url}"><i class="menu-icon fa {icon}"></i><span class="mm-text">{label}</span></a>';
	public $subLinkTemplateWithoutIcon = '<a tabindex="-1" href="{url}"><span class="mm-text">{label}</span></a>';

    /**
     * Renders the menu.
     * @throws Exception
     */
    public function run()
    {
        $this->items = $this->accessItems($this->items);
        parent::run(); // TODO: Change the autogenerated stub
    }
    protected function accessItems($items)
    {
        foreach ($items as $i => $item) {
            if (isset($item['role']) && !\Yii::$app->user->can($item['role'])) {
                unset($items[$i]);
            }
            if (isset($item['items'])) {
                $item['items'] = $this->accessItems($item['items']);
            }
            unset($item['role']);
        }
        return $items;
    }
    protected $active_menu = false;
    protected function renderItems($items, $subMenu = false)
    {
        $n = count($items);
        $lines = [];
        $get = Yii::$app->request->get();
        foreach ($items as $i => $item) {
            $options = array_merge($this->itemOptions, ArrayHelper::getValue($item, 'options', []));
            $tag = ArrayHelper::remove($options, 'tag', 'li');
            $class = [];

            if ($item['active']) {
                $class[] = $this->activeCssClass;
                $this->active_menu = true;
            }

            /*
             * Для пунктов меню, у которых url одинаковый.
             * Проверка происходит по GET параметру filter_menu
             */
            if (
                isset($item['url']) AND is_array($item['url'])
                AND isset($get['filter_menu'])
                AND array_key_exists('filter_menu', $item['url'])
                AND $item['url']['filter_menu'] == $get['filter_menu'])
            {
                $class[] = $this->activeCssClass;
                $this->active_menu = true;

            }
            if ($i === 0 && $this->firstItemCssClass !== null) {
                $class[] = $this->firstItemCssClass;
            }
            if ($i === $n - 1 && $this->lastItemCssClass !== null) {
                $class[] = $this->lastItemCssClass;
            }
            if (!empty($item['items'])) {
                $class[] = $this->subMenuClass;
                $this->active_menu = false;
                $menu = $this->renderItem($item, $subMenu);
                $menu .= strtr($this->submenuTemplate, [
                    '{items}' => $this->renderItems($item['items'], true),
                ]);
                if ($this->active_menu) {
                    $class[] = 'open';
                }
            } else {
                $menu = $this->renderItem($item, $subMenu);
            }
            if (!empty($class)) {
                Html::addCssClass($options, $class);
//                if (empty($options['class'])) {
//                    $options['class'] = implode(' ', $class);
//                } else {
//                    $options['class'] .= ' ' . implode(' ', $class);
//                }
            }
            $lines[] = Html::tag($tag, $menu, $options);
        }
        return implode("\n", $lines);
    }
    protected function renderItem($item, $subMenu = false)
    {
        if (isset($item['url'])) {
            if ($subMenu) {
                $template = ArrayHelper::getValue($item, 'template', $this->subLinkTemplate);
            } else {
                $template = ArrayHelper::getValue($item, 'template', $this->linkTemplate);
            }
            return strtr($template, [
                '{url}' => Html::encode(Url::to($item['url'])),
                '{label}' => $item['label'],
                '{icon}' => isset($item['icon']) ? $item['icon'] : ''
            ]);
        } else {
            $template = ArrayHelper::getValue($item, 'template', $this->labelTemplate);
            return strtr($template, [
                '{label}' => $item['label'],
            ]);
        }
    }
}