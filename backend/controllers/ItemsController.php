<?php
/**
 * Created by PhpStorm.
 * Project: morkovka
 * User: lxShaDoWxl
 * Date: 29.07.15
 * Time: 16:11
 */
namespace backend\controllers;

use common\components\Debugger as d;
use backend\AdminController;
use backend\forms\Import;
use backend\forms\YmlForm;
use common\models\City;
use common\models\Items;
use shadow\helpers\StringHelper;
use shadow\widgets\AdminActiveForm;
use Yii;
use yii\bootstrap\ActiveForm;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\helpers\Url;
use yii\web\Response;
use yii\web\UploadedFile;

/**
 * Class CategoryController
 * @package backend\controllers
 * @property \common\models\Items $model
 */
class ItemsController extends AdminController
{
    public function init()
    {
		$this->on(self::EVENT_BEFORE_ACTION, function () {
			$this->model = new Items();
		});
        $this->view->title = 'Товар';
        $this->breadcrumb[] = [
            'url' => ['category/index'],
            'label' => 'Каталог',
        ];
        $this->breadcrumb[] = [
            'url' => ['items/control'],
            'label' => $this->view->title
        ];
        $this->MenuActive('catalog');
        parent::init(); // TODO: Change the autogenerated stub
    }
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => ['export', 'import'],
                        'allow' => true,
                        'roles' => ['admin', 'manager', 'collector'],
                    ],
                    [
                        'actions' => ['export', 'import'],
                        'allow' => false,
                        'roles' => ['driver'],
                    ],
                    [
                        'allow' => true,
                        'roles' => ['loginAdminPanel','copywriter'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'control' => ['post', 'get'],
                ],
            ],
        ];
    }
    public function actionControl()
    {
        $item = $this->model;
        if ($id = \Yii::$app->request->get('id')) {
            $item = $item->findOne($id);
        }
        $data['item'] = $item;
        if ($data['item']) {
            return $this->render('//control/form', $data);
        } else {
            return false;
        }
    }
    public function actionSave()
    {
        $record = $this->model;
        if ($id = Yii::$app->request->post('id')) {
            $record = $record->findOne($id);
        }
        if ($record->load(Yii::$app->request->post())) {
            if (Yii::$app->request->isAjax) {
                Yii::$app->response->format = Response::FORMAT_JSON;
//				$record->on($record::EVENT_AFTER_VALIDATE, [$record, 'validateAll']);
                if ($errors = ActiveForm::validate($record)) {
                    $result['errors'] = $errors;
                } else {
//                    $event = $record->isNewRecord ? $record::EVENT_BEFORE_INSERT : $record::EVENT_BEFORE_UPDATE;
//                    $record->on($event, [$record, 'saveTemplate']);
//                    $event_clear = $record->isNewRecord ? $record::EVENT_AFTER_INSERT : $record::EVENT_AFTER_UPDATE;
//                    $record->on($event_clear, [$record, 'saveClear']);
                    $save = $record->save();
                    if ($save) {
                        if (Yii::$app->request->post('commit') == 1) {
                            $result['url'] = Url::to(['category/index']);
                        } else {
                            $result['url'] = Url::to(['items/control', 'id' => $record->id]);
                        }
                        $result['set_value']['id'] = $record->id;
                        $result['message']['success'] = 'Сохранено!';
                    } else {
                        $result['message']['error'] = 'Произошла ошибка!';
                    }
                }
                return $result;
            } else {
                $record->validate();
            }
        }
        if (!Yii::$app->request->isAjax) {
            return $this->goBack();
        }
    }
    public function actionAddItem($id)
    {
        if (Yii::$app->request->isAjax) {
            $item = Items::findOne($id);
            return $this->renderPartial('item_together', ['item' => $item]);
        } else {
            return $this->goBack();
        }
    }
    public function actionExport()
    {
        $columns = [
            'id:text:ID',
            [
                'attribute' => 'article',
                'header' => 'Артикул',
                'format' => 'text',
                'value' => function ($model) {
                    return ($model->article) ? $model->article : '';
                },
            ],
            'c.name:text:Категория',
            'name:text:Название',
            [
                'attribute' => 'price',
                'header' => 'Розничная цена',
                'format' => 'text',
                'value' => function ($model) {
                    return ($model->price) ? $model->price : 0;
                },
            ],
            [
                'attribute' => 'wholesale_price',
                'header' => 'Оптовая цена',
                'format' => 'text',
                'value' => function ($model) {
                    return ($model->wholesale_price) ? $model->wholesale_price : 0;
                },
            ],
            [
                'attribute' => 'purch_price',
                'header' => 'Закупочная цена',
                'format' => 'text',
                'value' => function ($model) {
                    return ($model->purch_price) ? $model->purch_price : 0;
                },
            ],
            [
                'attribute' => 'bonus_manager',
                'header' => 'Бонус менеджера',
                'format' => 'text',
                'value' => function ($model) {
                    return ($model->bonus_manager) ? $model->bonus_manager : 0;
                },
            ],
            [
                'attribute' => 'isVisible',
                'header' => 'Видимость',
                'format' => 'text',
                'value' => function ($model) {
                    /** @var Items $model */
                    return ($model->isVisible) ? 'вкл' : 'выкл';
                },
            ],
        ];
        /**@var $city_all City[] */
        $city_all = City::find()->all();
        foreach ($city_all as $item) {
            $columns[] = [
                'header' => $item->name,
                'format' => 'text',
                'value' => function ($model) use ($item) {
                    return $model->countAll($item->id);
                },
            ];
        }
        // \moonland\phpexcel\Excel::export([
            // 'models' => Items::find()->orderBy(['name' => SORT_ASC])->all(),
            // 'columns' => $columns,
// //            'savePath' => Yii::getAlias('@frontend/tmp'),
// //            'asAttachment' => false
        // ]);
		
		$items = Items::find()->orderBy(['name' => SORT_ASC])->all();
		
		$data = '<table><tr><td>ID</td><td>Артикул</td><td>Название</td><td>Описание</td><td>Оптовая цена</td><td>Розничная цена</td><td>Закупочная цена</td><td>Бонус менеджера</td><td>Видимость</td><td>Категория</td></tr>';
		foreach ($items as $result) {
            // К...
            $data.=
                  '<tr><td>'  . $result->id
                . '</td><td>' . (($result->article) ? $result->article : '')
                . '</td><td>' . $result->name
                . '</td><td>' . StringHelper::clearStringFromHtml($result->body)
                . '</td><td>' . (($result->wholesale_price) ? $result->wholesale_price : 0)
                . '</td><td>' . (($result->price) ? $result->price : 0)
                . '</td><td>' . (($result->purch_price) ? $result->purch_price : 0)
                . '</td><td>' . (($result->bonus_manager) ? $result->bonus_manager : 0)
                . '</td><td>' . (($result->isVisible) ? 'вкл' : 'выкл')
                . '</td><td>' . (isset($result->cat->name) ? $result->cat->name : '')
                . '</td><td>' . (isset($result->one_c_code) ? $result->one_c_code : '')
                . '</td></tr>';
        }
          
        $data.= '</table>';

        $file = 'export_' . date('Y-m_d H:i') . '.xls';
        header("Content-type: application/vnd.ms-excel");
        header("Content-Disposition: attachment; filename=$file");
        exit ("$data");

		
    }
    public function actionImport()
    {
        $model = new Import();
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            $model->file = UploadedFile::getInstance($model, 'file');
            if ($errors = AdminActiveForm::validate($model)) {
                $result['errors'] = $errors;
            } else {
                $save = $model->import();
                if ($save) {
                    $result['url'] = Url::to(['category/index']);
                    $result['message']['success'] = 'Сохранено!';
                } else {
                    $result['message']['error'] = 'Произошла ошибка!';
                }
            }
            return $result;
        } else {
            $this->view->title = 'Импорт';
            $this->breadcrumb[count($this->breadcrumb) - 1] = [
                'url' => ['items/import'],
                'label' => $this->view->title
            ];
            return $this->render('import');
        }
    }
    public function actionYml()
    {
        $model = new YmlForm();
        if (Yii::$app->request->isAjax) {
            $model->load(Yii::$app->request->post());
            Yii::$app->response->format = Response::FORMAT_JSON;
            if ($errors = AdminActiveForm::validate($model)) {
                $result['errors'] = $errors;
            } else {
                if ($model->categories) {
                    Yii::$app->yml->no_cats = $model->categories;
                }
                if (Yii::$app->yml->start()) {
                    $result['message']['success'] = 'Началось создание файла';
                } else {
                    $result['message']['error'] = 'Идёт процесс создания файла';
                }
            }
            return $result;
        } else {
            $this->view->title = 'Yml';
            $this->breadcrumb[count($this->breadcrumb) - 1] = [
                'url' => ['items/yml'],
                'label' => $this->view->title
            ];
            return $this->render('yml');
        }
    }
    public function actionView($id)
    {
        $url=\Yii::$app->urlManagerFrontEnd->createAbsoluteUrl(['site/item', 'id' => $id]);
        return $this->redirect($url,302);
    }
	
}//Class