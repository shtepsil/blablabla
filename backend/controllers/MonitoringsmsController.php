<?php

namespace backend\controllers;

use backend\AdminController;
use common\models\Category;
use common\models\Items;
use common\models\User;
use Yii;
use yii\bootstrap\ActiveForm;
use yii\data\Pagination;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\helpers\Url;
use yii\web\Response;
use yii\web\View;
use shadow\plugins\seo\behaviors\SSeoBehavior;
use common\models\MonitoringSms;
use frontend\components\SmsController;
use common\models\Orders;

/**
 * Class CategoryController
 * @package backend\controllers
 * @property \common\models\Category $model
 */
class MonitoringsmsController extends AdminController
{
    public function init()
    {
        // $this->on(self::EVENT_BEFORE_ACTION, function () {
            // $this->model = new Category();
        // });
        // $this->MenuActive('catalog');
        $this->view->title = 'МониторингВыгрузка';
        $this->breadcrumb[] = [
            'url' => ['monitoringsms/allsms'],
            'label' => $this->view->title
        ];
        // $this->url = [
            // 'back' => ['category/index'],
            // 'control' => ['category/control']
        // ];
        parent::init(); // TODO: Change the autogenerated stub
    }
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
         $result = [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['admin'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'control' => ['post', 'get'],
                    'filter' => ['post', 'get'],
                ],
            ],
        ];
		 if (SSeoBehavior::enableSeoEdit()) {
            $result['seo'] = [
                'class' => SSeoBehavior::className(),
                'nameTranslate' => 'name',
                'controller' => 'site',
                'action' => 'catalog',
                'parentRelation' => 'parent',
                'childrenRelation' => [
                    'categories',
                    'items',
                ],
            ];
        }

        return $result;
    }
	 
	 public function actionControl()
    {
        $this->view->title = 'Категория';
        $this->breadcrumb[] = [
            'url' => ['category/control'],
            'label' => $this->view->title
        ];
        $item = $this->model;
        if ($id = \Yii::$app->request->get('id')) {
            $item = $item->findOne($id);
        }
        $data['item'] = $item;
        if ($data['item']) {
            return $this->render('//control/form', $data);
        } else {
            return false;
        }
    }
		
    public function actionAllsms()
    {
		$date_from = strtotime(Yii::$app->request->get('date_from'));
		$date_to = strtotime(Yii::$app->request->get('date_to'));

		$user_res = MonitoringSms::find()->andWhere(
			[  
				'>=',										
				'created_at',
				$date_from						
			]) 
			->andWhere(
			[  
				'<=',										
				'created_at',
				$date_to						
			]	
		);	
		
		if(\Yii::$app->request->get('export')){
			$all = $user_res->all();
			MonitoringSms::export($all);
			\Yii::$app->end();
		}
				 					
		$countQuery = clone $user_res;		
		$pages = new Pagination(['totalCount' => $countQuery->count(), 'pageSize' => 200]);

		$models = $user_res->offset($pages->offset)
		->limit($pages->limit)
		->all();

		$data['pages'] = $pages;					
						
		$data['user_res'] = $models;	
		
        return $this->render('index', $data);
    }
	
	public function actionSendallsms()
    {
		$id_from = Yii::$app->request->get('id_from');
		$id_to = Yii::$app->request->get('id_to');
		$test_ = Yii::$app->request->get('test');
		$test = false;
		
		if (isset($test_) && $test_ == 1) {
			$test = true;
		}
		
		$limit = ($id_to - $id_from) + 1;    // сколько записей надо выбрать
		$offset = $id_from;
		
		$test = true;      //  запустить тестовый режим, чтобы посмотреть сколько человек
		//$test = false;    //   запустить реальную рассылку

		$last = time() - (30 * 24 * 60 * 60);
		$user_res = User::find()->andWhere(
					[                             
						'`user`.status' => 10,							
					])
				->andWhere(
					[  
						'>',										
						'`user`.bonus',
						0						
					]	
				) 
				//->andWhere(['<', 'date_last_sms', $last])->all();
				->andWhere(['<', 'date_last_sms', $last])->orderBy('id ASC')->limit($limit)->offset($offset)->all();
				$users_ = [];

				/*
				У пользователя должна быть хоть одна успешная покупка Orders::getSucessOrdersUsers
				
				Пользователь в предыдущем месяце не должен совершать успешной покупки и 
				он не получал sms в течении месяца Orders::getCountOrdersThisMounth
				*/
				
				$r = '';
				if ($user_res) {
					foreach ($user_res as $key => $result) {
						if (Orders::getCountOrdersThisMounth($result['id']) == 0 && 
						Orders::getSucessOrdersUsers($result['id']) > \Yii::$app->params['usersaction']['count_success']) 
						{
							$users_[] = $result;

						}
					}
				 }
				
				if ($test == false) {
						// $insert_monitoring_sms = [];
					// foreach ($users_ as $result) {
						// $phone = $result['phone'];
						// $bonus = $result['bonus'];
						// SmsController::send_sms("$phone", "Ваши бонусы: $bonus Т. Акции https://kingfisher.kz/actions/");
				
					// }

					// foreach ($users_ as $result) {
						
						// $time_ = time();						
						// $user_info = User::findOne($result['id']);
						// $user_info-> date_last_sms = $time_;
						// $user_info->count_sms = ($user_info->count_sms + 1);
						// $user_info->save();
						
			  			// $insert_monitoring_sms[] = [$result['id'], $time_];						
					// }	

					// Yii::$app->db->createCommand()->batchInsert('monitoring_sms', ['user_id', 'created_at'],$insert_monitoring_sms)->execute();				
				}
		
		$data['count_users'] = count($users_);	
		  
        return $this->render('index', $data);
    }
	
	public function actionIndex()
    { 
        return $this->render('index');
    }
}
