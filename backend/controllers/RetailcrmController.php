<?php

namespace backend\controllers;

use common\components\Debugger as d;
use backend\AdminController;
use common\components\retailcrm\IcmlHelper;
use common\models\Category;
use common\models\Items;
use Yii;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\helpers\Url;
use yii\web\Response;

/**
 * RetailcrmController
 *
 * @author Natali Maximenko <natali.maximenko@gmail.com>
 */
class RetailcrmController extends AdminController 
{
    public $shopUrl = 'http://www.kingfisher.kz';
    public $icml = 'retailcrm.xml';
    
    public function init()
    {
        $this->MenuActive('retailcrm');
        $this->view->title = 'RetailCRM';
        $this->breadcrumb[] = [
            'url' => ['retailcrm/index'],
            'label' => $this->view->title
        ];
        $this->url = [
            'back' => ['retailcrm/index'],
        ];
        
        parent::init(); // TODO: Change the autogenerated stub
    }
    
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['loginAdminPanel'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'control' => ['post', 'get'],
                ],
            ],
        ];
    }
    
    public function actionIndex()
    {       
        if (Yii::$app->request->isAjax) {
//            d::ajax('actionIndex');
            Yii::$app->response->format = Response::FORMAT_JSON;

            $result = [];
            if(Yii::$app->params['RetailCRM']['enable'] === false){
                $result['message']['error'] = 'Сервис RetailCRM отключен...';
                return $result;
            }

            //generate catalog
            $errors = array();
            $rawCategories = Category::findAll(['isVisible' => 1]);
            $categories = array();
            foreach($rawCategories as $record) {
                $category = array(
                    'id' => $record->id,
                    'name' => $record->name
                );

                if (!empty($record->parent_id)) {
                    $category['parentId'] = $record->parent_id;
                }

                $categories[] = $category;
            }

            $items = Items::find()->all();
            $offers = $this->prepareOffers($items);
            
            if (!empty($errors)) {
                $result['errors'] = $errors;
            } else {
                $icml = new IcmlHelper('KingFisher', $this->icml);
                //save xml
                $save = $icml->generate($categories, $offers);
                if ($save) {
                    $result['url'] = Url::to(['retailcrm/index']);
                    $result['message']['success'] = 'Файл обновлён!';
                } else {
                    $result['message']['error'] = 'Произошла ошибка!';
                }
            }
            return $result;
        } else {
            $icml = new IcmlHelper('KingFisher', $this->icml);
            $lastSync = $icml->getSyncDate();
            return $this->render('index', ['lastSync' => $lastSync]);
        }
    }
    
    private function prepareOffers($data) {
        $offers = array();
        $measureMap = array(
            'kg' => array(
                'code' => 'kg',
                'name' => "Килограмм",
                'sym'=> "кг"
            ),
            'pc' => array(
                'code' => 'pc',
                'name' => 'Штука',
                'sym'=> 'шт.'
            )
        );
        
        foreach ($data as $record) {
            $unitValue = $record->measure_price > 0 ? 'pc' : 'kg';
            $unit = $record->measure > 0 ? 'pc' : 'kg';
            $offer = array(
                'id' => $record->id,
                'productId' => $record->id,
                'name' => $record->name,
                'productName' => $record->name,
                'categoryId' => $record->cid,
                'price' => $record->price,
                'productActivity' => $record->isVisible > 0 ? 'Y': 'N',
                'purchasePrice' => $record->purch_price,
                'quantity' => floatval($record->count),
                'unit' => $measureMap[$unitValue],
                'url' => $this->shopUrl.'/item.html?id='.$record->id
            );
            
            if (!empty($record->img_list)) {
                $offer['picture'] = $this->shopUrl . $record->img_list;
            }
            
            if (!empty($record->article)) {
                $offer['params'][] = array(
                    'name' => 'Артикул',
                    'code' => 'article',
                    'value' => $record->article
                );
            }
            
            if (!empty($record->weight)) {
                $offer['params'][] = array(
                    'name' => 'Вес',
                    'code' => 'weight',
                    'value' => floatval($record->weight)*1000
                );
            }
            
            if ($unit == 'pc' && $unitValue == 'kg') {
                $offers[] = $offer;
                $offer['id'] = '77'.$offer['productId'];
                $offer['unit'] = $measureMap['pc'];
                $offer['name'] = $record->name.'(цена за штуку)'; 
                // цена за килограмм
                $offer['price'] *= floatval($record->weight); 
                $offer['purchasePrice'] *= floatval($record->weight); 
            }
            
            $offers[] = $offer;
        }
        
        return $offers;
    }
}
