<?php

namespace backend\controllers;

use backend\models\filters\OrderFilter;
use common\components\Debugger as d;
use backend\AdminController;
use backend\components\ProcessOrder\Appointment;
use backend\components\ProcessOrder\StateException;
use backend\components\ProcessOrder\Status\OrderStatusFactory;
use backend\models\retailcrm\EditCrmOrder;
use backend\models\SUser;
use common\components\retailcrm\ApiHelper;
use common\models\City;
use common\models\Items;
use common\models\Orders;
use common\models\OrdersHistory;
use common\models\OrdersItems;
use common\models\OrdersPay;
use common\models\OrdersRollbackItems;
use common\models\OrdersRollbackSets;
use common\models\OrdersSets;
use common\models\Pickpoint;
use common\models\Sets;
use common\models\User;
use common\models\UserAddress;
use shadow\helpers\StringHelper;
use shadow\widgets\AdminActiveForm;
use Yii;
use yii\base\Exception;
use yii\data\Pagination;
use yii\db\ActiveQuery;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\helpers\ArrayHelper;
use yii\helpers\Json;
use yii\helpers\Url;
use yii\web\BadRequestHttpException;
use yii\web\Response;
use common\models\ItemImg;

/**
 * Class OrdersController
 *
 * @package backend\controllers
 * @property Orders $model
 */
class OrdersController extends AdminController
{
    public $model;
    public function init()
    {
        $this->model       = new Orders();
        $this->url         = [
            'back'    => ['orders/index'],
            'control' => ['orders/control']
        ];
        $this->view->title = 'Заказы';
        $this->MenuActive('orders');
        $this->breadcrumb[] = [
            'url'   => ['orders/index'],
            'label' => 'Заказы'
        ];
        parent::init(); // TODO: Change the autogenerated stub
    }
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['loginAdminPanel'],
                    ],
                ],
            ],
            'verbs'  => [
                'class'   => VerbFilter::className(),
                'actions' => [
                    'control' => ['post', 'get'],
//                    'filter' => ['post', 'get'],
                ],
            ],
        ];
    }
    public function actionIndex()
    {
        $order = new Orders();
        $managers = ArrayHelper::map(SUser::find()
            ->select(['id', 'username'])
            ->where(['<>', 'role', 'admin'])
            ->orderBy(['username' => SORT_ASC])
            ->all(), 'id', 'username');
        $paymentType = $order->data_payment;

        if (empty($paymentType[0])) {
            unset($paymentType[0]);
        }

        $statuses = $order->data_status;
        $paymentStatuses = $order->data_pay_status;
        $pickpointsList = \common\models\Pickpoint::find()->orderBy(['city_id' => SORT_ASC, 'id' => SORT_ASC])->all();
        $pickpoints = [];

        if (!empty($pickpointsList)) {
            foreach ($pickpointsList as $pickpoint) {
                $pickpoints[$pickpoint->id] = $pickpoint->city.' ~ '.$pickpoint->name;
            }
        }

        $towns = ArrayHelper::map(City::find()->select(['id', 'name'])->all(), 'id', 'name');

        return $this->render('index', [
            'managers' => $managers,
            'paymentType' => $paymentType,
            'statuses' => $statuses,
            'paymentStatuses' => $paymentStatuses,
            'pickpoints' => $pickpoints,
            'towns' => $towns
        ]);
    }
    public function actionFilter()
    {
        /**
         * @var $items Orders[]
         */
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;

            $post = Yii::$app->request->post();
            $get = Yii::$app->request->get();
            $columns = $post['columns'];

            $q_all = new ActiveQuery(Orders::className());
//            $q_all->limit(100);

            if (!Yii::$app->user->can('admin') && !Yii::$app->user->can('manager')) {
                if (Yii::$app->user->can('collector')) {
                    $q_all->andWhere(['`orders`.status' => [1, 2, 3, 4]]);
                } elseif (Yii::$app->user->can('driver')) {
                    $q_all->andWhere(['`orders`.status' => [3, 4]]);
                }
            }

            $full_count = $q_all->count();

            $q = new ActiveQuery(Orders::className());
//            $q->limit(100);

            // устрицы
            if (!empty($post['data'])) {
                $model = new OrderFilter();

                foreach ($post['data'] as $p) {
                    if (property_exists($model, $p['name'])) {
                        $model->{$p['name']} = $p['value'];
                    }
                }

                if (!empty($model->good)) {
                    $q->join('LEFT JOIN', 'orders_items', 'orders_items.order_id = orders.id');
                }

            }

            // ===================================================
            // Фильтры для меню
            if(isset($get['filter_menu']) AND $get['filter_menu'] != 'all'){
                $q->where(['`orders`.status' => $get['filter_menu']]);
            }
            // ===================================================

            if (!Yii::$app->user->can('admin') && !Yii::$app->user->can('manager')) {
                if (Yii::$app->user->can('collector')) {
                    $q->andWhere(['`orders`.status' => [1, 2, 3, 4]]);
                } elseif (Yii::$app->user->can('driver')) {
                    $q->andWhere(['`orders`.status' => [3, 4, 5]]);
                }
            }
			
			$pickpoints = [];
            // Назначенные пунткы самовывоза (для текущего пльзователя)
			$pickpoints = Yii::$app->user->identity->findUserPickpoints(Yii::$app->user->identity->id);

            // Если есть какие то назначенные пункты самовывоза
			if (!empty($pickpoints)) {

                // withOrdersOutPickpoints - видит так же заказы без пункта самовывоза
				if (Yii::$app->user->identity->withOrdersOutPickpoints == 1) {

                    // Получит заказы, у которых пункт самовывоза указан
					$q->andWhere(['`orders`.pickpoint_id' => $pickpoints]);
                    // Получит заказы, у которых пункт самовывоза не указан
                    // т.е. вот эти заказы, без пункта самовывоза.
					$q->orWhere(['`orders`.pickpoint_id' => null]);
				} else {
                    // Получит только те заказы, у которых пункт самовывоза указан.
					$q->andWhere(['`orders`.pickpoint_id' => $pickpoints]);
				}

                // Получит заказы, к которым прикреплён текущий пользователь.
				$q->orWhere(['`orders`.manager_id' => Yii::$app->user->identity->id]);
				
			}

            // withYandexWorkAndAll - Видит Яндекс и остальные заказы
			if (Yii::$app->user->identity->withYandexWorkAndAll == 0) {

                // withYandexWork - видит только Яндекс заказы
				if (Yii::$app->user->identity->withYandexWork == 1) {
					$q->andWhere(['not', ['`orders`.delivery_method' => [0, 1, 3]]]);
				} else {
					if (Yii::$app->user->can('manager') &&
						!Yii::$app->user->can('admin') &&
						!Yii::$app->user->can('collector') &&
						!Yii::$app->user->can('senior_manager') &&
						!Yii::$app->user->can('kassir') &&
						!Yii::$app->user->can('driver')) {
						$q->andWhere(['not', ['`orders`.delivery_method' => 2]]);
					}
				}
			}

            // Если включен чекбокс "Видит только оптовые заказы"
            if(Yii::$app->user->identity->withIsWholesale == 1){
                /*
                 * ... тут можно сделать проверку на ->user->can()
                 */
                // Выбрать все заказы, которые оптовые.
                $q->andWhere(['>', '`orders`.isWholesale', 0]);
                $q->andWhere([
                    'in',
                    'user_id',
                    User::find()
                        ->select('id')
                        ->where(['manager_id' => Yii::$app->user->id])
                ]);
            }

            if ($model->validate()) {
                $fields = get_class_vars($model::className());

                foreach ($fields as $key => $v) {
                    if ($model->{$key} !== '') {
                        switch ($key) {
                            case 'order_create_start':
                                $q->andWhere(['>=', 'orders.created_at', $model->{$key}]);

                                break;
                            case 'order_create_end':
                                $q->andWhere(['<=', 'orders.created_at', $model->{$key}]);

                                break;
                            case 'order_delivery_start':
                                $q->andWhere(['>=', 'orders.date_delivery', $model->{$key}]);

                                break;
                            case 'order_delivery_end':
                                $q->andWhere(['<=', 'orders.date_delivery', $model->{$key}]);

                                break;
                            case 'manager':
                                $q->andWhere([
                                    'or',
                                    ['`orders`.manager_id' => $model->{$key}],
                                    ['`orders`.collector_id' => $model->{$key}],
                                    ['`orders`.driver_id' => $model->{$key}]
                                ]);
                                break;
                            case 'number':
                                $q->andWhere(['like', '`orders`.id', $model->{$key}]);
                                break;
                            case 'status':
                                $q->andWhere(['like', '`orders`.status', $model->{$key}]);
                                break;
                            case 'buyer_name':
                                $q->andWhere(['like', '`orders`.user_name', $model->{$key}]);
                                break;
                            case 'buyer_email':
                                $q->andWhere(['like', '`orders`.user_mail', $model->{$key}]);
                                break;
                            case 'buyer_phone':
                                $q->andWhere(['like', '`orders`.user_phone', $model->{$key}]);
                                break;
                            case 'sum_start':
                                $q->andWhere(['>=', 'orders.full_price', $model->{$key}]);

                                break;
                            case 'sum_end':
                                $q->andWhere(['<=', 'orders.full_price', $model->{$key}]);

                                break;
                            case 'payment_type':
                                $q->andWhere(['orders.payment' => $model->{$key}]);

                                break;
                            case 'payment_status':
                                $q->andWhere(['orders.pay_status' => $model->{$key}]);

                                break;
                            case 'delivery':
                                if ($model->{$key} == 1) {
                                    $q->andWhere(['orders.user_address' => 'Самовывоз']);
                                }
                                elseif ($model->{$key} == 3) {
                                    $q->andWhere(['orders.delivery_method' => 2]);
                                }
                                else {
                                    $q->andWhere(['<>', 'orders.user_address', 'Самовывоз']);
                                    $q->andWhere(['<>', 'orders.delivery_method', 2]);
                                }
                                break;
                            case 'pickpoint':
                                $q->andWhere(['orders.pickpoint_id' => $model->{$key}]);

                                break;
                            case 'town':
                                $q->andWhere(['orders.city_id' => $model->{$key}]);

                                break;
                            case 'good':
                                $q->andWhere(['like', 'orders_items.data', $model->{$key}]);

                                break;
                            default:

                                break;
                        }
                    }
                }

                $q->groupBy(['`orders`.id']);
            }

            if ($orders = $post['order']) {
                $q_order = [];
                foreach ($orders as $order) {
                    $name = $columns[$order['column']]['data'];
                    $q_order['`orders`.' . $name] = ($order['dir'] == 'asc') ? SORT_ASC : SORT_DESC;
                }

                if ($q_order) {
                    $q->orderBy($q_order);
                }
            }

            //echo $q->createCommand()->getRawSql();

            $count  = $q->count();
            $result = [
                'draw'            => (int)$post['draw'],
                'recordTotal'     => (int)$full_count,
                'recordsFiltered' => (int)$count
            ];
            if ($page = $post['start']) {
                $q->offset($page);
            }

            $q->limit($post['length']);

            $items           = $q->all();
            $data_items      = [];

            $default_columns = [
                'full_price',
                'id',
                'user_phone',
                'user_address',
                'payment',
                'pay_status',
                'pay_status_text',
				'bonus_use',
				'price_delivery_full',
				'isApp',
				'age_order'
            ];

            foreach ($items as $item) {
                $data_item = [];

                foreach ($columns as $column) {
                    $data_item[$column['data']] = $item->getRow($column['data']);
                }

                foreach ($default_columns as $val) {
					
					if (($item->created_at + 60) > time()) {
						$data_item['new_order_color'] = '#1d89cf';
					} else {
						$data_item['new_order_color'] = '';
					}

					if ($item->isApp) {
						$data_item['isApp'] = '📱 ';
					} else {
						$data_item['isApp'] = '';
					}
					
					if ($val == 'price_delivery_full') {
						$full_price = str_replace(' ', '', $item->getRow('full_price'));
						
						$data_item[$val] = number_format((int)$item->getRow('price_delivery') + (int)$full_price - $item->getRow('bonus_use'), 0, '', ' ');												
					} else {
						 $data_item[$val] = $item->getRow($val);
					}
                }

                $data_items[] = $data_item;
            }

            $result['data'] = $data_items;

            return $result;
        } else {
            throw new BadRequestHttpException();
        }
    }
    public function actionItems()
    {
        /**
         * @var $items Items[]
         */
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            $result                     = [];
            $search                     = Yii::$app->request->get('search');
            $ids                        = Yii::$app->request->get('ids', []);
            $ids                        = array_diff($ids, ['']);
            $q                          = new ActiveQuery(Items::className());
            $q->where(
                [
                    'and',
                    ['not in', 'id', $ids],
                    [
                        'or',
                        ['like', 'name', $search],
                        ['like', 'id', $search]
                    ]
                ]
            );
            $q->limit(100);
            $items = $q->all();
            foreach ($items as $item) {
				
				if ($item->img_list == '') {
										  
					$itemImg = ItemImg::find()
					->andWhere(['item_id' => $item->id])
					->all();

				if (!empty($itemImg)) {
					$img_ = 'https://' . $_SERVER['HTTP_HOST'] . '/'.$itemImg[0]['url'];
				} else {
					$img_ = '';
				}
																						
				} else {					
					$img_ = 'https://' . $_SERVER['HTTP_HOST'] . '/'. $item->img_list;				
				}

                $result[] = [
                    'id'    => $item->id,
					'img'    => $img_,
                    'value' => $item->article . ' : ' . $item->name
                ];
            }
            return $result;
        } else {
            throw new BadRequestHttpException();
        }
    }
    public function actionAddItem($id)
    {
        /**
         * @var $items Items[]
         */
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            $item                       = Items::findOne($id);

            $item_params = [
                'item' => $item,
                'name' => 'ordersItems',
                'isWholesale' => Yii::$app->request->get('isWholesale')
            ];

            if(Yii::$app->request->get('order_id')) {
                $order = Orders::findOne(['id' => Yii::$app->request->get('order_id')]);
                $user = User::findOne($order->user_id);
                $item_params['user'] = $user;
                $item_params['user_id'] = $order->user_id;
            }

            $result                     = [
                'id'   => $id,
                'item' => $this->renderPartial('item', $item_params)
            ];

            return $result;
        } else {
            throw new BadRequestHttpException();
        }
    }
    public function actionSets()
    {
        /**
         * @var $items Sets[]
         */
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            $result                     = [];
            $search                     = Yii::$app->request->get('search');
            $ids                        = Yii::$app->request->get('ids', []);
            $ids                        = array_diff($ids, ['']);
            $q                          = new ActiveQuery(Sets::className());
            $q->where(
                [
                    'and',
                    ['not in', 'id', $ids],
                    [
                        'or',
                        ['like', 'name', $search],
                        ['like', 'id', $search]
                    ]
                ]
            );
            $q->limit(100);
            $items = $q->all();
            foreach ($items as $item) {
                $result[] = [
                    'id'    => $item->id,
                    'value' => $item->name
                ];
            }
            return $result;
        } else {
            throw new BadRequestHttpException();
        }
    }
    public function actionAddSet($id)
    {
        /**
         * @var $items Sets[]
         */
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            $item                       = Sets::findOne($id);
            $result                     = [
                'id'   => $id,
                'item' => $this->renderPartial('set', ['item' => $item, 'name' => 'ordersSets'])
            ];
            return $result;
        } else {
            throw new BadRequestHttpException();
        }
    }
    public function actionControl()
    {
        $item = $this->model;
        if ($id = \Yii::$app->request->get('id')) {
            $item = $item->findOne($id);
            if ($item) {
                $this->breadcrumb[] = [
                    'url'   => '#',
                    'label' => 'Заказ №' . $item->id
                ];
            }
        } else {
            if ($user_id = Yii::$app->request->get('user_id')) {
                /**@var $user User */
                $user = User::findOne($user_id);
                if ($user) {
                    $item->user_id     = $user->id;
                    $item->user_name   = $user->username;
                    $item->user_mail   = $user->email;
                    $item->user_phone  = $user->phone;
                    $item->isEntity    = $user->isEntity;
                    $item->isWholesale = $user->isWholesale;
                    /**@var $a_address UserAddress */
                    $a_address = UserAddress::find()->andWhere(['user_id' => $user->id])->orderBy(['isMain' => SORT_DESC])->one();
                    if ($a_address) {
                        $item->user_address = 'г.' . $a_address->data_city[$a_address->city] . ', ул. ' . $a_address->street . ', дом. ' . $a_address->home . (($a_address->house) ? (', кв. ' . $a_address->house) : '');
                        $item->city_id      = $a_address->city;
                    }
                    if ($item->isWholesale == 1) {
                        $item->enable_bonus = 0;
                    }
                }
            }
        }

        $data['user'] = User::findOne($item->user_id);
        $data['item'] = $item;
        $data['user_types'] = User::$user_types;

        $pickpoints = Pickpoint::find()->orderBy(['city_id' => SORT_ASC, 'id' => SORT_ASC])->all();
        $data['pickpointsList'] = [];
        $data['pickpoints'] = [];

        if (!empty($pickpoints)) {
            foreach ($pickpoints as $pickpoint) {
                //$data['pickpoints'][$pickpoint->city_id][$pickpoint->id] = $pickpoint->name;
                $data['pickpoints'][$pickpoint->id] = $pickpoint->city.' ~ '.$pickpoint->name;
            }
        }

        if ($data['item']) {
            return $this->render('form', $data);
        } else {
            return false;
        }
    }
    public function actionLock($id)
    {
        $result = [];
        $record = Orders::findOne($id);
//        d::ajax('actionLock');
        if ($record) {

            if ($record->isDeadline) {

                Orders::updateAll(['isDeadline' => 0], ['like', 'id', $record->id]);

                $txt = 'Принят заказ, который недавно был отмечен как не принятый';
                $txt .= "<b> Менеджер ".Yii::$app->user->identity->username."</b>%0A";
                $txt .= "<b> Заказ ".$record->id."</b>%0A";
                $txt .= "<b> Имя ".$record->user_name."</b>%0A";
                $txt .= "%2B" . trim($record->user_phone)."%0A";
                $txt .= "<b> Время ".date('H:i:s', $record->created_at)."</b>%0A";
                //	$txt .= "<b> Метод доставки ".$record->delivery_method."</b>%0A";
                $txt .= "<b>%2B%2B%2B%2B%2B%2B%2B%2B%2B%2B%2B%2B%2B</b>%0A";

                $token = '1713051743:AAElppnerY8-fjf4BpAoIMSJPW55bfLaOkI';

                $chat_id = '-531160281';

                $sendToTelegram = @fopen("https://api.telegram.org/bot{$token}/sendMessage?chat_id={$chat_id}&parse_mode=html&text={$txt}","r");
            }

            $appointment = new Appointment($record);
            try {
                /*
                 * В общем тут, в зависимости от статуса заказа,
                 * для типа обработчиков заказа задаётся ID пользователя админки,
                 * т.е. в заказе есть три типа обработчиков:
                 * manager_id, driver_id, collector_id
                 */
                $record = $appointment->lock(Yii::$app->user->identity);
                // И сохраняем заказ.
//                d::ajax($record);
                $record->save(false);
                $result['status'] = 'success';
            } catch (StateException $e) {
                Yii::$app->response->statusCode = $e->getCode();
                $result['status']               = 'error';
                $result['message']              = $e->getMessage();
            }
        }
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return $result;
        } else {
            return $this->redirect(Url::to(['orders/control', 'id' => $record->id]));
        }
    }
    public function actionUnLock($id)
    {
        $result = [];
        $record = Orders::findOne($id);
        if ($record) {
            $appointment = new Appointment($record);
            try {
                $record = $appointment->unlock(Yii::$app->user->identity);
                $record->save(false);
                $result['status'] = 'success';
            } catch (StateException $e) {
                Yii::$app->response->statusCode = $e->getCode();
                $result['status']               = 'error';
                $result['message']              = $e->getMessage();
            }
        }
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return $result;
        } else {
            return $this->redirect(Url::to(['orders/control', 'id' => $record->id]));
        }
    }
    /**
     * @param $id
     *
     * @return array|Response
     */
    public function actionCheckPayStatus($id){
        $result = [];
        $record = Orders::findOne($id);
        if ($record) {
            try {
                Orders::checkPayStatus($record);
            } catch (\Throwable $e) {
                Yii::$app->response->statusCode = $e->getCode();
                $result['status']               = 'error';
                $result['message']              = $e->getMessage();
            }
        }
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return $result;
        } else {
            return $this->redirect(Url::to(['orders/control', 'id' => $record->id]));
        }
    }
    public function actionNoPhone($id)
    {
        $result = [];
        $record = Orders::findOne($id);
        if ($no_phone = Yii::$app->request->post('no_phone')) {
            if ($no_phone == 1) {
                $record->status        = 9;
                $record->update_status = 9;
                $back                  = true;
            } elseif ($no_phone == 2) {
                $record->update_status = 13;
                if ($record->driver_id) {
                    $record->status = 3;
                } else {
                    $record->status = 0;
                }
            }
        }
    }
    public function actionFail($id)
    {
        $result = [];
        $record = Orders::findOne($id);
        if (Yii::$app->request->post('no')) {
            if ($record->status != 8) {
                $record->rollbackBonus();
            }
            $record->status        = 8;
            $back                  = true;
            $record->update_status = 14;
        }
    }

    public function actionOrderToShaping()
    {
        $post = Yii::$app->request->post();
//        d::ajax($post);
        $record = $this->model;
        $error_message = 'Произошла ошибка на стороне сервера!';
        if ($id = Yii::$app->request->get('id')) {
            if(
                Yii::$app->user->can('admin')
                OR Yii::$app->user->can('senior_manager')
            ){
                $record = $record->findOne($id);
                $changeStatusFactory = new OrderStatusFactory();
                $changeStatus = $changeStatusFactory->createStatus($record, 1);
                try {
                    $record = $changeStatus->setStatusOrderToShaping();
                } catch (StateException $e) {
//                    Yii::$app->response->statusCode = $e->getCode();
                    $result['message']['error'] = $e->getMessage();
                    return $result;
                }
                $save = $record->save();
                if ($save) {
                    $result['message']['success'] = 'Статус заказа изменён на "К сборке"!';
                } else {
                    $result['message']['error'] = $error_message;
                }
            }else{
                $result['message']['error'] = 'У вас нет прав на данное действие!';
            }
        }else{
            $result['message']['error'] = $error_message;
        }
        Yii::$app->response->format = Response::FORMAT_JSON;
        return $result;
    }

    public function actionLoadConsignmentNote($order_id)
    {
        $result = [];
        $record = Orders::findOne($order_id);
        if($record) {
            if($record->invoice_file == NULL){
                $record->saveFileAjax();
                $order = Orders::findOne($order_id);
                $result['message']['success'] = 'Файл загружен!';
                $result['invoice_file'] = $order->invoice_file;
            }else{
                $result['message']['warning'] = 'Файл уже существует.<br>Сначала удалите загруженный файл!';
            }
        }else{
            Yii::$app->response->statusCode = 404;
            $result['message']['error'] = 'Загрузка невозможна!';
        }
        $result['js'] = <<<JS
JS
        ;
        Yii::$app->response->format = Response::FORMAT_JSON;
        return $result;
    }

    /**
     * Операции с файлом накладной
     * @return void
     */
    public function actionInvoice($order_id)
    {
        $post = Yii::$app->request->post();
//        d::ajax($post);
        $result = [];
        $record = Orders::findOne($order_id);

        if($record AND $record->invoice_file){
            $record->deleteFileAjax($record->invoice_file);
            $result['message']['success'] = 'Файл удалён!';
        }else{
            Yii::$app->response->statusCode = 404;
            $result['message']['error'] = 'Операция невозможна!';
        }
        $result['js'] = <<<JS
JS
        ;
        Yii::$app->response->format = Response::FORMAT_JSON;
        return $result;
    }

    /**
     * @throws Exception
     */
    public function actionSave()
    {
        $post = Yii::$app->request->post();
//        d::ajax($post);
        $record = $this->model;
//        d::ajax(get_class($record));
        $user_model = new User();
        $recordClassName = StringHelper::getPartStrByCharacter(get_class($record), '\\');
        // Если сохраняется существующий заказ (к примеру существующий заказ был изменён)
        if ($id = Yii::$app->request->post('id')) {
            $record = $record->findOne($id);
            $user = $user_model::findOne($record->user_id);
        }else{
        // Если создаётся новый заказ
            $user_object = $user_model::find()
                ->where(['status' => User::STATUS_ACTIVE])
                /*
                 * На стороне клиента есть валидация на то,
                 * чтобы номер телефона не был пуст.
                 * По этому упустим проверку номера телефона на пустоту.
                 */
                ->andWhere(['phone' => $post[$recordClassName]['user_phone']]);

            // А поле email может быть пусто, по этому проверим его тут.
            if($post[$recordClassName]['user_mail'] != ''){
                $user_object->orWhere(['email' =>  $post[$recordClassName]['user_mail']]);
            }
            $user = $user_object->one();
//            d::ajax($user);

            // Если пользователь не найден, то зарегистрируем нового пользователя.
            if(!$user){

                // тут регистрация нового пользователя и сохранение его в $user
                // Потому что ниже нужен будет тип $user->isWholesale пользователя

                $user_model->isWholesale = $post[$recordClassName]['isWholesale'];
                $user_model->isEntity = $post[$recordClassName]['isEntity'];
                $user_model->city_id = $post[$recordClassName]['city_id'];
                $user_model->username = $post[$recordClassName]['user_name'];
                $user_model->email = $post[$recordClassName]['user_mail'];
                $user_model->phone = $post[$recordClassName]['user_phone'];
                $user_model->data = NULL;
                $user_model->status = $user_model::STATUS_ACTIVE;
                $user_model->password = \Yii::$app->security->generateRandomString(6);
                $user_model->generateAuthKey();
//                    $user_model->phone = '+7(333)-333-3333';

                if($user_model->save()){
                    $user_id = $user_model->id;
                }else{
                    Yii::$app->response->format = Response::FORMAT_JSON;
                    $result['message']['error'] = 'Произошла ошибка!';
                    return $result;
                }
            }else{
                $user_id = $user->id;
            }

            $record->user_id = $user_id;
        }
//        d::ajax($user_id);
        /*
         * Теперь настройка будет тут ниже, так как $record->user_id - будет задан всегда.
         * т.е. все заказы теперь принадлежат к зарегистрированным пользователям.
         */
        User::$id = $record->user_id;
        if(isset($user->isWholesale)) {
            User::$user_type = $user->isWholesale;
        }

        $is_manager   = $record->manager_id == Yii::$app->user->id;
        $is_collector = $record->collector_id == Yii::$app->user->id;
        $is_driver    = $record->driver_id == Yii::$app->user->id;

//        d::ajax($record->manager_id);

        $is_admin     = Yii::$app->user->can('admin');
        /**@var $user_panel \backend\models\SUser */
        $user_panel = Yii::$app->user->identity;
        if ($is_admin) {
            $record->scenario = 'admin';
        } else {
            if ($is_collector && $record->status < 5) {
                $record->scenario = 'collector';
            }
            if (($is_manager && $record->status == 0) || $record->isNewRecord) {
                $record->scenario = 'manager';
            }
        }
        if (in_array($record->status, [5, 6, 7])) {
            $result['message']['error'] = 'Данный заказ уже закрыт';
            return $result;
        }

        if ($record->load(Yii::$app->request->post())) {
            if (Yii::$app->request->isAjax) {
                Yii::$app->response->format = Response::FORMAT_JSON;

                $ordersItems = Yii::$app->request->post('ordersItems');

                if (!empty($ordersItems)) {
                    foreach ($ordersItems as $result_) {

                        if ($result_['count'] == 0){
                            $result['message']['error'] = 'Кол-во товара не может быть равным 0';
                            return $result;
                        }
                    }
                }

                if ($user_id = Yii::$app->request->post('user_id')) {
                    $record->user_id = $user_id;
                }

//                d::ajax(get_class($record));
                if ($errors = AdminActiveForm::validate($record)) {
                    $result['errors'] = $errors;
                } else {

                    $record->driver_id = isset(Yii::$app->request->post('Orders')['driver_id']) ? Yii::$app->request->post('Orders')['driver_id']: null;

                    $back = false;
                    $changeStatusFactory = new OrderStatusFactory();
                    if ($newStatus = Yii::$app->request->post('change_status')) {
                        $changeStatus = $changeStatusFactory->createStatus($record, $newStatus);
                        try {
                            $resultValidateChange = $changeStatus->validate();
                            if ($resultValidateChange !== true) {
                                return $resultValidateChange;
                            }
                            $record = $changeStatus->open();
                            $back   = true;
                        } catch (StateException $e) {
//                    Yii::$app->response->statusCode = $e->getCode();
                            $result['message']['error'] = $e->getMessage();
                            return $result;
                        }
                    }
                    if ($record->isNewRecord) {
                        if (Yii::$app->user->can('appointment_new')) {
                            $record->manager_id = Yii::$app->user->id;
                            $is_manager         = true;
                            $record->status     = 0;
                        }
                    }
                    if (!$record->manager_id) {
                        $result['message']['error'] = 'Необходимо сначала принять заказ!';
                        return $result;
                    }
                    if (!$is_admin && !$is_manager && !$is_collector && !\Yii::$app->user->can('force_set_status_success')) {
                        $result['message']['error'] = 'Данный заказ уже принят другим пользователем';
                        return $result;
                    }
                    if (in_array($record->status, [0, 1, 2, 3, 4])) {
                        if ($is_admin || $is_collector || $is_manager || \Yii::$app->user->can('force_set_status_success')) {
                            $record->UpdateOrderItems();
                        } else {
                            $result['message']['error'] = 'Данный заказ принят другим пользователем';
                            return $result;
                        }
                    }
                    if (Yii::$app->request->post('commit')) {
                        $back = true;
                    }
                    $save = $record->save();
                    if ($save) {
                        if (\Yii::$app->params['RetailCRM']['enable'] === true) {
                            // update order in retailCRM
                            $crmOrder = new EditCrmOrder();
                            $crmOrder->prepare($record);
                            $crmApiHelper = new ApiHelper();
                            $crmApiHelper->updateOrder($crmOrder->attributes);
                        }
                        if ($is_collector || $is_manager) {
                            $record->saveOrderItems();
                        }
                        if ($back) {
                            $result['url'] = Url::to($this->url['back']);
                        } else {
                            $url           = $this->url['control'];
                            $url['id']     = $record->id;
                            $result['url'] = Url::to($url);
                        }
                        if (Yii::$app->request->post('send_message')) {
                            unset($result['url']);
                            $url_send_message = Json::encode(Url::to(['orders/send-message', 'id' => $record->id]));
                            $render_message   = $this->renderPartial('@common/mail/order', ['order' => $record]);
                            $html_message     = Json::encode('<form><textarea class="form-control" id="send_message_order" name="message" >' . $render_message . '</textarea></form>');
                            $result['js']     = <<<JS
var form = $({$html_message});

var box_message = bootbox.confirm(form, function (result) {
    if (result) {
        if (CKEDITOR && CKEDITOR.instances['send_message_order']) {
            CKEDITOR.instances['send_message_order'].updateElement();
        }
        var body_message = form.find('textarea').val();
        $.ajax({
            url: {$url_send_message},
            type: 'POST',
            data: $(form).serialize(),
            dataType: 'JSON',
            success: function (data) {
                $.growl.notice({title: 'Оповещение', message: data.success});
            },
            error: function () {
                $.growl.error({title: 'Ошибка', message: "Произошла ошибка на стороне сервера!", duration: 5000});
            }
        })
    }
});
box_message.on("shown.bs.modal", function () {
    CKEDITOR.replace('send_message_order', {
        //enterMode: 2,
        toolbar: 'Basic'
    });
});

JS;
                        } else {
                            if ($record->status < 5 && $record->payment == 2 && ($add_sum = $record->addSumPay())>0) {
                                $redirect_url = '';
                                if (isset($result['url'])) {
                                    $redirect_url = $result['url'];
                                    unset($result['url']);
                                }
                                $add_url_pay  = Json::encode(Url::to(['orders/send-pay', 'id' => $record->id]));
                                $result['js'] = <<<JS
    bootbox.confirm({
        message: 'Необходима оплата в размере: <br/> {$add_sum} тенге',
        buttons: {
            confirm: {
                label: 'Запросить оплату',
                className: 'btn-success'
            },
            cancel: {
                label: 'Закрыть',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result) {
                $.ajax({
                    url: {$add_url_pay},
                    type: 'GET',
                    dataType: 'JSON',
                    success: function (data) {
                        if (typeof data.error != 'undefined') {
                            $.growl.error({title: 'Ошибка', message: data.error, duration: 5000});
                        }
                        if (typeof data.success != 'undefined') {
                            $.growl.notice({title: 'Успех', message: message.success});
                            if (typeof data.url != 'undefined'){
                                bootbox.confirm({
                                    message: 'Запрос отправлен в систему, для ручной отправки скопируйте эту ссылку:<br/> '+data.url,
                                    buttons: {
                                        confirm: {
                                            label: 'Ок'
                                        }
                                    },
                                    callback:function(result) {
                                        if ('{$redirect_url}'){
                                           window.location='{$redirect_url}';
                                        }
                                    }
                                })
                            }
                            // window.location.reload();
                        }
                    },
                    error: function () {
                        $.growl.error({title: 'Ошибка', message: 'Произошла ошибка на стороне сервера!', duration: 5000});
                    }
                })

            }
        },
        className: "bootbox-sm"
    });
JS;
                            } else {
                                $result['message']['success'] = 'Сохранено!';
                            }
                        }
                        $result['set_value']['id']    = $record->id;
                        $result['message']['success'] = 'Сохранено!';
                    } else {
                        $result['message']['error'] = 'Произошла ошибка!';
                    }
                }
                return $result;
            } else {
                $record->validate();
            }
        }
        if (!Yii::$app->request->isAjax) {
            return $this->goBack();
        }
    }
    public function actionRollbackItems($id)
    {
        /**
         * @var $item        Orders
         * @var $user        SUser
         * @var $target_item OrdersItems
         */
        $item = Orders::findOne($id);
        $user = Yii::$app->user->identity;
        if ($item && $item->status <= 4 && ($item->driver_id == $user->id || $item->manager_id == $user->id)) {
            if (Yii::$app->request->isAjax) {
                Yii::$app->response->format = Response::FORMAT_JSON;
                $main                       = new OrdersRollbackItems();
                $order_items                = $item->getOrdersItems()->indexBy('item_id')->all();
                $order_sets                 = $item->getOrdersSets()->indexBy('set_id')->all();
                $main->load(Yii::$app->request->post());
                $data_insert_items = $data_insert_sets = [];
                $rollback_items    = Yii::$app->request->post('ordersItems', []);
                $rollback_sets     = Yii::$app->request->post('ordersSets', []);
                if ($rollback_items) {
                    $i = 0;
                    foreach ($rollback_items as $key => &$val) {
                        $target_item = $order_items[$key];
                        $weight      = (isset($val['weight']) ? doubleval($val['weight']) : 0);
                        $count       = doubleval($val['count']);
                        $add_db      = true;
                        if ($count > $target_item->count) {
                            $error                      = 'Количество товара не может быть больше чем в заказе<br>';
                            $error                      .= 'Товар:' . $target_item->item->name;
                            $error                      .= '<br>Количество в заказе:' . $target_item->count;
                            $result['message']['error'] = $error;
                            return $result;
                        }
                        if ($weight > $target_item->weight) {
                            $error                      = 'Вес товара не может быть больше чем в заказе<br>';
                            $error                      .= 'Товар:' . $target_item->item->name;
                            $error                      .= '<br>Вес в заказе:' . $target_item->weight;
                            $result['message']['error'] = $error;
                            return $result;
                        }
                        if ($main->type == 0) {
                            $count         = $target_item->count;
                            $weight        = $target_item->weight;
                            $val['weight'] = 0;
                            $val['count']  = 0;
                        } else {
                            if ($count < $target_item->count || $weight < $target_item->weight) {
                                $count         = $target_item->count - $count;
                                $weight        = $target_item->weight - $weight;
                                $val['weight'] = $target_item->weight - $weight;
                                $val['count']  = $target_item->count - $count;
                            } else {
                                $add_db = false;
                            }
                        }
                        if ($add_db) {
                            $data_insert_items[$i] = [
                                'order_id'      => $item->id,
                                'item_order_id' => $target_item->id,
                                'count'         => $count,
                                'weight'        => $weight,
                            ];
                        }
                        $i++;
                    }
                }
                if ($rollback_sets) {
                    $i = 0;
                    foreach ($rollback_sets as $key => &$val) {
                        $target_item = $order_sets[$key];
                        $count       = doubleval($val['count']);
                        $add_db      = true;
                        if ($count > $target_item->count) {
                            $error                      = 'Количество сета не может быть больше чем в заказе';
                            $error                      .= '<br>Сет:' . $target_item->item->name;
                            $error                      .= '<br>Количество в заказе:' . $target_item->count;
                            $result['message']['error'] = $error;
                            return $result;
                        }
                        if ($main->type == 0) {
                            $count        = $target_item->count;
                            $val['count'] = 0;
                        } else {
                            if ($count < $target_item->count) {
                                $count        = $target_item->count - $count;
                                $val['count'] = $target_item->count - $count;
                            } else {
                                $add_db = false;
                            }
                        }
                        if ($add_db) {
                            $data_insert_sets[$i] = [
                                'order_id'     => $item->id,
                                'set_order_id' => $target_item->id,
                                'count'        => $count,
                            ];
                        }
                        $i++;
                    }
                }
                $item->UpdateOrderItems($rollback_items, $rollback_sets, true);
                if ($main->type == 0) {
                    //полный возврат
                    $item->status = 6;
                    $item->rollbackBonus();
                    $item->update_status = 8;
                } else {
                    //частичный возврат
                    $item->status = 7;
                    $item->commitBonus();
                    $item->update_status = 7;
                }
                if ($item->save(false)) {
                    if ($data_insert_items) {
                        Yii::$app->db->createCommand()->batchInsert(OrdersRollbackItems::tableName(), [
                            'order_id',
                            'item_order_id',
                            'count',
                            'weight',
                        ], $data_insert_items)->execute();
                    }
                    if ($data_insert_sets) {
                        Yii::$app->db->createCommand()->batchInsert(OrdersRollbackSets::tableName(), [
                            'order_id',
                            'set_order_id',
                            'count',
                        ], $data_insert_sets)->execute();
                    }
                    $result['url'] = Url::to($this->url['back']);
                } else {
                    $result['message']['error'] = 'Произошла ошибка!';
                }
                return $result;
            } else {
                $this->view->title = 'Возврат';
                return $this->render('rollback_items', ['order' => $item]);
            }
        } else {
            throw new BadRequestHttpException();
        }
    }
    public function actionChangeItem()
    {
        $post = Yii::$app->request->post();
//        d::ajax($post);
        /**
         * @var $order_item  OrdersItems
         * @var $target_item Items
         */
        $user = null;
        if ($id = Yii::$app->request->post('id')) {
            $order = Orders::findOne(['id' => $id]);
            $user = User::findOne($order->user_id);
            User::$id = $order->user_id;
            if(isset($user->isWholesale)){
                User::$user_type = $user->isWholesale;
            }
        } else {
            $order = new Orders();
        }
        $order->isWholesale    = Yii::$app->request->post('isWholesale');
        $order->discount       = Yii::$app->request->post('discount');
        $order->price_delivery = Yii::$app->request->post('delivery');
        $sum                   = $full_bonus_manager = $full_purch_price = 0;
        $result_items          = $result_sets = [];
        $d = [];
        if ($items = Yii::$app->request->post('ordersItems')) {
            $db_items = Items::find()->indexBy('id')->where(['id' => array_keys($items)])->all();
            /**
             * @var $functions \frontend\components\FunctionComponent
             */
            $functions      = Yii::$app->function_system;
            $sessions_items = $order->to_session_items($items);
            $old_items      = [];
            if (!$order->isNewRecord) {
                $old_items = $order->getOrdersItems()->indexBy('item_id')->all();
                $db_items  = $order->convert_all_to_model($old_items, $db_items);
            }
            if (!trim($order->discount)) {
                if ($order->isWholesale == 0) {
                    $discount = $functions->discount_sale_items($db_items, $sessions_items);
                } else {
                    $discount = [];
                }
            } else {
                $discount = [];
            }

            foreach ($items as $key => $value) {
                $count      = doubleval($value['count']);
                $weight     = doubleval((isset($value['weight']) ? $value['weight'] : 0));
                $order_item = false;
                if (isset($old_items[$key])) {
                    // Сюда попадают товары, которые уже есть в заказе
                    $order_item  = $old_items[$key];
                    $target_item = $db_items[$order_item->item_id];
                } else {
                    // Здесь товары, которые добавляются в заказ
                    $target_item = $db_items[$key];
                }

                if (isset($value['price'])) {
                    if ($target_item->discount) {
                        /*
                         * Кароче я так и не понял, зачем тут скидка обнуляется.
                         * Пока убрал, чтобы всё корректно работало.
                         * Просто не стал разбираться с этим пока что. Зачем тут 0 на скидку делается.
                         */
//                        $target_item->discount = 0;
                    }
                    $target_item->price = (int)$value['price'];
                } else {
                    if ($target_item->discount) {
                        /*
                         * Кароче я так и не понял, зачем тут скидка обнуляется.
                         * Пока убрал, чтобы всё корректно работало.
                         * Просто не стал разбираться с этим пока что. Зачем тут 0 на скидку делается.
                         */
//                        $target_item->discount = 0;
                    }
                    if ($order_item) {
                        $target_item->price = $order_item->price;
                    }
                }

                $item_price         = $target_item->sum_price($count, 'main', 0, $weight);
                $full_item_price    = $functions->full_item_price($discount, $target_item, $count, $weight);
                $full_bonus_manager += $target_item->full_price_bonus_manager($count, $weight, $discount);
                $discount_price     = '';
                if (isset($discount)) {
                    $discount_price = ($item_price - $full_item_price);
                    $item_price     = $item_price - $discount_price;
                }
                $result_items[$target_item->id] = [
                    'price'    => $item_price,
                    'discount' => $discount_price
                ];

                /*
                 * В админке, в заказе:
                 * Изначально была задумка на то, чтобы в поле "Цена за ед." показывалась цена без скидки,
                 * потом в поле "Скидка" показывалась скидка, которая применена к товару.
                 * Но пока решил отказаться от этой затеи, и не стал удалять этот функционал.
                 * Если вдруг пригодится.
                 */
//                if($user AND isset($user->personal_discount[$target_item->id])){
//                    $user_opt_personal_discount = $user->personal_discount[$target_item->id];
//                    if(!preg_match('/%$/', $user->personal_discount[$target_item->id])){
//                        $user_opt_personal_discount = $user->personal_discount[$target_item->id] . 'Тг';
//                    }
//                    $result_items[$target_item->id]['discount'] = $user_opt_personal_discount;
//                }
                $sum += $item_price;
            }
        }

//        if(count($d)) d::ajax($d);
//        d::ajax('stop');

        /**
         * @var $db_sets  Sets[]
         * @var $old_sets OrdersSets[]
         */
        if ($sets = Yii::$app->request->post('ordersSets')) {
            $old_sets = [];
            if (!$order->isNewRecord) {
                $old_sets = $order->getOrdersSets()->indexBy('set_id')->all();
            }
            $db_sets = Sets::find()->indexBy('id')->where(['id' => array_keys($sets)])->all();
            foreach ($sets as $key => $value) {
                $count = doubleval($value['count']);
                if (isset($old_sets[$key])) {
                    $order_set = $old_sets[$key];
                    if (isset($value['price'])) {
                        $order_set->price = (int)$value['price'];
                    }
                    $target_set = $db_sets[$order_set->set_id];
                    $set_price  = round($count * $order_set->price);
                    unset($old_sets[$key]);
                } else {
                    $target_set = $db_sets[$key];
                    if (isset($value['price'])) {
                        $target_set->price = (int)$value['price'];
                    }
                    $set_price = round($count * $target_set->real_price());
                }
                $sum                          += $set_price;
                $bonus                        = $target_set->price_bonus_manager();
                $full_bonus_manager           += round($count * $bonus);
                $result_sets[$target_set->id] = [
                    'price' => $set_price
                ];
            }
        }
        $order->bonus_manager       = $full_bonus_manager - $order->discount($full_bonus_manager);
        $result                     = [
            'items'              => $result_items,
            'sets'               => $result_sets,
            'sum'                => $sum,
            'full_price'         => ((($sum + (int)$order->price_delivery) - $order->discount($sum)) - $order->bonus_use),
            'full_bonus_manager' => $order->bonus_manager
        ];
        Yii::$app->response->format = Response::FORMAT_JSON;
        return $result;
    }
    public function actionSendMessage()
    {
        if (Yii::$app->request->isAjax && ($id = Yii::$app->request->get('id'))) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            /**
             * @var $order Orders
             */
            $order             = Orders::findOne($id);
            $result            = [];
            $result['success'] = 'Письмо отправлено!';
            if ($order && ($message = Yii::$app->request->post('message')) && $order->user_mail) {
                \Yii::$app->mailer->compose()
                    ->setHtmlBody($message)
                    ->setFrom([\Yii::$app->params['supportEmail'] => 'Интернет-магазин ' . \Yii::$app->params['siteName'] . '.kz'])
                    ->setTo($order->user_mail)
                    ->setSubject('Оповещение с сайте ' . \Yii::$app->params['siteName'] . '.kz')->send();
            } elseif (!$order->user_mail) {
                $result['success'] = 'E-Mail не указан!';
            }
            return $result;
        } else {
            throw new BadRequestHttpException();
        }
    }

    public function actionPrintInvoicePayment()
    {
        if ($id = Yii::$app->request->get('id') AND !Yii::$app->user->isGuest) {
            $order_model = Orders::findOne(intval($id));
            if ($order_model) {
                $user = User::findOne($order_model->user_id);
                User::$user_type = $user->isWholesale;
                User::$id = $user->id;
                $db_items = Items::find()->where(['id' => array_keys($order_model->ordersItems)])->indexBy('id')->all();

                // =========================================================================

                $functions = Yii::$app->function_system;
                $order_items = $items = [];
                $user_discount
                    = $sum_user_discount
                    = $sum_with_discount
                    = $discount_price_items
                    = $sum_without_discount
                    = $count_order_items
                    = 0;

//                d::pex($order_model->ordersItems);

                if(count($order_model->ordersItems)){
                    $items = $order_model->convert_all_to_model($order_model->ordersItems, $db_items);
                    foreach($order_model->ordersItems as $order_item){
                        $order_data_item = $order_item->data_object;
                        $discount_price_item = 0;
                        /*
                         * Если товар имеет персональную скидку
                         * (либо персональную оптовую либо персональную обычную)
                         * потому что персональная оптовая тоже записывается в ->discount.
                         * А если персональная оптовая - не процентная скидка, а просто сумма,
                         * то ->discount будет 0, но ->old_price будет не NULL, но будет ценой до вычета скидки.
                         */
                        if($order_data_item->discount AND $order_data_item->old_price){
                            // Цена без скидки умноженная на количество
                            $price_full_count = $functions->sum_price_count($order_data_item->old_price, $order_item->count);
                            // Сумма скидки товара с персональной скидкой
                            $discount_price_item += $functions->discount($price_full_count, $order_data_item->discount);
                            // Суммируем суммы со скидками в одну сумму. (цена без скидки МИНУС сумма скидки)
                            $sum_with_discount += ($price_full_count - $discount_price_item);
                            $item_full_sum = ($price_full_count - $discount_price_item);
                            // Суммируем скидки в одну сумму
                            $discount_price_items += $discount_price_item;
                        }else{
                            // Цена без скидки умноженная на количество

                            $sum_without_discount += $items[$order_data_item->id]->sum_price(
                                $order_item->count, 'main', 0, $order_item->weight
                            );
                            $item_full_sum = $items[$order_data_item->id]->sum_price(
                                $order_item->count, 'main', 0, $order_item->weight
                            );
                        }

                        $count_order_items++;
                        $order_items[$order_item->id] = [
                            'order_item' => $order_item,
                            'item' => $items[$order_data_item->id],
                            'item_full_price' => $item_full_sum,
                            'count_order_items' => $count_order_items
                        ];

                    }//foreach

                    // Расчёт скидки пользователя
                    $sum_user_discount = $sum_without_discount;
                    $user_discount += $order_model->discount($sum_without_discount);
                    if ($user_discount > 0) {
                        $sum_user_discount -= $user_discount;
                    }
                }
                $order_full_price =
                    ($sum_user_discount + $sum_with_discount + $order_model->price_delivery)
                    - $order_model->bonus_use;

                // =========================================================================

                // По умолчанию будут реквизиты пользователя
                $user_requisites = $user;
                // Если пользователь имеет реквизиты родителя
                if(!is_null($user->parent_data)){
                    $user_requisites = $user->parent_data;
                }

                $requisites = [];
                $attrs_requisites = EditRequisites::getAttrs();

                foreach($attrs_requisites as $k_requisite => $requisite){
                    /*
                     * Причина, по которой закомментил описана тут
                     * frontend/controllers/UserController.php -> actionPrintInvoicePayment()
                     */
//                    if(!isset($user_requisites->$k_requisite)) continue;
                    $requisites[$k_requisite] = [
                        'name' => $requisite,
                        'value' => $user_requisites->$k_requisite
                    ];
                }

                $this->layout = 'empty';
                return $this->render('print/print-invoice-payment', [
                    'order' => $order_model,
                    'order_items' => $order_items,
                    'order_full_sum' => $order_full_price,
                    'requisites' => $requisites
                ]);
            } else {
                throw new BadRequestHttpException();
            }
        } else {
            throw new BadRequestHttpException();
        }
    }

    public function actionPrint($id)
    {
        $data         = [
            'order' => Orders::findOne($id)
        ];
        $this->layout = 'empty';
        return $this->render('print', $data);
    }
    public function actionExport($date_start, $date_end)
    {  
        $q = new ActiveQuery(Orders::className());
        if ($date_start) { 
            $date = \DateTime::createFromFormat('d.m.Y H:i:s', $date_start . ' 00:00:00', new \DateTimeZone(Yii::$app->timeZone));
            $q->andWhere(['>=', '`created_at`', $date->getTimestamp()]);
        }
        if ($date_end) {
            $date = \DateTime::createFromFormat('d.m.Y H:i:s', $date_end . ' 00:00:00', new \DateTimeZone(Yii::$app->timeZone));
            $q->andWhere(['<=', '`created_at`', $date->getTimestamp()]);
        }
	 
        $city_all = City::find()->indexBy('id')->all();
        /**
         * @var $users_all SUser[]
         */
        $users_all = SUser::find()->indexBy('id')->all();
        /** @var Orders[] $orders */
        $orders      = $q->orderBy(['created_at' => SORT_DESC])->all();		
		
		$data = "<table border='1'><tr>
		<td>id</td>
		<td>Дата заказа</td>
		<td>Дата доставки</td>
		<td>Тип клиента</td>
		<td>Пользователь</td>
		<td>Телефон</td>
		<td>Город</td>
		<td>Адрес</td>
		<td>Способ оплаты</td>
		<td>Статус онлайн платежа</td>
		<td>Комментарий клиента</td>
		<td><table><tr>
		<td>Артикул</td>
		<td>Название</td>
		<td>Производство</td>
		<td>Единицы изм</td>
		<td>Кол-во</td>
		<td>Вес</td>
		<td>Цена</td>
		<td>Скидка</td>
		<td>Бонус менеджера</td>
		<td>Сумма</td>
		</tr></table></td>
		<td>Скидка на заказ</td>
		<td>Итого</td>
		<td>Использовано бонусов</td>
		<td>Комментарий менеджера</td>
		<td>Статус</td>
		<td>Менеджер</td>
		</tr>";

        foreach ($orders as $order) {
            $data.= '<tr><td>' .$order->id. '</td><td>' .
                $order->getRow('created_at'). '</td><td>' .
                $order->getRow('date_delivery'). '</td><td>' .
                (($order->isEntity) ? 'юрлицо' : 'частное лицо'). '</td><td>' .
                (($order->user_name) ? $order->user_name : ''). '</td><td>' .
                (($order->user_phone) ? $order->user_phone : ''). '</td><td>' .
                ((isset($city_all[$order->city_id]) ? $city_all[$order->city_id]->name : 'Не выбран')). '</td><td>' .
                (($order->user_address) ? $order->user_address : ''). '</td><td>' .
                $order->getRow('payment_text'). '</td><td>' .
                $order->getRow('pay_status_text'). '</td><td>' .
                (($order->user_comments) ? $order->user_comments : ''). '</td>';

            $order_items = OrdersItems::find()->with('item')->where(['order_id' => $order->id])->all();

            $functions = Yii::$app->function_system;
            $db_items  = $sessions_items = [];
            foreach ($order_items as $key => &$value) {
                $value->populateRelation('item', $order->convert_to_model($value, $value->item));
                $db_items[$value->item->id]       = $value->item;
                $sessions_items[$value->item->id] = $value->count;
            }
            if (!trim($order->discount)) {
                if ($order->isWholesale == 0) {
                    $discounts = $functions->discount_sale_items($db_items, $sessions_items);
                } else {
                    $discounts = [];
                }
            } else {
                $discounts = [];
            }

            if ($order_items) {
                $data.= '<td><table>';
                foreach ($order_items as $order_item) {

                    $count                 = (double)$order_item->count;
                    $price                 = $order_item->price;
                    $weight                = (double)$order_item->weight;

                    $data.= '<tr><td>' .$order_item->item->article. '</td>';
                    $data.= '<td>' .$order_item->item->name. '</td>';


                    $ordersItemsHandings = $order_item->ordersItemsHandings;
                    $result_handings     = '';
                    foreach ($ordersItemsHandings as $key => $ordersItemsHanding) {
                        if ($key > 0) {
                            $result_handings .= ', ';
                        }
                        $result_handings .= $ordersItemsHanding->typeHandling->name;
                    }
                    $data.= '<td>' .$result_handings. '</td>';
                    $data.= '<td>' .(($order_item->item->measure_price == 0) ? 'кг' : 'шт'). '</td>';

                    $data.= '<td>' .$count. '</td>';
                    $data.= '<td>' .(($order_item->item->measure_price != $order_item->item->measure) ? $weight : ''). '</td>';

                    $data.= '<td>' .$price. '</td>';

                    $item_sum_price = $order_item->item->sum_price($count, 'main', $price, $weight);
                    $discount       = 0;
                    if (isset($discounts) && $discounts) {
                        $item_price_discount = $functions->full_item_price($discounts, $order_item->item, $count, $weight);
                        $discount            = ($item_sum_price - $item_price_discount);
                        $item_sum_price      = $item_sum_price - $discount;
                    }

                    $data.= '<td>' .$discount. '</td>';
                    $data.= '<td>' .($order_item->item->full_price_bonus_manager($count, $weight, $discounts)). '</td>';
                    $data.= '<td>' .$item_sum_price. '</td></tr>';

                }
                $data.= '</table></td>';
            } else {
                $data.= '<td><table><tr><td></td>';
                $data.= '<td></td>';
                $data.= '<td></td>';
                $data.= '<td></td>';
                $data.= '<td></td>';
                $data.= '<td></td>';
                $data.= '<td></td>';
                $data.= '<td></td>';
                $data.= '<td></td>';
                $data.= '<td></td></tr></table></td>';
            }

            $data.= '<td>' .$order->discount. '</td>';
            $data.= '<td>' .(($order->full_price - $order->discount($order->full_price))). '</td>';

            $payment_state = '';
            $payment_method = '';
            // Способы оплаты
            switch($order->payment){
                case 1:
                    $payment_method = 'Наличные';
                    break;
                case 2:
                    $payment_method = 'Онлайн оплата банковской картой';
                    if($order->pay_status){
                        $payment_state = $order->data_pay_status[$order->pay_status];
                    }
                    break;
                case 3:
                    $payment_method = 'Банковской картой при получении';
                    break;
            }

            $data.= '<td>' .$payment_method. '</td>';
            $data.= '<td>' .$payment_state. '</td>';

            $data.= '<td>' .$order->bonus_use. '</td>';
            $data.= '<td>' .(($order->admin_comments) ? $order->admin_comments : ''). '</td>';
            $data.= '<td>' .$order->getRow('status'). '</td>';
            $data.= '<td>' .((isset($users_all[$order->manager_id]) ? $users_all[$order->manager_id]->username : 'Нет')). '</td>';
            $data.='</tr>';
        }

        $data.= '</table>';

        $file = '1.xls';
        header("Content-type: application/vnd.ms-excel");
        header("Content-Disposition: attachment; filename=$file");
        echo "$data";
        exit();

        /*

        $excel       = new \moonland\phpexcel\Excel();
        $sheet       = new \PHPExcel();
        $activeSheet = $sheet->getActiveSheet();
        $row         = 1;
        $max_row     = 1;
        $colnum      = 0;
        $activeSheet->setCellValueByColumnAndRow($colnum, $row, 'id');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Дата заказа');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Дата доставки');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Тип клиента');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Пользователь');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Телефон');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Город');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Адрес');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Оплата');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Комментарий клиента');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Артикул');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Название');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Производство');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Единицы изм');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Кол-во');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Вес');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Цена');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Скидка');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Бонус менеджера');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Сумма');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Скидка на заказ');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Итого');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Использовано бонусов');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Комментарий менеджера');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Статус');
        $activeSheet->setCellValueByColumnAndRow(++$colnum, $row, 'Менеджер');
        $row++;
        $max_row++;
        $col_num = 0;
        foreach ($orders as $order) {
            if ($row < $max_row) {
                $row = $max_row;
            }
            $col_num = 0;
            $activeSheet->setCellValueByColumnAndRow($col_num, $row, $order->id);
            $activeSheet->setCellValueByColumnAndRow(++$col_num, $row, $order->getRow('created_at'));
            $activeSheet->setCellValueByColumnAndRow(++$col_num, $row, $order->getRow('date_delivery'));
            $activeSheet->setCellValueByColumnAndRow(++$col_num, $row, ($order->isEntity) ? 'юрлицо' : 'частное лицо');
            $activeSheet->setCellValueByColumnAndRow(++$col_num, $row, ($order->user_name) ? $order->user_name : '');
            $activeSheet->setCellValueByColumnAndRow(++$col_num, $row, ($order->user_phone) ? $order->user_phone : '');
            $activeSheet->setCellValueByColumnAndRow(++$col_num, $row, (isset($city_all[$order->city_id]) ? $city_all[$order->city_id]->name : 'Не выбран'));
            $activeSheet->setCellValueByColumnAndRow(++$col_num, $row, ($order->user_address) ? $order->user_address : '');
            $activeSheet->setCellValueByColumnAndRow(++$col_num, $row, $order->getRow('payment_text'));
            $activeSheet->setCellValueByColumnAndRow(++$col_num, $row, ($order->user_comments) ? $order->user_comments : '');
            //region Items information
            $order_items = OrdersItems::find()->with('item')->where(['order_id' => $order->id])->all();
            $order_sets  = OrdersSets::find()->with('set')->where(['order_id' => $order->id])->all();

            $functions = Yii::$app->function_system;
            $db_items  = $sessions_items = [];
            foreach ($order_items as $key => &$value) {
                $value->populateRelation('item', $order->convert_to_model($value, $value->item));
                $db_items[$value->item->id]       = $value->item;
                $sessions_items[$value->item->id] = $value->count;
            }
            if (!trim($order->discount)) {
                if ($order->isWholesale == 0) {
                    $discounts = $functions->discount_sale_items($db_items, $sessions_items);
                } else {
                    $discounts = [];
                }
            } else {
                $discounts = [];
            }
            $start_multiple_row    = $row;
            $start_multiple_column = $col_num;
            if ($order_items) {
                foreach ($order_items as $order_item) {
                    $start_multiple_column = $col_num;
                    $count                 = (double)$order_item->count;
                    $price                 = $order_item->price;
                    $weight                = (double)$order_item->weight;
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, $order_item->item->article);//Артикул
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, $order_item->item->name);//Название
                    $ordersItemsHandings = $order_item->ordersItemsHandings;
                    $result_handings     = '';
                    foreach ($ordersItemsHandings as $key => $ordersItemsHanding) {
                        if ($key > 0) {
                            $result_handings .= ', ';
                        }
                        $result_handings .= $ordersItemsHanding->typeHandling->name;
                    }
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, $result_handings);//Производство
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, ($order_item->item->measure_price == 0) ? 'кг' : 'шт');//Единицы изм
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, $count);//Кол-во
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, ($order_item->item->measure_price != $order_item->item->measure) ? $weight : '');//Вес
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, $price);//Цена
                    $item_sum_price = $order_item->item->sum_price($count, 'main', $price, $weight);
                    $discount       = 0;
                    if (isset($discounts) && $discounts) {
                        $item_price_discount = $functions->full_item_price($discounts, $order_item->item, $count, $weight);
                        $discount            = ($item_sum_price - $item_price_discount);
                        $item_sum_price      = $item_sum_price - $discount;
                    }
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, $discount);//Скидка
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, $order_item->item->full_price_bonus_manager($count, $weight, $discounts));//Бонус менеджера
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, $item_sum_price);//Сумма
                    $start_multiple_row++;
                }
            }
            if ($order_sets) {
                $start_multiple_row = $row;
                foreach ($order_sets as $order_set) {
                    $start_multiple_column = $col_num;
                    $count                 = (double)$order_set->count;
                    $price                 = $order_set->price;
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, '');//Артикул
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, $order_set->set->name);//Название
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, '');//Производство
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, 'шт');//Единицы изм
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, $count);//Кол-во
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, 0);//Вес
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, $price);//Цена
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, 0);//Скидка
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, $order_set->price_bonus_manager());//Бонус менеджера
                    $activeSheet->setCellValueByColumnAndRow(++$start_multiple_column, $start_multiple_row, round($price * $count));//Сумма
                    $start_multiple_row++;
                }
            }
            $max_row = $start_multiple_row;
            $col_num = $start_multiple_column;
            $activeSheet->setCellValueByColumnAndRow(++$col_num, $row, $order->discount);//Скидка на заказ
            $activeSheet->setCellValueByColumnAndRow(++$col_num, $row, ($order->full_price - $order->discount($order->full_price)));//Итого
            $activeSheet->setCellValueByColumnAndRow(++$col_num, $row, $order->bonus_use);//Использовано бонусов
            $activeSheet->setCellValueByColumnAndRow(++$col_num, $row, ($order->admin_comments) ? $order->admin_comments : '');
            $activeSheet->setCellValueByColumnAndRow(++$col_num, $row, $order->getRow('status'));
            $activeSheet->setCellValueByColumnAndRow(++$col_num, $row, (isset($users_all[$order->manager_id]) ? $users_all[$order->manager_id]->username : 'Нет'));
            //endregion
            $row++;
            $max_row++;
        }
        //
        $activeSheet->getStyleByColumnAndRow(0, 1, $col_num, $row)->getAlignment()->setWrapText(true);
        for ($i = $row; $i >= 0; $i--) {
            $activeSheet->getRowDimension($i)->setRowHeight(30);
        }
        $col_num = 0;
        $activeSheet->getColumnDimensionByColumn($col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(10));//ID
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(20));//Дата заказа
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(20));//Дата доставки
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(30));//Тип клиента
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(40));//Пользователь
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(40));//Телефон
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(30));//Город
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(50));//Адрес
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(40));//Оплата
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(40));//Комментарий клиента
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(20));//Артикул
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(60));//Название
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(60));//Производство
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(10));//Единицы изм
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(15));//Кол-во
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(15));//Вес
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(15));//Цена
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(20));//Скидка
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(20));//Бонус менеджера
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(20));//Сумма
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(20));//Скидка на заказ
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(20));//Итого
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(20));//Использовано бонусов
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(60));//Комментарий менеджера
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(40));//Статус
        $activeSheet->getColumnDimensionByColumn(++$col_num)->setWidth(\PHPExcel_Shared_Drawing::pixelsToPoints(30));//Менеджер

        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="export_orders.xls"');
        header('Cache-Control: max-age=0');
        $objectwriter = \PHPExcel_IOFactory::createWriter($sheet, 'Excel2007');
        $path         = 'php://output';
        $objectwriter->save($path);
        exit();
        */
    }
    public function actionTest()
    {
//        Yii::$app->response->format = Response::FORMAT_JSON;
        phpinfo();
        exit();
    }
    public function actionRollbackPay($id)
    {
        /**
         * @var $order Orders
         */
        $result = [];
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            $order                      = Orders::findOne($id);
            if ($order && $order->payment == 2 && $order->pay_status != 'success_rollback' && in_array($order->status, [6, 7])) {
                $sum_pay      = OrdersPay::find()->where(['order_id' => $order->id, 'status' => [0, 1]])->sum('amount');
                $order_sum    = $order->realSum();
                $rollback_sum = floatval($sum_pay);
                if ($order->status == 6) {//Полный возврат
                    $real_sum = 0;
                } else {//Частичный возврат
                    $rollback_sum = $sum_pay - $order_sum;
                    $real_sum     = $sum_pay - $rollback_sum;
                }
                $rollback_url_pay = Json::encode(Url::to(['orders/send-rollback-pay', 'id' => $order->id]));
                $result['js']     = <<<JS
    bootbox.confirm({
        message: 'Сумма возврата: {$rollback_sum} <br/> Сумма списания: {$real_sum}',
        buttons: {
            confirm: {
                label: 'Подтвердить',
                className: 'btn-success'
            },
            cancel: {
                label: 'Закрыть',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result) {
                $.ajax({
                    url: {$rollback_url_pay},
                    type: 'GET',
                    dataType: 'JSON',
                    success: function (data) {
                        if (typeof data.error != 'undefined') {
                            $.growl.error({title: 'Ошибка', message: data.error, duration: 5000});
                        }
                        if (typeof data.success != 'undefined') {
                            window.location.reload();
                        }
                    },
                    error: function () {
                        $.growl.error({title: 'Ошибка', message: 'Произошла ошибка на стороне сервера!', duration: 5000});
                    }
                })

            }
        },
        className: "bootbox-sm"
    });
JS;
            } else {
                $result['error'] = 'Данный заказ не подходит под необходимые критерии';
            }
        }
        return $result;
    }
    public function actionSendRollbackPay($id)
    {
        /**
         * @var $order Orders
         */
        $result = [];
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            $order                      = Orders::findOne($id);
            if ($order && $order->payment == 2 && $order->pay_status != 'success_rollback' && in_array($order->status, [6, 7])) {
                if ($order->status == 6) {//Полный возврат
                    $order->rollbackAllPay();
                } else {//Частичный возврат
                    $order->successPay();
                }
                Orders::updateAll(['pay_status' => 'success_rollback'], ['id' => $order->id]);
                $result['success'] = true;
            } else {
                $result['error'] = 'Данный заказ не подходит под необходимые критерии';
            }
        }
        return $result;
    }
    public function actionSendPay($id)
    {
        /**
         * @var $order Orders
         */
        $result = [];
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            $order                      = Orders::findOne($id);
            if ($order && $order->payment == 2 && $order->pay_status != 'wait_surcharge' && ($add_sum = $order->addSumPay())) {
                if ($url = $order->sendAddPay($add_sum)) {
                    $result['success'] = 'Запрос отправлен';
                    $result['url']     = $url;
                    $order->hand_link = $url;
                    $order->save();
                } else {
                    $result['error'] = 'Не удалось отправить запрос';
                }
            } else {
                $result['error'] = 'Данный заказ не подходит под необходимые критерии';
            }
            return $result;
        } else {
            if ($result) {
                foreach ($result as $key => $value) {
                    \Yii::$app->session->setFlash($key, $value);
                }
            }
            return $this->goBack();
        }
    }

    /**
     * @param $id
     * @return array|void|Response
     * @throws BadRequestHttpException
     */
    public function actionDeleted($id)
    {
        throw new BadRequestHttpException();

    }

    /*
    * Получить информацию
    */
    public function actionCalltaxiinfo($id)
    {
        /**
         * @var $order Orders
         */
        $result = [];

        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            $order=Orders::findOne($id);

            $result['success']='Запрос отправлен';

            if (isset($order->coordinates_json_yandex) && ($order->coordinates_json_yandex != '')) {

                $params = array();

                $string = json_encode($params);

                $version = $order->version_edit;
                $claim_id = $order->claim_id;

                $ch = curl_init("https://b2b.taxi.yandex.net/b2b/cargo/integration/v1/claims/info?claim_id=$claim_id&version=$version");

                curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                    'Content-Type: application/json',
                    'Accept-Language: en-US',
                    'Authorization: Bearer ' . \Yii::$app->params['bearer'],
                    'Content-Length: ' . strlen($string)
                ));
                curl_setopt($ch, CURLOPT_POSTFIELDS, $string);
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                curl_setopt($ch, CURLOPT_HEADER, false);
                $html = curl_exec($ch);
                curl_close($ch);
                $html = json_decode($html);

                $arr = ['new'=>'Новая заявка.',
                    'estimating'=>	'Идет процесс оценки заявки (подбор типа автомобиля по параметрам груза и расчет стоимости).',
                    'estimating_failed'=>	'Не удалось оценить заявку. Причину можно увидеть в error_messages в ответе операции /info.',
                    'ready_for_approval'=>	'Заявка успешно оценена и ожидает подтверждения от клиента.',
                    'accepted'	=>'Заявка подтверждена клиентом.',
                    'performer_lookup'=>	'Заявка взята в обработку. Промежуточный статус перед созданием заказа.',
                    'performer_draft'=>	'Идет поиск водителя.',
                    'performer_found'=>	'Водитель найден и едет в точку А.',
                    'performer_not_found'=>	'Не удалось найти водителя. Можно попробовать снова через некоторое время.',
                    'pickup_arrived'=>	'Водитель приехал в точку А.',
                    'ready_for_pickup_confirmation'	=>'Водитель ждет, когда отправитель назовет ему код подтверждения.',
                    'pickuped'=>	'Водитель успешно забрал груз.',
                    'pay_waiting'=>	'Заказ ожидает оплаты (актуально для оплаты при получении).',
                    'delivery_arrived'=>	'Водитель приехал в точку Б.',
                    'ready_for_delivery_confirmation'=>	'Водитель ждет, когда получатель назовет ему код подтверждения.',
                    'delivered'=>	'Водитель успешно доставил груз.',
                    'delivered_finish' =>'Заказ завершен.',
                    'returning'=>	'Водителю пришлось вернуть груз и он едет в точку возврата.',
                    'return_arrived'=>	'Водитель приехал в точку возврата.',
                    'ready_for_return_confirmation'=>	'Водитель в точке возврата ожидает, когда ему назовут код подтверждения.',
                    'returned'=>	'Водитель успешно вернул груз.',
                    'returned_finish'=>	'Заказ завершен.',
                    'cancelled'=>	'Заказ был отменен клиентом бесплатно.',
                    'cancelled_with_payment'=>	'Заказ был отменен клиентом платно (водитель уже приехал).',
                    'cancelled_by_taxi'=>	'Водитель отменил заказ (до получения груза).',
                    'cancelled_with_items_on_hands'	=>'Клиент платно отменил заявку без необходимости возврата груза (заявка была создана с флагом optional_return).',
                    'failed'	=>'При выполнение заказа произошла ошибка, дальнейшее выполнение невозможно.'];

                \Yii::$app->response->format = Response::FORMAT_JSON;
                $str_info = '';

                if (isset($html->taxi_offer->price)) {
                    $str_info.= ' ВНИМАНИЕ!!! Заявка была оценена в сумму = ' . $html->taxi_offer->price;
                }
                return [
                    'code'=>$arr[$html->status] . $str_info
                ];
            }
        }
    }

    /*
    * Это версия v2 создания заявки
    */
    public function actionCalltaxi($id, $type, $repeat)
    {
        /**
         * @var $order Orders
         */
        $result = [];

        if (Yii::$app->request->isAjax) {

            Yii::$app->response->format = Response::FORMAT_JSON;

            $order = Orders::findOne($id);

            /*щирота меньше latitude*/
            if (isset($order->coordinates_json_yandex) && ($order->coordinates_json_yandex != '')) {
                // 	43.233781,76.935404			43.231757,76.89781     43.224729,76.93376
                $address_settings = [
                    '1' => [
                        'fullname' => 'Алматы, улица Айманова, 155',
                        'shortname' => 'улица Айманова, 155',
                        'lat'=> '76.89781',
                        'lon'=> '43.231757',


                    ],
                    '3' => [
                        'fullname' => 'Алматы, проспект Сакена Сейфуллина, 617',
                        'shortname' => 'проспект Сакена Сейфуллина, 617',
                        'lat'=> '76.935404',
                        'lon'=> '43.233781'
                    ]
                ];

                if (empty($order->pickpoint_id)) {
                    $pickpoint_id = '3';
                } else {
                    $pickpoint_id = $order->pickpoint_id;
                }

                $coord = explode(',', $order->coordinates_json_yandex);

                //	$destination_longitude = $coord[3];
                //	$destination_latitude = $coord[2];
                $destination_longitude = $address_settings[$pickpoint_id]['lat'];
                $destination_latitude = $address_settings[$pickpoint_id]['lon'];


                $source_longitude = $coord[1];
                $source_latitude = $coord[0];

                $user_data = explode(",", $order->user_address);

                $params = array(
                    'callback_properties' => array(
                        "callback_url"=> "https://kingfisher.kz/admin/orders/control.html?id=$id&"
                    ),
                    'client_requirements' => array(
                        //	"cargo_loaders"	=>	0,
                        //	"cargo_type"	=>	"lcv_m",
                        /*тип доставки express - доставка*/
                        "taxi_class"	=>	"express"
                        //		"taxi_class"	=>	"courier"

                    ),
                    'comment' => "Kingfisher",
                    //	'due' => "2021-01-28T00:00:00+00:00",
                    'emergency_contact' => array(
                        "cargo_loaders"	=>	0,
                        "name"	=> (isset(Yii::$app->user->identity->username) ? Yii::$app->user->identity->username : ''),
                        "phone"	=> (isset(Yii::$app->user->identity->phone) ? Yii::$app->user->identity->phone : '')
                    ),

                    'items' => array(
                        array(
                            "cost_currency"=>"KZT",
                            "cost_value"=> (string)$order->full_price,
                            "delivered_quantity"=>1,
                            "droppof_point"=> 2,
                            "extra_id"=> "БП-208",

                            "fiscalization"=> array(
                                /*
                                *	Признак способа расчета (https://yookassa.ru/developers/54fz/parameters-values#payment-mode)
                                *	full_prepayment	Полная предоплата
                                *	partial_prepayment	Частичная предоплата
                                *	advance	Аванс
                                *	full_payment	Полный расчет
                                *	partial_payment	Частичный расчет и кредит
                                *	credit	Кредит
                                *	credit_payment	Выплата по кредиту
                                */
                                "payment_mode"=> "advance",
                                "payment_subject"=> "service",
                                "vat_code"=> 1
                            ),

                            "pickup_point"=> 1,
                            "quantity"=> 1,
                            "size"=> array(
                                "height"=> 0.1,
                                "length"=> 0.1,
                                "width"=> 0.1
                            ),
                            "title"=> "Заказ Kingfisher",
                            "weight"=> 2
                        )
                    ),
                    "optional_return"=> false,
                    "referral_source"=> "yii2",
                    'requirements' => array(

                        'soft_requirements' => array(
                            array(
                                "logistic_group"=>  "ya_eats_group",
                                "meta_group"=>  "lavka",
                                "type"=> "performer_group"
                            )
                        ),
                        'strict_requirements' => array(
                            array(
                                "logistic_group"=> "ya_eats_group",
                                "meta_group"=> "lavka",
                                "type"=>  "performer_group"
                            )
                        )
                    ),
                    'route_points' => array(
                        /*точка отправления*/
                        array(
                            "address"=>array(
                                'coordinates' => array(
                                    (double)$destination_longitude, (double)$destination_latitude
                                ),
                                "building"=> "",
                                "city"=> "Алматы",
                                "comment"=> "Код и номер заказа равен: " . $id,
                                "country"=> "Казахстан",
                                "description"=> $address_settings[$pickpoint_id]['fullname'],
                                "door_code"=> "",
                                "flat"=>1,
                                "floor"=> 1,
                                "fullname"=> $address_settings[$pickpoint_id]['fullname'],
                                "porch"=> "",
                                "sflat"=> "",
                                "sfloor"=> "",
                                "shortname"=> $address_settings[$pickpoint_id]['shortname'],
                                "street"=> $address_settings[$pickpoint_id]['shortname'],
                                "uri"=> "ymapsbm1://geo?ll=" . (double)$destination_longitude . "%2C" . (double)$destination_latitude
                            ),
                            "contact"=>array(
                                "email"=>(isset(Yii::$app->user->identity->email) ? Yii::$app->user->identity->email : ''),
                                "name"=> (isset(Yii::$app->user->identity->username) ? Yii::$app->user->identity->username : ''),
                                "phone"=> (isset(Yii::$app->user->identity->phone) ? Yii::$app->user->identity->phone : '')
                            ),

                            /* "external_order_id"=> (string)$id,
                             "payment_on_delivery"=>array(
                               "client_order_id"=> "100",
                               "cost"=>"12.50",
                               "currency"=>"KZT",
                               "customer"=>array(
                                 "email"=> "stanislavkingfisher@gmail.com",
                                 "full_name"=> "Алла",
                                 "inn"=>"1297578/20",
                                 "phone"=> "+77785670419"
                               ),
                               "tax_system_code"=> 1
                             ), */

                            //   "pickup_code"=> (string)$id,
                            //	   "pickup_code"=> "123456",
                            "point_id"=> 1,
                            "skip_confirmation"=> true,
                            /*
                            "time_intervals" => array(
                                array(
                                    "from"=>"2021-01-28T00:00:00+00:00",
                                    "to"=> "2021-01-28T00:00:00+00:00",
                                    "type"=>"perfect_match"
                                )
                            ),
                            */
                            /*source - означает точка отправления*/
                            "type"=> "source",
                            "visit_order"=>1
                        ),
                        /*точка назначения*/
                        array(
                            "address"=>array(
                                'coordinates' => array(
                                    (double)$source_longitude, (double)$source_latitude
                                ),
                                "building"=> "",
                                "city"=>"Алматы",
                                "comment"=> "Номер заказа: " . $id . ". " . $order->user_comments,
                                "country"=> "Казахстан",
                                "description"=>$order->user_address,
                                "door_code"=> "",
                                "flat"=> (isset($user_data[2]) ? (integer)$user_data[2] : null),
                                "floor"=> 1,
                                "fullname"=> $order->user_address,
                                "porch"=> "",
                                "sflat"=> (isset($user_data[2]) ? $user_data[2] : ""),
                                "sfloor"=> "",
                                "shortname"=>   (isset($user_data[0]) ? $user_data[0] : null) . ', ' . (isset($user_data[1]) ? $user_data[1] : null) . ', ' . (isset($user_data[2]) ? $user_data[2] : null),
                                "street"=> (isset($user_data[0]) ? $user_data[0] : null). ', ' . (isset($user_data[1]) ? $user_data[1] : null) . ', ' . (isset($user_data[2]) ? $user_data[2] : null),
                                "uri"=> "ymapsbm1://geo?ll=" . (double)$source_longitude . "%2C" . (double)$source_latitude
                            ),
                            "contact"=>array(

                                //		"email"=> (string)(isset($order->user_mail) ? $order->user_mail : "stanislavkingfisher@gmail.com"),
                                "name"=> (string)(isset($order->user_name) ? $order->user_name : ""),
                                "phone"=>(string)(isset($order->user_phone) ? (str_replace(array( '(', ')' , '-'), '', $order->user_phone )) : ""),
                            ),
                            // "external_order_id"=> (string)$id,
                            // "payment_on_delivery"=>array(
                            // "client_order_id"=> "100",
                            // "cost"=>"12.50",
                            // "currency"=>"KZT",
                            // "customer"=>array(
                            // "email"=> "morty@yandex.ru",
                            // "full_name"=> "Morty",
                            // "inn"=>"3664069397",
                            // "phone"=> "79000000000"
                            // ),
                            // "tax_system_code"=> 1
                            // ),
                            //  "pickup_code"=> (string)$id,
                            //	"pickup_code"=> "123456",
                            "point_id"=> 2,
                            "skip_confirmation"=> true,
                            /*
                            "time_intervals" => array(
                                  array(
                                    "from"=>"2021-01-28T00:00:00+00:00",
                                    "to"=> "2021-01-28T00:00:00+00:00",
                                    "type"=>"perfect_match"
                                  )
                            ),
                            */
                            /*destination - означает точка назначения*/
                            "type"=> "destination",
                            /*порядок посещения точки*/
                            "visit_order"=>2
                        )
                    ),

                    "skip_act"=> false,
                    "skip_client_notify"=>false,
                    /*false - доставка до двери*/
                    "skip_door_to_door"=> false,
                    "skip_emergency_notify"=> false
                );

                $string = json_encode($params);

                if ($type == 'create') {

                    $repeat_ = "";

                    if ($repeat) {
                        $repeat_ = time();
                    }

                    $ch = curl_init("https://b2b.taxi.yandex.net/b2b/cargo/integration/v2/claims/create?request_id=$id$repeat_");
                } elseif ($type == 'edit') {

                    $version = $order->version_edit;
                    $claim_id = $order->claim_id;

                    $ch = curl_init("https://b2b.taxi.yandex.net/b2b/cargo/integration/v2/claims/edit?claim_id=$claim_id&version=$version");
                }

                curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                    'Content-Type: application/json',
                    'Accept-Language: en-US',
                    'Authorization: Bearer ' . \Yii::$app->params['bearer'],
                    'Content-Length: ' . strlen($string)
                ));
                curl_setopt($ch, CURLOPT_POSTFIELDS, $string);
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                curl_setopt($ch, CURLOPT_HEADER, false);
                $html = curl_exec($ch);
                curl_close($ch);
                $html = json_decode($html);

                \Yii::$app->response->format = Response::FORMAT_JSON;

                if ($type == 'create') {

                    if (isset($html->id)) {
                        $flag_claim_id = $order->claim_id;
                        $order->claim_id = $html->id;
                        $order->save();

                        $history_id = $order->changeHistory(16);
                        $ordersHistory = OrdersHistory::findOne($history_id);
                        $ordersHistory->claim_id = $html->id;
                        $ordersHistory->save();

                        $str = '';

                        if (!empty($flag_claim_id)) {
                            $str = 'была';
                        }

                        return [
                            "code"=> "Создана $str заявка: " . $html->id
                        ];
                    } else {
                        return [
                            "code"=> $html->message
                        ];
                    }
                } elseif ($type == 'edit') {

                    if (isset($html->code)) {
                        return [
                            'code'=> $html->message
                        ];

                    } else {
                        if (isset($html->id)) {
                            $order->version_edit = ($version + 1);
                            $order->save();

                            $history_id = $order->changeHistory(17);
                            $ordersHistory = OrdersHistory::findOne($history_id);
                            $ordersHistory->claim_id = $html->id . '. Версия обновления: ' . ($version + 1);
                            $ordersHistory->save();

                            return [
                                'code'=> 'Обновлена заявка: ' . $html->id . ' Версия обновления № ' . ($version + 1)
                            ];
                        } else {
                            return [
                                "code"=> "Что-то пошло не так...2"
                            ];
                        }
                    }
                }
            }else {
                \Yii::$app->response->format = Response::FORMAT_JSON;
                return [
                    'code'=>'Заказ не имеет точек отправления и назначения'
                ];
            }
        }
    }

    /*
    * Отмена
    */
    public function actionCalltaxicancel($id)
    {
        /**
         * @var $order Orders
         */
        $result = [];

        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            $order=Orders::findOne($id);

            if (isset($order->coordinates_json_yandex) && ($order->coordinates_json_yandex != '')) {

                $version = $order->version_edit;
                $claim_id = $order->claim_id;

                $params = array(
                    "cancel_state"	=>	"free",
                    "version"		=>	$version
                );

                $string = json_encode($params);
                $ch = curl_init("https://b2b.taxi.yandex.net/b2b/cargo/integration/v1/claims/cancel?claim_id=$claim_id");

                curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                    'Content-Type: application/json',
                    'Accept-Language: en-US',
                    'Authorization: Bearer ' . \Yii::$app->params['bearer'],
                    'Content-Length: ' . strlen($string)
                ));
                curl_setopt($ch, CURLOPT_POSTFIELDS, $string);
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                curl_setopt($ch, CURLOPT_HEADER, false);
                $html = curl_exec($ch);
                curl_close($ch);
                $html = json_decode($html);

                \Yii::$app->response->format = Response::FORMAT_JSON;

                $history_id = $order->changeHistory(18);
                $ordersHistory = OrdersHistory::findOne($history_id);
                $ordersHistory->claim_id = $html->id . '. Версия: ' . $order->version_edit;
                $ordersHistory->save();

                return [
                    'code'=> 'Результат: заявка с № ' . $html->id . ' имеет статус ' . $html->status
                ];

            }else {
                \Yii::$app->response->format = Response::FORMAT_JSON;
                return [
                    'code'=>'Заказ не имеет точек отправления и назначения'
                ];
            }
        }
    }

    /*
    * Подтверждение - реальный вызов такси
    */
    public function actionCalltaxiaccept($id)
    {
        /**
         * @var $order Orders
         */
        $result = [];

        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            $order=Orders::findOne($id);

            if (isset($order->coordinates_json_yandex) && ($order->coordinates_json_yandex != '')) {

                $version = $order->version_edit;
                $claim_id = $order->claim_id;

                $params = array(
                    "version"=>$version
                );

                $string = json_encode($params);

                $ch = curl_init("https://b2b.taxi.yandex.net/b2b/cargo/integration/v1/claims/accept?claim_id=$claim_id");

                curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                    'Content-Type: application/json',
                    'Accept-Language: en-US',
                    'Authorization: Bearer ' . \Yii::$app->params['bearer'],
                    'Content-Length: ' . strlen($string)
                ));
                curl_setopt($ch, CURLOPT_POSTFIELDS, $string);
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                curl_setopt($ch, CURLOPT_HEADER, false);
                $html = curl_exec($ch);
                curl_close($ch);
                $html = json_decode($html);

                $history_id = $order->changeHistory(19);
                $ordersHistory = OrdersHistory::findOne($history_id);
                $ordersHistory->claim_id = $html->id . '. Версия: ' . $order->version_edit;
                $ordersHistory->save();

                if (isset($html->code)) {
                    return [
                        'code'=> 'Что-то пошло не так!!!'
                    ];
                } else {
                    return [
                        'code'=> 'Вызов совершен'
                    ];
                }
            }else {
                return [
                    'code'=>'Заказ не имеет точек отправления и назначения'
                ];
            }
        }
    }

    public function actionSetduplicate($id)
    {

        if (Yii::$app->request->isAjax) {

            $record = Orders::findOne($id);
            $status = $record->status;
            Orders::updateAll(['status' => 11], ['like', 'id', $id]);

            if ($status != 11) {
                $record->rollbackBonus();
                $history_id = $record->changeHistory(20);
            }

            $result['message'] = 'Вы изменили статус сделки на статус Дубликат';
            Yii::$app->response->format = Response::FORMAT_JSON;
            return $result;
        }
    }
}
