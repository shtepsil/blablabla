<?php
namespace backend\controllers;

use common\components\Debugger as d;
use backend\AdminController;
use backend\models\EditUser;
use common\models\ItemImg;
use common\models\Items;
use common\models\Orders;
use common\models\User;
use frontend\form\EditRequisites;
use yii\data\Pagination;
use yii\db\ActiveQuery;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\helpers\Inflector;
use Yii;
use yii\web\BadRequestHttpException;
use yii\web\Response;

class UsersController extends AdminController
{
    public function init()
    {
        $this->model = new EditUser();
        $controller_name = Inflector::camel2id($this->id);
        $this->url = [
            'back' => ["$controller_name/index"],
            'control' => ["$controller_name/control"]
        ];
        $this->view->title = 'Клиенты';
        $this->MenuActive($controller_name);
        $this->breadcrumb[] = [
            'url' => ["$controller_name/index"],
            'label' => 'Клиенты'
        ];
        parent::init(); // TODO: Change the autogenerated stub
    }
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['admin'],
                    ],
                    [
                        'actions' => ['deleted'],
                        'allow' => false,
                        'roles' => ['loginAdminPanel'],
                    ],
                    [
                        'allow' => true,
                        'roles' => ['manager'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'control' => ['post', 'get'],
                ],
            ],
        ];
    }
    public $current_type = 'all';
    public $data_types = [
        'all' => [
            'title' => 'Все'
        ],
        'no_wholesale' => [
            'title' => 'Розничные'
        ],
        'is_wholesale' => [
            'title' => 'Оптовые'
        ],
        'is_discount' => [
            'title' => 'Со скидкой'
        ],
    ];
    public function actionIndex()
    {
        $get = \Yii::$app->request->get();
        $model = User::find()->orderBy(['id' => SORT_DESC])
            ->where(['status' => User::STATUS_ACTIVE ])
            ->with([
                'lastUserOrder'
            ]);
        if ($sort = \Yii::$app->request->get('sort')) {
            $this->current_type = $sort;
            switch ($sort) {
                case 'no_wholesale':
                    $model->andWhere(['isWholesale' => 0]);
                    break;
                case 'is_wholesale':
                    $model->andWhere(['>', 'isWholesale', 0]);
                    break;
                case 'is_discount':
                    $model->andWhere('discount is NOT NULL');
                    $model->andWhere('discount != 0.00');
                    break;
                default;
            }
        }
        $manager = \Yii::$app->request->get('manager', null);
        //        if(\Yii::$app->user->identity->role=='manager'&&$manager!=null){
//            $manager = \Yii::$app->user->id;
//        }

        $search = false;
        if(isset($get['search']) AND isset($get['search_by_phone'])){
            $search = $get['search'] ?: $get['search_by_phone'];
        }
        if ($search) {
            $phone = preg_replace('/[^+\d]+/', '', $search);

            if (preg_match('/^\+\d(\d{0,3})(\d{0,3})(\d{0,4})$/', $phone, $matches)) {
                $phone = '+7(' . $matches[1];
                if ($matches[2]) {
                    $phone .= ')-' . $matches[2];

                }
                if ($matches[3]) {
                    $phone .= '-' . $matches[3];
                }
            } else {
                $phone = $search;
            }
            $model->andWhere([
                'or',
                ['like', 'username', $search],
                ['like', 'email', $search],
                ['like', 'data', $search],
                ['like', 'phone', $phone],
            ]);
        }
        if ($manager) {
            $model->andWhere(['manager_id' => $manager]);
        }
        if ($city = \Yii::$app->request->get('city')) {
            $model->andWhere(['city_id' => $city]);
        }
        $data['search'] = $search;
        $data['select_city'] = $city;

        if (\Yii::$app->request->get('export')) {
            $from_id = \Yii::$app->request->get('from_id', null);

            $to_id = \Yii::$app->request->get('to_id', null);

            if (!empty($from_id) && !empty($to_id)) {
                $model->andWhere(['>=', 'id', $from_id]);
                $model->andWhere(['<=', 'id', $to_id]);
            }
            $all = $model->all();

            User::export($all);
            \Yii::$app->end();

        } elseif (\Yii::$app->request->get('export_users_with_bonuses_order_month')) {

            $model = User::find()
                ->joinWith('orders', false)
                ->where(['>', 'user.bonus', 0])
                    // 2676600 - 30 суток (месяц)
                ->andWhere(['<', 'orders.created_at', $time - 2676600]);

            $all_users = [];
            foreach ($model->batch(30) as $users) {
                if (is_array($users)) {
                    foreach ($users as $user) {
                        if (isset($all_users[$user->id]))
                            continue;
                        $all_users[$user->id] = $user;
                    }
                }
            }
            $all_users = array_reverse($all_users, true);
            User::export($all_users);
            \Yii::$app->end();

        } elseif (\Yii::$app->request->get('export_date')) {

            $get = Yii::$app->request->get();
            $model = User::find()
                ->joinWith('orders', false)
                ->indexBy('id');

            // Выбрать пользователей без заказов
            if (isset($get['order']) and $get['order'] == 'on') {
                $model->where(['IS', 'orders.user_id', NULL]);
            }

            $from_date_get = \Yii::$app->request->get('from_date', null);
            $from_date = strtotime($from_date_get);

            $to_date_get = \Yii::$app->request->get('to_date', null);
            $to_date = strtotime($to_date_get);

            if (!empty($from_date) && !empty($to_date)) {
                $model->andWhere(['>=', 'user.created_at', $from_date]);
                $model->andWhere(['<=', 'user.created_at', $to_date]);
            } else {
                return $this->redirect(['users/index']);
            }

            $all = $model->all();
            User::export($all);
            \Yii::$app->end();

        } elseif (\Yii::$app->request->get('count_orders')) {

            $from_count = \Yii::$app->request->get('from_count', null);
            $to_count = \Yii::$app->request->get('to_count', null);

            $model = User::find()
                ->select(['user.*', 'COUNT(orders.id) AS cnt'])
                ->joinWith('orders', false)
                ->where(['orders.status' => 5])
                ->groupBy('user.id')
                ->having(['>=', 'cnt', $from_count])
                ->andHaving(['<=', 'cnt', $to_count]);

            $pages = new Pagination(['totalCount' => $model->count()]);
            $size = \Yii::$app->request->get('size', 50);
            $pages->setPageSize($size);
            $data['size'] = $size;
            $data['pages'] = $pages;

            $data['items'] = $model->offset($pages->offset)
                ->limit($pages->limit)
                ->all();

            return $this->render('//main/users', $data);
        } else {
            $pages = new Pagination(['totalCount' => $model->count()]);
            $size = \Yii::$app->request->get('size', 50);
            $pages->setPageSize($size);
            $data['size'] = $size;
            $data['pages'] = $pages;
            $data['items'] = $model->offset($pages->offset)
                ->limit($pages->limit)
                ->all();
            return $this->render('//main/users', $data);
        }
    }
    public function actionLogin($id)
    {
        $id_admin = \Yii::$app->user->id;
        \Yii::$app->user->logout();
        /**
         * @var $user User
         */
        $user = User::findOne($id);
        if ($user) {
            \Yii::$app->user->login($user, 0);
            \Yii::$app->session->set('return_admin_user', $id_admin);
        }
        return $this->goBack();
    }
    public function actionChangeField()
    {
        /**
         * @var $item User
         */
        $access_edit = [
            'isWholesale'
        ];
        if (
            ($id = \Yii::$app->request->post('pk'))
            && ($name = \Yii::$app->request->post('name'))
            && in_array($name, $access_edit)
        ) {
            $value = \Yii::$app->request->post('value');
            \Yii::$app->db->createCommand()->update(
                User::tableName(),
                [
                    $name => $value
                ],
                [
                    'id' => $id
                ]
            )->execute();
        }
    }

    public function actionGetRequisites()
    {
        $post = Yii::$app->request->post();
        $result = [];
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (isset($post['opt_user_id'])) {
            $user = User::findOne($post['opt_user_id']);
            if ($user) {
                //Реквизиты не найдены...
                if (isset($user->entity_name)) {
                    $requisites = [];
                    foreach (EditRequisites::getAttrs() as $prop => $p_value) {
                        $requisites[$post['form'] . '-' . $prop] = $user->$prop;
                    }
                    $result['success'] = 'Реквизиты получены';
                    $result['requisites'] = $requisites;
                } else {
                    $result['warning'] = 'Выбранный оптовик реквизитов не имеет';
                }
            } else {
                $result['warning'] = 'Выбранный оптовик не найден';
            }
        } else {
            $result['error'] = 'Ошибка на стороне сервера!';
        }
        return $result;
    }

    /**
     * @return array
     * @throws BadRequestHttpException
     */
    public function actionItems()
    {
        /**
         * @var $items Items[]
         */
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            $result                     = [];
            $search                     = Yii::$app->request->get('search');
            $ids                        = Yii::$app->request->get('ids', []);
            $ids                        = array_diff($ids, ['']);
            $q                          = new ActiveQuery(Items::className());
            $q->where(
                [
                    'and',
                    ['not in', 'id', $ids],
                    [
                        'or',
                        ['like', 'name', $search],
                        ['like', 'id', $search]
                    ]
                ]
            );
            $q->limit(100);
            $items = $q->all();
            foreach ($items as $item) {

                if ($item->img_list == '') {

                    $itemImg = ItemImg::find()
                        ->andWhere(['item_id' => $item->id])
                        ->all();

                    if (!empty($itemImg)) {
                        $img_ = 'https://' . $_SERVER['HTTP_HOST'] . '/'.$itemImg[0]['url'];
                    } else {
                        $img_ = '';
                    }

                } else {
                    $img_ = 'https://' . $_SERVER['HTTP_HOST'] . '/'. $item->img_list;
                }

                $result[] = [
                    'id'    => $item->id,
                    'img'    => $img_,
                    'value' => $item->article . ' : ' . $item->name
                ];
            }
            return $result;
        } else {
            throw new BadRequestHttpException();
        }
    }

    /**
     * @param $id
     * @return array
     * @throws BadRequestHttpException
     */
    public function actionAddItem($id)
    {
        /**
         * @var $items Items[]
         */
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            $item                       = Items::findOne($id);
            $result                     = [
                'id'   => $id,
                'item' => $this->renderPartial('form-templates/personal-discount/item', [
                    'item' => $item,
                    'form_name' => Yii::$app->request->get('form_name'),
                    'isWholesale' => Yii::$app->request->get('isWholesale'),
                    'user_id' => Yii::$app->request->get('user_id'),
                ])
            ];
            return $result;
        } else {
            throw new BadRequestHttpException();
        }
    }

    public function actionGetUser()
    {
        $post = Yii::$app->request->post();
        $field = '';
        $user = '0';
        if(isset($post['attribute']) AND isset($post['value'])){
            switch($post['attribute']){
                case 'user_phone':
                    $field = 'phone';
                    break;
                case 'user_mail':
                    $field = 'email';
                    break;
            }
            if($field != ''){
                $user = User::findOne(['status' => User::STATUS_ACTIVE, $field => $post['value']]);
            }
        }
        Yii::$app->response->format = Response::FORMAT_JSON;
        return ['user' => $user];
    }
}