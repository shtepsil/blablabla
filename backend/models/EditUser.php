<?php
/**
 * Created by PhpStorm.
 * Project: morkovka
 * User: lxShaDoWxl
 * Date: 12.10.15
 * Time: 9:53
 */
namespace backend\models;

use common\components\Debugger as d;
use common\models\City;
use common\models\Items;
use common\models\User;
use frontend\form\EditRequisites;
use shadow\helpers\SArrayHelper;
use Yii;
use yii\gii\TypeAheadAsset;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\helpers\Inflector;
use shadow\helpers\Json;
use common\models\OptUsers;
use yii\helpers\Url;
use kartik\select2\Select2;

class EditUser extends User
{
    public $new_password;
    public $entity_name;
    public $entity_address;
    public $entity_bin;
    public $entity_iik;
    public $entity_bank;
    public $entity_bik;
    public $entity_contract;
    public $entity_nds;
    // И тут оно нужно и в User тоже нужно
    public $parent;
    public $users_list;
    // Виды оплаты

    /**
     * todo конечно можно было сделать и по своим ключам, но пришлось бы переделывать функционал заказов, по этому сделал, чтобы в массиве $payment_types_template ключи совпадали с типами оплат из общих настроек.
     * ============================================================================
     * ! Важно, чтобы индексы совпадали с массивом "Типы оплаты" из общих настроек.
     */
    public $payment_types_template;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->payment_types_template = EditUser::getData_payment();
    }

    public static function getData_payment($keys_order_by_index = false)
    {
        $payment_types = [
            'cash' => 'Наличные',
            'online' => 'Онлайн оплата',
            'cards' => 'Банковской картой при получении',
            'invoice' => 'Счёт для оплаты',
        ];
        if ($keys_order_by_index === true) {
            $index_order_payment_keys = [];
            // Расставим порядок числового типа оплаты в соответствии с общими настройками.
            $p_key_index = 1;
            foreach ($payment_types as $pay_name => $pay_text) {
                // В ключ сохраняем строку array_key, в значение соответствующее типу оплаты число.
                $index_order_payment_keys[$pay_name] = $p_key_index;
                $p_key_index++;
            }
            $payment_types = $index_order_payment_keys;
        }
        return $payment_types;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            /*
             * Пока не знаю что сделать, чтобы поле при потере фокуса
             * не показывало сообщение об ошибке валидации поля.
             * А фильтр нужен, чтобы поле multi select правильно обрабатывалось.
             * Кароче пока что просто сделал return true
             */
            [
                ['payment_type'],
                function () {
                    return true;
                }
            ],
            //            [['personal_discount'], 'filter', 'filter' => 'trim', 'skipOnArray' => true],
            [
                ['personal_discount'],
                function () {
                    return true;
                }
            ],
            [['new_password'], 'trim'],
            [['username'], 'required'],
            [['isEntity', 'manager_id', 'opt_user_id', 'city_id'], 'integer'],
            [['discount', '!bonus', 'parent'], 'number'],
            [['isEntity', '!bonus', 'isWholesale'], 'default', 'value' => 0],
            [
                ['new_password'],
                'match',
                'pattern' => '/^[A-Za-z0-9_!@#$%^&*()+=?.,]+$/u',
                'message' => 'Не допустимые символы',
            ],
            [['new_password'], 'string', 'length' => [4, 255]],
            ['email', 'email'],
            ['email', 'unique', 'targetClass' => User::className(), 'targetAttribute' => 'email', 'filter' => ['<>', 'id', $this->id]],
            //            ['phone', 'unique', 'targetClass' => User::className(), 'targetAttribute' => 'phone', 'filter' => ['<>', 'id', $this->id]],
            [['phone'], 'match', 'pattern' => '/^((\+?7)(\(?\d{3})\)-?)?(\d{3})(-?\d{4})$/', 'message' => \Yii::t('main', 'Некорректный формат поля {attribute}')],
            [['username', 'phone'], 'string', 'max' => 255],
            [['username', 'phone'], 'safe'],
            ['entity_nds', 'boolean', 'on' => ['entity']],
            [['entity_name', 'entity_address', 'entity_bin', 'entity_iik', 'entity_bank', 'entity_bik', 'entity_contract'], 'string', 'max' => 255, 'on' => ['entity']],
            [['entity_name', 'entity_address', 'entity_bin', 'entity_iik', 'entity_bank', 'entity_bik', 'entity_nds', 'entity_contract', 'status'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        $attribute_labels = [
            'id' => 'ID',
            'username' => 'Имя',
            'email' => 'E-Mail',
            'phone' => 'Телефон',
            'bonus' => 'Бонусов',
            'code' => 'Реферальный код',
            'new_password' => 'Новый пароль',
            'isEntity' => 'Юр. лицо',
            'manager_id' => 'Менеджер',
            'discount' => 'Скидка',
            'personal_discount' => 'Персональная скидка на товар',
            'isWholesale' => 'Оптовый',
            'city_id' => 'Город',
            'status' => 'Активирован',
        ];
        return array_merge(
            $attribute_labels,
            EditRequisites::getAttrs()
        );
    }
    /**
     * This method is invoked before validation starts.
     * The default implementation raises a `beforeValidate` event.
     * You may override this method to do preliminary checks before validation.
     * Make sure the parent implementation is invoked so that the event can be raised.
     * @return boolean whether the validation should be executed. Defaults to true.
     * If false is returned, the validation will stop and the model is considered invalid.
     */
    public function beforeValidate()
    {
        if ($this->isEntity == 1) {
            $this->scenario = 'entity';
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        $post = Yii::$app->request->post();
        //        d::ajax($post);
//        d::ajax($this->personal_discount);

        $form_name = $this->formName();

        /*
         * Если ID родителя реквизитов не задан.
         * или
         * Если реквизиты заполнены, но при этом выбран оптовик-родитель, у которого нет реквизитов,
         * (вообще переделал - уже не выберешь оптовика без реквизитов.)
         * то родителя запоминать не нужно.
         */
        if ($this->opt_user_id == '' or $this->parent == '0') {
            $this->opt_user_id = NULL;
        }

        // =============================================

        if ($this->new_password) {
            $this->password = $this->new_password;
        }
        //        d::ajax($this->parent);
        // Если отмечен чекбокс "Юр. лицо" и не заданы реквизиты оптовика-родителя
        if ($this->isEntity == 1 and $this->parent == '0') {
            //            d::ajax('if');
            $requisites_attrs = EditRequisites::getAttrsForm();
            $requisites = [];
            $requisites_null = true;
            foreach ($requisites_attrs as $r_key => $r_attr) {
                if ($r_attr['type'] == 'checkbox') {
                    if ($this->$r_key != 0) {
                        $requisites_null = false;
                    }
                    $requisites[$r_key] = ($this->$r_key) ? 1 : 0;
                } else {
                    if ($this->$r_key != '') {
                        $requisites_null = false;
                    }
                    $requisites[$r_key] = $this->$r_key;
                }
            }

            /*
             * Если включен чекбокс "Юр. лицо", но при этом
             * все реквизиты пусты, то запишем NULL,
             * Если же хоть одно поле заполнено, то запишем реквизиты.
             */
            if (!$requisites_null) {
                $this->data = Json::encode($requisites);
            } else {
                $this->data = NULL;
            }
        } else {
            /*
             * Если реквизиты не заданы или заданы реквизиты оптовика-родителя,
             * то реквизиты текущего пользователя сбросим.
             */
            $this->data = NULL;
        }
        if ($this->isNewRecord) {
            $this->generateAuthKey();
            $this->status = self::STATUS_ACTIVE;
        }

        if ($this->isWholesale()) {
            /*
             * Если в поле виды оплаты ничего нет, то $this->payment_type будет пустой строкой (тип string)
             * Если будет что то выбрано, то будет уже тип array.
             */
            if (is_array($this->payment_type) and count($this->payment_type)) {
                $this->payment_type = Json::encode($this->payment_type, 256);
            } else {
                /*
                 * todo Пытался установить значение по умолчанию при создании виджета, но так как виджет создаётся при участии модели, то по умолчанию устанавливается значение поля модели, но при создании нового пользователя - модель без выборки (пустая).
                 * =================================================
                 * Если поле "Способы оплаты" пусто,
                 * то по умолчанию установим "Счёт для оплаты"
                 */
                $this->payment_type = Json::encode(['invoice'], 256);
            }
        } else {
            // Если не оптовик, то сбросим все виды оплаты.
            $this->payment_type = NULL;
        }

        /*
         * Если статус пользователя был изменён на "Обычный пользователь" (не оптовик)
         * то открепим от него всех пользователей, которые были к нему прикреплены.
         */
        if ($this->isWholesale == '0') {
            User::updateAll(['opt_user_id' => NULL, 'personal_discount' => NULL], ['id' => $this->id]);
        }

        if (
            is_array($this->personal_discount)
            and count($this->personal_discount)
            and isset($post[$form_name]['personal_discount'])
        ) {
            $personal_discount = [];
            foreach ($this->personal_discount as $pd_key => $pd_value) {
                $item_id = str_replace('item_', '', $pd_key);
                $personal_discount[$item_id] = $pd_value;
            }
            $this->personal_discount = Json::encode($personal_discount, 256);
        } else {
            $this->personal_discount = NULL;
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * Получение прикреплённых пользователей
     * @param $count
     * @return array|bool|int|string|\yii\db\ActiveRecord[]|null
     */
    public function getUserChildren($count = false)
    {
        if (!$this->isNewRecord) {
            $users_query = User::find()
                ->select(['id', 'username', 'email'])
                //                ->limit(100)
                ->where(['opt_user_id' => $this->id]);
            if ($count === true) {
                return $users_query->count();
            }
            return $users_query->all();
        }
        return false;
    }

    public $personal_discount_find_items;
    public function FormParams()
    {

        if (isset($this->id) and is_numeric($this->id)) {
            // Сразу же настроим тип пользователя
            User::$user_type = $this->isWholesale;
        }

        if ($this->isEntity) {
            $entity = Json::decode($this->data);
            if (is_array($entity)) {
                foreach ($entity as $key => $value) {
                    $this->{$key} = $value;
                }
            }
        }
        if ($this->isNewRecord) {
            $this->loadDefaultValues(true);
            /**@var $user \backend\models\SUser */
            $user = Yii::$app->user->identity;
            if ($user->role == 'manager') {
                $this->manager_id = $user->id;
            }
        }

        /*
         * Для выпадающего списка оптовиков
         * ================================
         * Выбираем оптовиков всех типов
         */
        $db_users = User::find()
            ->where(['>', 'isWholesale', '0']) // Если оптовик
            ->andWhere(['not', ['data' => null]]) // Если есть свои реквизиты
            ->andWhere(['opt_user_id' => null]) // На всякий случай добавил ещё одну проверку
            ->indexBy('id')->all();

        $select_users = [];
        $wholesale = '';
        foreach ($db_users as $user) {
            // Авторизованного пользователя прикрепить можно? Надо спросить
            if ($user->id == $this->id) {
                continue;
            }
            $select_users[$user->id] = 'Оптовик - ' . $user->username;
        }

        $requisites_fields = EditRequisites::getAttrs(true);
        foreach ($requisites_fields as $r_key => $r_field) {
            // Распределение типов input (checkbox/text/hidden)
            $requisites_fields[$r_key] = ['type' => $r_field['type']];
        }

        // Значения по умолчанию
        $requisites_fields['parent']['params']['value'] = 0;
        // Блокирующий слой реквизитов по умолчанию отключен.
        $block_layer_css_display = 'none';

        /*
         * Если текущий(редактируемый) пользователь прикреплён к оптовику,
         * то нужно получить реквизиты этого оптовика
         * opt_user_id - common\models\User - ID
         */
        if ($this->opt_user_id) {
            $opt_user = User::findOne($this->opt_user_id);
            /*
             * Проверим, имеет ли реквизиты выбранный оптовик.
             * Возьмём первое попавшееся поле, если оно существует,
             * значит реквизиты заданы. 
             */
            if (isset($opt_user->entity_name)) {
                // Реквизиты прикрепленного оптовика нужно заблокировать от редактирования
                $block_layer_css_display = 'block';
                $requisites_fields['parent']['params']['value'] = 1;
                // Расставим значения реквизитов в поля
                foreach ($requisites_fields as $r_key => $r_field) {
                    // todo Тут надо переделать, чтобы не использовалось имя "parent", как то более обобщённо надо сделать пропуск этого поля
                    if ($r_key == 'parent')
                        continue;
                    $prop_options = [
                        // Тип поля
                        'type' => $r_field['type'],
                        // Параметры. Задаим значение value, получив значение из выборки родителя.
                        'params' => ['value' => $opt_user->$r_key]
                    ];
                    if ($r_field['type'] == 'checkbox') {
                        // Если nds отмечен
                        if ($opt_user->$r_key == 1) {
                            // Для checkbox удалим value
                            unset($prop_options['params']['value']);
                            // params переопределиться новым значением
                            $prop_options = SArrayHelper::merge($prop_options, [
                                'params' => ['checked' => '']
                            ]);
                        }
                    }
                    $requisites_fields[$r_key] = $prop_options;

                } //foreach
            }
        }

        $opt_user_dropdown_text_default = 'Нет';
        $opt_user_options = [];
        $user_children = $this->getUserChildren();
        $user_children_count = (
            $user_children
            and is_array($user_children)
            and count($user_children)
        ) ? count($user_children) : 0;
        if ($user_children_count > 0) {
            $opt_user_dropdown_text_default = 'Текущий пользователь имеет прикрепленных пользователей';
            $opt_user_options = [
                'disabled' => 'disabled',
                'data-user-count' => 'count'
            ];
        }

        $items = [];
        if ($this->personal_discount and is_array($this->personal_discount) and count($this->personal_discount)) {
            $items = Items::find()->where(['id' => array_keys($this->personal_discount)])->all();
        }

        $controller_name = Inflector::camel2id(Yii::$app->controller->id);
        $form_name = strtolower($this->formName());
        $result = [
            'form_action' => [$controller_name . '/save'],
            'cancel' => [$controller_name . '/index'],
            'form_options' => [
                'data-type' => $form_name,
            ],
            'groups' => [
                'main' => [
                    'title' => 'Основное',
                    'icon' => 'suitcase',
                    'options' => [],
                    'fields' => [
                        'status' => [
                            'type' => 'checkbox',
                            'params' => [
                                'value' => $this::STATUS_ACTIVE
                            ]
                        ],
                        'username' => [],
                        'email' => [],
                        'phone' => [
                            'widget' => [
                                'class' => \yii\widgets\MaskedInput::className(),
                                'config' => [
                                    'mask' => '+7(999)-999-9999',
                                    'definitions' => [
                                        'maskSymbol' => '_'
                                    ],
                                ]
                            ]
                        ],
                        'isEntity' => [
                            'type' => 'checkbox',

                        ],
                        'isWholesale' => [
                            'title' => 'Тип пользователя',
                            'type' => 'radioList',
                            'params' => ArrayHelper::map(User::$user_types, 'type', 'label'),
                            'radio_default' => ['value' => $this->isWholesale]
                        ],
                        'opt_user_id' => [
                            'title' => 'Прикреплён к ...',
                            'type' => 'dropDownList',
                            'data' => ArrayHelper::merge(
                                ['' => $opt_user_dropdown_text_default],
                                $select_users
                            ),
                            'field_options' => [
                                'template' => '{label}<div class="col-md-10">{input}'
                                . Html::img('/images/animate/loading.gif', [
                                    'class' => 'requisites-animate',
                                    'style' => 'display:none;position:absolute;left:-160px;top:3px;'
                                ]) . '</div>',
                                'inputOptions' => $opt_user_options
                            ]
                        ],
                        'bonus' => [],
                        'discount' => [],
                        'manager_id' => [
                            'type' => 'dropDownList',
                            'data' => ArrayHelper::merge(
                                ['' => 'Нет'],
                                SUser::find()->where(['role' => 'manager'])->select(['username'])->indexBy('id')->column()
                            ),
                        ],
                        'city_id' => [
                            'type' => 'dropDownList',
                            'data' => ArrayHelper::merge(
                                ['' => 'Нет'],
                                City::find()->select(['name', 'id'])->indexBy('id')->column()
                            ),
                        ],
                        //                        'code' => [
//                            'field_options' => [
//                                'inputOptions' => [
//                                    'disabled' => true
//                                ]
//                            ]
//                        ],
                        'new_password' => [
                            'type' => 'password',
                            'field_options' => [
                                'inputOptions' => [
                                    'autocomplete' => "off"
                                ]
                            ]
                        ],
                    ],
                ],
                'company' => [
                    'tabWrapAttrs' => [
                        'class' => $form_name . '-tab-company',
                    ],
                    'tabBlockLayer' => [
                        'view' => true,
                        'css_params' => [
                            'display' => $block_layer_css_display
                        ]
                    ],
                    'title' => 'Юр. иформация',
                    'icon' => 'building',
                    'options' => [
                        'class' => ($this->isEntity == 1) ? '' : 'hide'
                    ],
                    'fields' => $requisites_fields,
                ],
                'history_order' => [
                    'title' => 'История заказов',
                    'icon' => 'shopping-cart',
                    'options' => [],
                    'render' => [
                        'view' => 'history_order',
                        'data' => [
                            'user' => $this,
                        ]
                    ]
                ],
                'address_user' => [
                    'title' => 'Адреса',
                    'icon' => 'location-arrow',
                    'options' => [],
                    'render' => [
                        'view' => 'address_user',
                        'data' => [
                            'user' => $this,
                        ]
                    ]
                ],
                'users_children' => [
                    'title' => 'Прикрепленные пользователи',
                    'icon' => 'th-list',
                    'context' => $this,
                    'options' => [
                        'class' => ($this->isWholesale == 0) ? 'hide' : false
                    ],
                    'fields' => [
                        'users_list' => [
                            'title' => 'Пользователи',
                            'type' => 'ul',
                            'data' => $user_children,
                            'data_count' => $user_children_count,
                            'data_fields' => [
                                'id' => 'ID: {id}',
                                'username' => ', {username}',
                                'email' => ', {email}'
                            ],
                        ],
                    ]
                ],
                'payment_type' => [
                    'title' => 'Типы оплаты',
                    'icon' => 'money',
                    'fields' => [
                        'payment_type' => [
                            'title' => 'Способы оплаты<br><span class="label-left-description">Только для оптовиков</span>',
                            'field_options' => [
                                'template' => '{label}<div class="col-md-10">'
                                . '<div class="label-top label-top-info'
                                . (($this->payment_type != NULL) ? ' hide' : '')
                                . '">Если оставить поле пустым, то по умолчинию будет установлен тип оплаты "Счёт для оплаты"</div>'
                                . '{input}</div>',
                            ],
                            'widget' => [
                                'class' => Select2::className(),
                                'config' => [
                                    'name' => 'payment_type',
                                    'data' => $this->payment_types_template,
                                    'options' => ['multiple' => true, 'placeholder' => '']
                                ]
                            ]
                        ],
                    ],
                    'options' => [
                        // Вкладка "Виды оплаты", показываем только оптовикам.
                        'class' => ($this->isWholesale == 0) ? 'hide' : false
                    ],
                ],
                'personal_discount' => [
                    'title' => 'Персональные скидки (' . count($items) . ')',
                    'fields' => [
                        'personal_discount_find_items' => [
                            'title' => 'Выберите товар',
                            'field_options' => [
                                'template' => Yii::$app->controller->renderPartial(
                                    'form-templates/personal-discount/items',
                                    [
                                        'form_name' => $form_name,
                                        'items' => $items,
                                        'items_discount_ids' => $this->personal_discount,
                                        'user_id' => $this->id,
                                    ]
                                ),
                                'inputOptions' => [
                                    'placeholder' => 'Начните вводить (ID товара или наименование)',
                                    'data-id' => '0',
                                    'value' => ''
                                ]
                            ],
                        ]
                    ]

                ]
            ]
        ];

        // Если это не оптовик, то поле "Прикреплён к" блокируем
        if ($this->isWholesale == 0) {
            $result['groups']['main']['fields']['opt_user_id']['params'] = [
                'disabled' => 'disabled',
            ];
            unset($result['groups']['personal_discount']);
        }

        $user_id = Yii::$app->request->get('user_id');
        $url_requisites = Url::to('get-requisites.html');
        $url_items = Url::to(['users/items', 'search' => 'QUERY']);
        $url_add_item = Url::to(['users/add-item']);
        $items_discount_ids = Json::encode($this->personal_discount, JSON_FORCE_OBJECT);
        $this_data = 'false';
        if ($this->data) {
            $this_data = 'true';
        }

        TypeAheadAsset::register(Yii::$app->view);

        Yii::$app->view->registerJs(<<<JS

// : Операции с товарами для персональных скидок ===

// Чекбокс "Юр.лицро"
var isWholesale = '{$this->isWholesale}';
var urlGetRequisites = '{$url_requisites}';
var formName = '{$this->formName()}';
var ids_{$form_name} = {$items_discount_ids};
var user_id = '{$user_id}';
var form_name = '{$form_name}';

var bestItems = new Bloodhound({
    datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
    queryTokenizer: Bloodhound.tokenizers.whitespace,
    remote: {
        url: '{$url_items}',
        wildcard: 'QUERY',
        prepare: function (query, settings) {
            settings.url = settings.url.replace('QUERY', encodeURIComponent(query));
            settings.data= {
                ids: ids_{$form_name}
            }
            return settings;
        },
    },
    limit: 100
});
function checkIfCanOpen() {
    return $('#{$form_name}-personal_discount_find_items').val() && $('#{$form_name}-personal_discount_find_items').val().length > 2;
}
bestItems.initialize();
$('#{$form_name}-personal_discount_find_items').typeahead({
    minLength: 2,
    highlight: true,
    hint: true,
    autoselect: true
}, {
    name: 'value',
    displayKey: 'value',
    source: bestItems.ttAdapter(),
	templates: {
        empty: [
            '<div class="list-group search-results-dropdown"><div class="list-group-item">Не найдено.</div></div>'
        ],
        header: [
            '<div style="width:400px" class="list-group search-results-dropdown">'
        ],
        suggestion: function (data) {
            return '<div style="width:400px"><img style="width:50px" src="' + data.img + '">' + data.value + '</div>'   
        }
	},
    limit: 100
}).on('typeahead:selected', function (event, data) {
    $(this).data('id', data.id);
    add_item(data.id);
}).on("focus", function () {
    if (checkIfCanOpen()) {
        var ev = $.Event("keydown");
        ev.keyCode = ev.which = 40;
        $(this).trigger(ev);
        return true;
    }
});
// id - это id добавляемого товара
function add_item(id) {
    var res = $('.res'),
        personalDiscount = $('#{$form_name}-personal_discount_find_items'),
        isWholesale = $('#{$form_name}-iswholesale input:checked').val();

    res.html('result');
        
    if (id) {
        bestItems.clearRemoteCache()
        $.ajax({
            url: "{$url_add_item}",
            type: 'GET',
            dataType: 'JSON',
            data: {id: id, user_id: user_id, form_name: form_name, isWholesale: isWholesale},
            success: function (data) {
                res.html('Done<br><pre>' + prettyPrintJson.toHtml(data) + '</pre>');
                ids_{$form_name}[id] = data.id
                $('#items-{$form_name}').append(data.item);
                $.growl.notice({title: 'Успех', message: 'Добавлен новый товар'});
                personalDiscount.typeahead('val', '');
                personalDiscount.data('id', 0);
            },
            error: function (data) {
                res.html('Fail<br>' + JSON.stringify(data));
                $.growl.error({title: 'Ошибка', message: 'Произошла ошибка на стороне сервера', duration: 5000});
            }
        });
    } else {
        personalDiscount.trigger('focus');
        $.growl.error({title: 'Ошибка', message: 'Необходимо выбрать из списка', duration: 5000});

    }
}
$('#items-{$form_name}').on('click', '.deleted-{$form_name} > a', function (e) {
    e.preventDefault();
    var id_item = $(this).data('id');
    $.each(ids_{$form_name}, function (i, el) {
        if (el == id_item) {
            delete ids_{$form_name}[i]
        }
    })
    bestItems.clearRemoteCache()
    $(this).parents('tr').remove();
}).on('change', 'input', function () {
    // update_price();
});

$('.personal-discount-items').on('blur', '.wrap-discount input', function () {
    $(this).css({outline: 'none'});
});

// Редактирование поля скидка
$('.personal-discount-items').on('input', '.wrap-discount input', function (e) {
    var tthis = $(this),
        tthisVal = tthis.val(),
        sumItem = tthis.parent().parent().parent().find('.sum_item'),
        itog = 0;

    tthis.css({outline: 'none'});

    /**
     * Если в поле присутствует знак % и введен только один символ,
     * то  делаем сброс поля с показом красной рамки.
     */
    if(~tthis.val().indexOf('%') && tthis.val().length == 1){
        tthis.css({outline: '1px solid red'});
        tthis.val('');
        return;
    }

    /**
     * Если в поле есть два символа % подряд
     * Удаляем один символ с конца строки.
     * С предупреждением.
     */
    if(~tthis.val().indexOf('%%')){
        tthis.css({outline: '1px solid red'});
        tthis.val(tthis.val().substring(0, tthis.val().length - 1));
        return;
    }

    /**
     * Если введено что то кроме знака процента и числа,
     * делаем сброс. С предупреждением.
     */
    if (e.originalEvent.data != '%' && !Number.isInteger(Number(e.originalEvent.data))) {
        tthis.css({outline: '1px solid red'});
        tthis.val(tthis.val().replace(e.originalEvent.data, '', tthis.val()));
        return;
    }

    /**
     * Расчёт итоговой суммы
     * =====================
     * Если введён знак процента
     */
    if (~tthis.val().indexOf('%')) {
        
        if(~tthis.val().indexOf('%%') || !isNaN(Number(e.originalEvent.data))){
            tthis.css({outline: '1px solid red'});
            tthis.val(tthis.val().substring(0, tthis.val().length - 1));
            return;
        }
        // Удаляем из строки знак процента
        var tthisValPercent = tthis.val().replace('%', '');
        // Расчитываем число процента
        var percent = (+sumItem.attr('data-origin') / 100 * tthisValPercent);
        // Минусуем число процента от суммы
        itog = (+sumItem.attr('data-origin') - +percent )  * +sumItem.attr('data-weight');

    } else {
    // Если введено число без знака процента

        // Если введено не число
        if (!Number.isInteger(Number(e.originalEvent.data))) {
            tthis.css({outline: '1px solid red'});
            tthis.val(tthis.val().replace(e.originalEvent.data, '', tthis.val()));
            return;
        }
        // Если поле не пусто
        if (tthis.val() != '') {
            // От основной суммы минусуем введённо число
            itog = (+sumItem.attr('data-origin') - +tthis.val()) * +sumItem.attr('data-weight');
        } else {
            // Если из поля удалены все символы, возвращаем оригинальную сумму
            itog = sumItem.attr('data-weigth-origin');
        }
    }

    // Если в поле есть знак процента
    if (~tthis.val().indexOf('%')) {
        // Знак Тг прячем
        tthis.parent().find('span').addClass('hide');
    } else {
    // Знак Тг показываем
        tthis.parent().find('span').removeClass('hide');
    }
    // Если поле пусто
    if (tthis.val() == '') {
        // Знак Тг прячем
        tthis.parent().find('span').addClass('hide');
    }

    // Если итоговая сумма меньше или равно нулю, итог будет 0
    if(itog <= 0) itog = 0;

    // Округляем вниз
    sumItem.html(Math.floor(itog));

});
// : ===============================================

// Устанавливаем localStorage по умолчанию
localStorage.removeItem('opt_user');
localStorage.setItem('edit-user', false);
setTimeout(function(){
	/**
	 * Если при перезагрузке страницы, в поле "Прикреплён к"
	 * что то выбрано, то реквизиты удалять не нужно.
	 * А если не выбрано ничего, то удалим реквизиты из памяти.
	 */
	var opt_user_id = $('#{$form_name}-opt_user_id');
	if(opt_user_id.val() == ''){
		requisites.removeLocalStorage();
	}
}, 500)

$('#{$form_name}-isentity').on('change', function () {
    yurlico.viewTab();
});
$('.{$form_name}-group-tab-layer').on('click', function () {
    $.growl.error({title: 'Внимание',
	   message: 'Это реквизиты прикреплнного оптовика. Здесь их редактировать невозможно.',
	   duration: 7000});
});

// Изменение select'а "Прикреплён к"
$('#{$form_name}-opt_user_id').on('change', function () {
	var tthis = $(this),
		res = $('.res'),
		load = $('.requisites-animate'),
		page_company_panel = $('#page-company-panel'),
		isentity = $('#{$form_name}-isentity'),
		Data = {};
	
	res.html('result');
	
	if($(this).val() !== ''){
		
		Data['opt_user_id'] = $(this).val();
		Data['form'] = '{$form_name}';
	
//		cl(Data);
//		return;
		
		$.ajax({
			url: urlGetRequisites,
			type: 'post',
			dateType: 'json',
			cache: false,
			data: Data,
			beforeSend: function(){ load.fadeIn(100); }
		}).done(function(data){
//			res.html('Done<br><pre>' + prettyPrintJson.toHtml(data) + '</pre>');
			if(typeof data.success != 'undefined'){
				$.growl.notice({title: 'Успешно', message: data.success, duration: 5000});
                /**
                 * Если пользователь не имеет родительских реквизитов,
                 * но при этом у него есть свои,
                 * то свои реквизиты сохраним localStorage.
                 */
                if(!requisites.parent){
                    var user_requisites_json = requisites.getJson();
                    localStorage.setItem('user_requisites', user_requisites_json);
                }
				
				// Включаем checkbox "Юр. лицо" и включаем вкладку "Юр. информация"
				yurlico.setTab(1);
				
				// Заполням поля реквизитов
				requisites.setParent(data.requisites);
                
                // Поставим флаг, что реквизиты родителя есть и они установлены
                requisites.inputParent.val(1);
                
			}else{
				if (typeof data.error != 'undefined'){
					$.growl.error({title: 'Ошибка', message: data.error, duration: 5000});
					// Удалим реквизиты из памяти
					requisites.removeLocalStorage();
				}else if(typeof data.warning != 'undefined'){
					$.growl.warning({title: 'Внимание', message: data.warning, duration: 5000});
					// Удалим реквизиты из памяти
					requisites.removeLocalStorage();
				}else{
				/**
				 * Это условие не должно сработать никогда,
				 * но сделал на всякий случай, для подстраховки.
				 */
					$.growl.error({title: 'Ошибка', message: 'Не известная ошибка', duration: 5000});
				}
                if(localStorage.getItem('user_requisites') != null){
                    requisites.set();
                }else{
                    // Сбросим реквизиты только в полях (Юр вкладку и Юр лицо - оставляем)
                    requisites.resetInputs();
                }
                // Поставим флаг, что реквизиты родителя сброшены.
                requisites.inputParent.val(0);
			}
		}).fail(function(data){
			res.html('Fail<br>' + JSON.stringify(data));
		}).always(function(){
			load.fadeOut(100);
		});
	}else{
		// Отключаем вкладку "Юр. информация" и сбрасываем все поля
		requisites.removeAll();
		// Сбросим ID выбранного оптового пользователя
		localStorage.removeItem('opt_user');
        // Поставим флаг, что реквизиты родителя сброшены.
        requisites.inputParent.val(0);
	}
});

// Заполнение/опустошение реквизитов
var requisites = {
    parent: '{$this_data}' === 'false',
	tab: $('#page-company-panel'),// id тела tab'a
    layerLock: $('.{$form_name}-group-tab-layer'),
    inputParent: $('#{$form_name}-parent'),
	setParent: function(data){
		var context = this;
		// Если реквизиты получены из памяти
		if(typeof data == 'string'){
			// Перобразуем их в объект
			data = JSON.parse(data);
		}
		/**
		 * Если реквизитов нет в памяти, то сохраним их в память.
		 * Или если сохранённые в памяти реквизиты нужно обновить.
		 */
		if(
			localStorage.getItem('requisites') == null
			|| JSON.stringify(data) != localStorage.getItem('requisites')
		){
			// Запоминаем полученные реквизиты
			localStorage.setItem('requisites', JSON.stringify(data));
		}
		
		// Перебираем поля реквизитов (устанавливаем занчения полей)
		this.tab.find('input').each(function(){
			// Текстовые поля заполняем val
			if($(this).attr('type') == 'text'){
				$(this).val(data[$(this).attr('id')]);
			}
			// Поле checked изменям prop
			if($(this).attr('type') == 'checkbox'){
				$(this).prop('checked', Boolean(data[$(this).attr('id')]));
			}
			// Отключаем все поля
			context.layerLock.show();
        });
        // Поставим флаг, что реквизиты родителя есть и они установлены.
        this.inputParent.val(1);
	},
	resetInputs: function(){
		var context = this;
	    // Опустошаем только поля реквизитов
		this.tab.find('input').each(function(){
			if($(this).attr('type') == 'text'){ $(this).val(''); }
			if($(this).attr('type') == 'checkbox'){ $(this).prop('checked', false); }
			// Все поля делаем доступными
			context.layerLock.hide();
		});
	},
	removeLocalStorage: function(){
	    // Удаляем реквизиты из памяти
		localStorage.removeItem('requisites');
	},
	removeAll: function(){
        /**
         * Если есть сохранённые реквизиты пользователя,
         * то вернём их назад в поля.
         */
        if(localStorage.getItem('user_requisites') != null){
            requisites.set();
        }else{
            // Отключаем галку "Юр. лицо" и прячем вкладку "Юр. информация"
            yurlico.setTab(0);
            // Удаляем реквизиты из полей
            this.resetInputs();
            // Удаляем реквизиты из памяти
            this.removeLocalStorage();
        }
    },
    get: function(){
        var user_requisites = {};
        // Перебираем поля реквизитов
        this.tab.find('input').each(function(){
            // В ключах объекта input-id

            // Из текстовых полей берём val
            if($(this).attr('type') == 'text'){
                user_requisites[$(this).attr('id')] = $(this).val();
            }
            // Из поля checkbox берём prop
            if($(this).attr('type') == 'checkbox'){
                user_requisites[$(this).attr('id')] = $(this).prop('checked');
            }
        });
        return user_requisites;
    },
    getJson: function () {
        return JSON.stringify(this.get());
    },
    set: function(){
        if(localStorage.getItem('user_requisites') != null){
            var user_requisites_localstorage = JSON.parse(localStorage.getItem('user_requisites'));
            // Перебираем поля реквизитов
            this.tab.find('input').each(function(){
                // В ключах объекта из localStorage - input-id
                if($(this).attr('type') == 'text'){
                    $(this).val(user_requisites_localstorage[$(this).attr('id')]);
                }
                // Для checkbox ставим prop
                if($(this).attr('type') == 'checkbox'){
                    $(this).prop('checked', user_requisites_localstorage[$(this).attr('id')]);
                }
            });
            // Убираем блокирующий слой
            this.layerLock.hide();
        }
    }
};

// Обработка вкладки "Юр. информация" и галки "Юр. лицо"
var yurlico = {
	obj: $('#{$form_name}-isentity'),
    tabBody: $('#page-company-panel'),
	viewTab: function(){
		var tab = $('#page-company-panel-li');
		if (this.obj.prop('checked')) {
			tab.removeClass('hide');
		}
		else {
			tab.addClass('hide');
		}
	},
	setTab: function(checked){
		this.obj.prop('checked', checked);
		// Прячем вкладку "Юр. информация"
		setTimeout(this.viewTab(), 200);
	},
	statusCheck: function(){
	// Проверка, включен ли checkbox Юр. лицо
		if(this.obj.prop('checked')){ return true; }
		return false;
	}
};

// Установка реквизитов пользователя
if(!requisites.parent){
    localStorage.setItem('user_requisites', requisites.getJson());
}else{
    localStorage.removeItem('user_requisites');
}
									 
// Изменение радио кнопок (пользователь/оптовик/оптовик 2)
$('#{$form_name}-iswholesale').on('change', function () {
    var field_opt = $('#{$form_name}-opt_user_id');
	// Если выбран какой то из оптовиков, а не "Пользователь"
    if ($(this).find(':checked').val() != 0) {
		// Показываем вкладку прикреплённых пользователей
        $('#page-users_children-panel-li').removeClass('hide');
        // Покажем вкладку "Виды оплаты"
        $('#page-payment_type-panel-li').removeClass('hide');
        // Прячем вкладку "Персональные скидки"
        $('#page-personal_discount-panel-li').removeClass('hide');
        
        if(field_opt.attr('data-user-count') != 'count'){
            // Включаем поле "Прикреплён к"
            field_opt.prop('disabled', false);
        }
        
		/**
         * Если есть сохранёный оптовик-родитель, то
         * вставим его ID в поле "Прикреплён к"
         */
		if(
			localStorage.getItem('opt_user') != null
			&& localStorage.getItem('opt_user') != ''
		){
			// Вставляем в поле то содержимое, которое было до изменений.
        	field_opt.val(localStorage.getItem('opt_user'));
			
			// Проверим реквизиты у выбранного оптовика
			if(localStorage.getItem('requisites') != null){
				// Установим реквизиты
				requisites.setParent(localStorage.getItem('requisites'));
				/**
				 * Включим галку и вкладку
				 * =======================
				 * Так как реквизиты имеются, то
				 * галка Юр. лицо должна быть включена
				 * и вкладка Юр. информация должна отображаться
				 */
				yurlico.setTab(true);
                // Флаг - реквизиты родителя установлены
                requisites.inputParent.val(1);
			}else{
            /**
             * Если у выбранного оптовика не было реквизитов,
             * поле "Прикреплён к" сделаем пустым.
             */
                field_opt.val('');
                // Флаг - реквизиты родителя сброшены
                requisites.inputParent.val(0);
            }
		}
    } else {
	// Если выбран обычный пользователь
		// Прячем вкладку прикреплённых пользователей
        $('#page-users_children-panel-li').addClass('hide');
        // Прячем вкладку "Виды оплаты"
        $('#page-payment_type-panel-li').addClass('hide');
        // Прячем вкладку "Персональные скидки"
        $('#page-personal_discount-panel-li').addClass('hide');
		// Отключаем поле "Прикреплён к"
        field_opt.prop('disabled', true);
		// Если поле "Прикреплён к" не пусто
        if(field_opt.val() != ''){
			// Сохраняем его value, чтобы вернуть его назад в случае отмены изменений.
            localStorage.setItem('opt_user', field_opt.val());
			// Поле "Прикреплён к" делаем пустым
            field_opt.val('');
            
            /**
             * Если есть сохранённые реквизиты пользователя,
             * то вернём их назад в поля.
             */
            if(localStorage.getItem('user_requisites') != null){
                requisites.set();
            }else{
                // Сбросим только поля реквизитов
                requisites.resetInputs();
            }
            // Флаг - реквизиты родителя сброшены
            requisites.inputParent.val(0);
        }
    }
});
									 
// Перед отправкой формы
$('form[data-type={$form_name}]').on('beforeSubmit', function (e) {
    var select_user_type = $('#{$form_name}-iswholesale input:checked'),
        field_opt = $('#{$form_name}-opt_user_id');
    
	/**
	 * Если тип текущего(настраиваемого) пользователя оптовик и выбран тип обычного пользователя,
	 * то нужно предупредить пользователя об удалении всех прикреплённых пользователей.
     * Это условие сработает только в том случае, если текущий пользователь
     * имеет прикреплённых пользователей.
	 */
    if(isWholesale != '0' && select_user_type.val() == 0 && field_opt.attr('data-user-count') !== undefined){
		// Если подтверждения ещё не было
        if(localStorage.getItem('edit-user') == 'false'){
            confirmUserEditSave($(this));
            return false;
        }
        return true;
    }
	
	if($('#{$form_name}-opt_user_id').val() != '' && !yurlico.statusCheck()){
		$.growl.error({title: 'Внимание',
		   message: 'Пользователь прикреплён к оптовику! Включите Юр. лицо!',
		   duration: 7000});
		return false;
	}
});

function confirmUserEditSave(form){
    var edit_user_message = 'Внимание при сохранении типа пользователя (Пользователь)<br>'
	+ '- все прикрепленные к нему пользователи будут откреплены!';
    bootbox.confirm({
        message: edit_user_message,
        buttons: {
            confirm: {
                label: 'Сохранить?',
                className: 'btn-success'
            },
            cancel: {
                label: 'Отмена',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if(result){
				// Если нажата кнопка подтверждения
                localStorage.setItem('edit-user', true);
				// Сохраняем форму
                form.trigger('submit');
            }else{
				// Если нажата кнопка отмены
                localStorage.setItem('edit-user', false);
            }
        },
        className: "bootbox-sm"
    });
}// f confirmUserEditSave

// Поле select Способы оплаты
$('#{$form_name}-payment_type').on('change', function(){
    var tthis = $(this),
        labelTop = tthis.parent().find('.label-top');
    tthis.val() ? labelTop.addClass('hide') : labelTop.removeClass('hide');
});

// Построим порядок по свойсвту data в виджете.
$('#{$form_name}-payment_type').on('select2:select', function(e){
    var id = e.params.data.id;
    var option = $(e.target).children('[value="'+id+'"]');
    option.detach();
    $(e.target).append(option).change();
});

JS
        );

        $result['form_name'] = $form_name;

        return $result;
    }
}