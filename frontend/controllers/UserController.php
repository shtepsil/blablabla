<?php
/**
 * Created by PhpStorm.
 * Project: morkovka
 * User: lxShaDoWxl
 * Date: 27.08.15
 * Time: 11:35
 */
namespace frontend\controllers;

use common\components\Debugger as d;
use common\models\Items;
use common\models\Orders;
use common\models\User;
use common\models\UserAddress;
use frontend\components\MainController;
use shadow\helpers\SArrayHelper;
use Yii;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\web\BadRequestHttpException;
use yii\web\Response;
use shadow\helpers\Json;
use frontend\form\EditRequisites;

class UserController extends MainController
{
    /**
     * Declares external actions for the controller.
     * This method is meant to be overwritten to declare external actions for the controller.
     * It should return an array, with array keys being action IDs, and array values the corresponding
     * action class names or action configuration arrays. For example,
     *
     * ~~~
     * return [
     *     'action1' => 'app\components\Action1',
     *     'action2' => [
     *         'class' => 'app\components\Action2',
     *         'property1' => 'value1',
     *         'property2' => 'value2',
     *     ],
     * ];
     * ~~~
     *
     * [[\Yii::createObject()]] will be used later to create the requested action
     * using the configuration provided here.
     */
    public function actions()
    {
        return [
            'send-form' => [
                'class' => 'frontend\components\SendFormAction',
                'forms' => [
                    'edit_profile' => 'EditLk',
                    'address' => 'EditAddress',
                    'edit_password' => 'EditPassword',
                    'replay-order' => 'ReplayOrder',
                    'edit_subs' => 'EditSubs',
                    'invited' => 'InvitedSend',
                    'edit_requisites' => 'EditRequisites'
                ]
            ],
        ];
    }
    /**
     * Initializes the object.
     * This method is invoked at the end of the constructor after the object is initialized with the
     * given configuration.
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->breadcrumbs[] = [
            'label' => 'Мой кабинет',
            'url' => ['user/index'],
        ];
    }

    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
//                    'logout' => ['post'],
                ],
            ],
        ];
    }
    public function actionIndex()
    {
        $this->SeoSettings(false, false, 'Мой кабинет');
        return $this->render('index');
    }
    public function actionSettings()
    {
        $this->SeoSettings(false, false, 'Мои настройки');
        $this->breadcrumbs[] = [
            'label' => 'Мои настройки',
            'url' => ['user/settings'],
        ];
        return $this->render('settings');
    }
    public function actionOrders()
    {
        $this->breadcrumbs[] = [
            'label' => 'Мои заказы',
            'url' => ['user/orders'],
        ];
        if ($id = Yii::$app->request->get('id') AND !Yii::$app->user->isGuest) {
            /*
             * Эту махинацию сделал для того, чтобы в модели User
             * подключился метод afterFind, который создаёт свойство parent_data.
             */
            $user = User::findOne(Yii::$app->user->id);
            if ($order = Orders::find()
                ->joinWith([
                    'ordersSets',
                    'ordersItems',
                ])
                ->andWhere('`orders_sets`.id is NOT NULL OR `orders_items`.id is NOT NULL')
                ->andWhere(['orders.id' => $id, 'user_id' => Yii::$app->user->id])
                ->with(['ordersItems.item', 'ordersSets.set'])
                ->one()) {
                $this->breadcrumbs[] = [
                    'label' => 'Заказ №' . $order->id,
                    'url' => ['user/orders', 'id' => $id],
                ];
                $this->SeoSettings(false, false, 'Заказ №' . $order->id);

                // ===========================================================================
                $is_requisites = true;
                // По умолчанию будут реквизиты пользователя
                $user_requisites = $user;
                // Если пользователь имеет реквизиты родителя
                if(!is_null($user->parent_data)){
                    $user_requisites = $user->parent_data;
                }
                $attrs_requisites = EditRequisites::getAttrs();
                $attrs_requisites_keys = array_keys($attrs_requisites);
                if(!isset($user_requisites[$attrs_requisites_keys[0]])){
                    $is_requisites = false;
                }
                // ===========================================================================
                return $this->render('order', [
                    'order' => $order,
                    'is_requisites' => $is_requisites
                ]);

            } else {
                return $this->redirect(['user/orders']);
            }
        } else {
            $this->SeoSettings(false, false, 'Мои заказы');
            return $this->render('orders');
        }
    }

    public function actionPrintInvoicePayment()
    {
        if ($id = Yii::$app->request->get('id') AND !Yii::$app->user->isGuest) {
            $order_model = Orders::findOne(intval($id));
            $user = User::findOne($order_model->user_id);
            if ($order_model) {
                $db_items = Items::find()->where(['id' => array_keys($order_model->ordersItems)])->indexBy('id')->all();

                // =========================================================================

                $functions = Yii::$app->function_system;
                $order_items = $items = [];
                $user_discount
                    = $sum_user_discount
                    = $sum_with_discount
                    = $discount_price_items
                    = $sum_without_discount
                    = $count_order_items
                    = 0;

                //                d::pex($order_model->ordersItems);

                if (count($order_model->ordersItems)) {
                    $items = $order_model->convert_all_to_model($order_model->ordersItems, $db_items);
                    foreach ($order_model->ordersItems as $order_item) {
                        $order_data_item = $order_item->data_object;
                        $discount_price_item = 0;
                        if ($order_data_item->discount and $order_data_item->old_price) {
                            // Цена без скидки умноженная на количество
                            $price_full_count = $functions->sum_price_count($order_data_item->old_price, $order_item->count);
                            // Сумма скидки товара с персональной скидкой
                            $discount_price_item += $functions->discount($price_full_count, $order_data_item->discount);
                            // Суммируем суммы со скидками в одну сумму. (цена без скидки МИНУС сумма скидки)
                            $sum_with_discount += ($price_full_count - $discount_price_item);
                            $item_full_sum = ($price_full_count - $discount_price_item);
                            // Суммируем скидки в одну сумму
                            $discount_price_items += $discount_price_item;
                        } else {
                            // Цена без скидки умноженная на количество
                            $sum_without_discount += $items[$order_data_item->id]->sum_price(
                                $order_item->count, 'main', 0, $order_item->weight
                            );
                            $item_full_sum = $items[$order_data_item->id]->sum_price(
                                $order_item->count, 'main', 0, $order_item->weight
                            );
                        }

                        $count_order_items++;
                        $order_items[$order_item->id] = [
                            'order_item' => $order_item,
                            'item' => $items[$order_data_item->id],
                            //                            'item_full_price' => SNumberHelper::num2str($item_full_sum),
                            'item_full_price' => $item_full_sum,
                            'count_order_items' => $count_order_items
                        ];

                    } //foreach

                    // Расчёт скидки пользователя
                    $sum_user_discount = $sum_without_discount;
                    $user_discount += $order_model->discount($sum_without_discount);
                    if ($user_discount > 0) {
                        $sum_user_discount -= $user_discount;
                    }
                }
                $order_full_price =
                    ($sum_user_discount + $sum_with_discount + $order_model->price_delivery)
                    - $order_model->bonus_use;

                // =========================================================================

                // По умолчанию будут реквизиты пользователя
                $user_requisites = $user;
                // Если пользователь имеет реквизиты родителя
                if(!is_null($user->parent_data)){
                    $user_requisites = $user->parent_data;
                }

                $requisites = [];
                $attrs_requisites = EditRequisites::getAttrs();

                foreach($attrs_requisites as $k_requisite => $requisite){
                    /*
                     * В общем возникла ошибка из-за того, что нет ключа реквизита в print-page
                     * кароче я тут подумал, и решил, что впринципе на страницу print-page
                     * можно отправлять вообще все ключи из $attrs_requisites,
                     * чтобы вопервых не делать лишних проверок на существование
                     * и во вторых не получать ошибок несуществующих ключей...
                     * Потому что всё равно, на странице print-page я использую
                     * только то, что нужно мне... А лишние ключи они не помеха.
                     * По этому я решил пока убрать эут проверку.
                     */
                    //if(!isset($user_requisites->$k_requisite)) continue;
                    $requisites[$k_requisite] = [
                        'name' => $requisite,
                        'value' => $user_requisites->$k_requisite
                    ];
                }

                $this->layout = 'empty';
                return $this->render('print/print-invoice-payment', [
                    'order' => $order_model,
                    'order_items' => $order_items,
                    'order_full_sum' => $order_full_price,
                    'requisites' => $requisites
                ]);
            } else {
                // Заказ не найден
                throw new BadRequestHttpException();
            }
        } else {
            // В GET отсутствует ID заказа или пользователь не авторизован
            throw new BadRequestHttpException();
        }
    }

    public function actionBonus()
    {
        $this->SeoSettings(false, false, 'Мои бонусы');
        $this->breadcrumbs[] = [
            'label' => 'Мои бонусы',
            'url' => ['user/orders'],
        ];
        return $this->render('bonus');
    }
    public function actionAddress()
    {
        $this->SeoSettings(false, false, 'Мои адреса');
        $this->breadcrumbs[] = [
            'label' => 'Мои адреса',
            'url' => ['user/address'],
        ];
        return $this->render('address');
    }

    public function actionAddAddress()
    {
        $this->SeoSettings(false, false, 'Добавление нового адреса');
        $this->breadcrumbs[] = [
            'label' => 'Мои адреса',
            'url' => ['user/address'],
        ];
        $this->breadcrumbs[] = [
            'label' => 'Добавление нового адреса',
            'url' => ['user/add-address'],
        ];
        return $this->render('add-address');
    }
    public function actionEditAddress($id)
    {
        $address = UserAddress::find()->andWhere(['user_id' => $this->user->id, 'id' => $id])->one();
        if ($address) {
            $this->SeoSettings(false, false, 'Добавление нового адреса');
            $this->breadcrumbs[] = [
                'label' => 'Мои адреса',
                'url' => ['user/address'],
            ];
            $this->breadcrumbs[] = [
                'label' => 'Изменение адреса',
                'url' => ['user/edit-address', 'id' => $id],
            ];
            return $this->render('add-address', ['address' => $address]);
        } else {
            throw new BadRequestHttpException('Данный адрес не найдён');
        }
    }
    public function actionReplayOrder()
    {
        if ($id = Yii::$app->request->get('id')) {
            /**@var $order Orders * */
            $order = Orders::find()
                ->joinWith([
                    'ordersSets',
                    'ordersItems',
                ])
                ->andWhere('`orders_sets`.id is NOT NULL OR `orders_items`.id is NOT NULL')
                ->andWhere(['orders.id' => $id, 'user_id' => Yii::$app->user->id])
                ->with(['ordersItems.item', 'ordersSets.set'])
                ->one();
            if ($order) {
                $sets = [];
                $items = [];
                $type_handling = [];
                foreach ($order->ordersItems as $item_order) {
                    $items[$item_order->item_id] = $item_order->count;
                    $type_handling[$item_order->item_id] = $item_order->getOrdersItemsHandings()->select('type_handling_id')->column();
                }
                foreach ($order->ordersSets as $item_order) {
                    $items[$item_order->set_id] = $item_order->count;
                }
                if ($items) {
                    Yii::$app->session->set('items', $items);
                }
                if($type_handling){
                    Yii::$app->session->set('type_handling', $type_handling);
                }
                if($sets){
                    Yii::$app->session->set('sets', $sets);
                }
                return $this->redirect(['site/basket']);
            } else {
                return $this->redirect(['user/orders']);
            }
        } else {
            return $this->redirect(['user/orders']);
        }
    }
    public function actionWholesale()
    {
        if (Yii::$app->user->identity->isWholesale == 1) {
            $this->SeoSettings(false, false, 'Мои прайс-лист');
            return $this->render('wholesale');
        } else {
            throw new BadRequestHttpException('У вас нету доступа');
        }
    }
    public function actionPriceList($id)
    {
        if(Yii::$app->user->identity->isWholesale != 1){
            throw new BadRequestHttpException('У вас нету доступа');
        }else{
            $items = Items::find()->andWhere(['cid' => $id])->andWhere([
                'OR',
                ['isVisible' => 1],
                ['isVisible' => 0,'isWholesale'=>1]
            ])->all();
            $result = [
                'items' => $this->renderPartial('items_price_list', ['items' => $items])
            ];
            if (Yii::$app->request->isAjax) {
                Yii::$app->response->format = Response::FORMAT_JSON;
                return $result;
            } else {
                return $this->render('wholesale_price',$result);
            }
        }

    }
    public function actionRequisites()
    {
        $this->SeoSettings(false, false, 'Мои реквизиты');
        $this->breadcrumbs[] = [
            'label' => 'Мои реквизиты',
            'url' => ['user/requisites'],
        ];

        $model = new EditRequisites();
        $user = $this->user;
        $block_layer = 'dn';
        $requisites_fields = $model::getAttrs();

        /*
         * Если текущий(редактируемый) пользователь прикреплён к оптовику,
         * то нужно получить реквизиты этого оптовика
         * opt_user_id - common\models\User - ID
         */
        if($user->opt_user_id){
            $opt_user = User::findOne($user->opt_user_id);
            /*
             * Проверим, имеет ли реквизиты выбранный оптовик.
             * Возьмём первое попавшееся поле, если оно существует,
             * значит реквизиты заданы.
             */
            if(isset($opt_user->entity_name)){
                // Реквизиты прикрепленного оптовика нужно заблокировать от редактирования
                $block_layer = '';
                $user = $opt_user;
            }
        }

        foreach($model as $mod_key => $mod_value){
            // Если в классе User существует свойство из json реквизитов
            if(isset($user->{$mod_key})){
                $model->{$mod_key} = $user->{$mod_key};
            }
        }

        return $this->render('requisites', [
            'user' => $user,
            'model' => $model,
            'block_layer' => $block_layer
        ]);
    }
}