<?php

namespace frontend\controllers;

use backend\models\SUser;
use common\models\Actions;
use common\models\Orders;
use common\models\User;
use common\models\MonitoringSms;
use common\models\OrdersPay;
use frontend\components\MainController;
use yii\bootstrap\Html;
use yii\helpers\Url;
use yii\web\BadRequestHttpException;
use yii\web\Cookie;
use yii\web\Response;
use frontend\components\SmsController;
use Yii;

class ApiController extends MainController
{
    /**
     * Initializes the object.
     * This method is invoked at the end of the constructor after the object is initialized with the
     * given configuration.
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
                'view' => '//site/error'
            ],
            'cart' => [
                'class' => 'frontend\components\CartAction',
            ],
        ];
    }

    public function actionClose($id)
    {
        if (\Yii::$app->request->isAjax) {
            $cookie = new Cookie([
                'name' => $id,
                'value' => 1,
                'expire' => time() + 86400,
            ]);
            \Yii::$app->response->cookies->add($cookie);
        } else {
            throw new BadRequestHttpException();
        }
    }

    public function actionCity($id)
    {
        if (\Yii::$app->request->isAjax) {
            if ($city_get = $id) {
                $citys = $this->function_system->getData_city();
                if (isset($citys[$id])) {
                    \Yii::$app->session->set('city_select', $city_get);
                    $cookie = new Cookie([
                        'name' => 'city_select',
                        'value' => $city_get,
                        'expire' => time() + 604800,
                    ]);
                    \Yii::$app->response->cookies->add($cookie);
                }
            }
        } else {
            throw new BadRequestHttpException();
        }
    }

    public function actionInfoDelivery()
    {
        /**
         * @var $user SUser
         */
        $time = time();
        $users = SUser::find()->andWhere(['role' => 'manager'])->all();
        $start_date = strtotime(date('d.m.Y', $time) . ' 00:00:00');
        $end_date = strtotime(date('d.m.Y', $time) . ' 23:59:59');
        foreach ($users as $user) {
            $orders = Orders::find()
                ->orderBy(['date_delivery' => 'DESC'])
                ->andWhere(['manager_id' => $user->id])
                ->andWhere(
                    [
                        '>=',
                        'date_delivery',
                        $start_date
                    ]
                )->andWhere(
                    [
                        '<=',
                        'date_delivery',
                        $end_date
                    ]
                )->all();
            if ($orders) {
                \Yii::$app->mailer->compose(['html' => 'admin/info_delivery_order'],
                    ['orders' => $orders, 'user' => $user])
                    ->setFrom([\Yii::$app->params['supportEmail'] => \Yii::$app->params['siteName'] . ' info'])
                    ->setTo($user->email)
                    ->setSubject('Оповещение с сайта ' . \Yii::$app->params['siteName'] . '.kz')->send();
            }
        }
    }

    public function actionCron()
    {
        /**
         * @var $user SUser
         */
        $time = time();
        $users = SUser::find()->andWhere(['role' => 'manager'])->all();
        $start_date = strtotime(date('d.m.Y', $time) . ' 00:00:00 GMT');
        $end_date = strtotime(date('d.m.Y', $time) . ' 23:59:59 GMT');
        foreach ($users as $user) {
            $orders = Orders::find()
                ->orderBy(['date_delivery' => SORT_DESC])
                ->andWhere(['manager_id' => $user->id])
                ->andWhere(
                    [
                        '>=',
                        'date_delivery',
                        $start_date
                    ]
                )->andWhere(
                    [
                        '<=',
                        'date_delivery',
                        $end_date
                    ]
                )->all();
            if ($orders) {
                \Yii::$app->mailer->compose(['html' => 'admin/info_delivery_order'],
                    ['orders' => $orders, 'user' => $user])
                    ->setFrom([\Yii::$app->params['supportEmail'] => \Yii::$app->params['siteName'] . ' info'])
                    ->setTo($user->email)
                    ->setSubject('Оповещение с сайта ' . \Yii::$app->params['siteName'] . '.kz')->send();
            }
        }
        //region Оповещение о окончании акция
        $prev_date = strtotime('-1 day', $start_date);
        $body_actions = '';
        /** @var Actions[] $actions */
        $actions = Actions::find()
            ->andWhere(
                [
                    '>=',
                    'date_end',
                    $prev_date
                ]
            )->andWhere(
                [
                    '<=',
                    'date_end',
                    $start_date
                ]
            )->all();
        $i = 1;
        foreach ($actions as $action) {
            $body_actions .= $i++ . ')' . Html::a($action->name,
                    Url::to(['site/actions', 'id' => $action->id], true)) . '<br/>';
        }
        $send_mails = explode(',', \Yii::$app->settings->get('end_actions_email', 'viktor@instinct.kz'));
        foreach ($send_mails as $key_email => &$value_email) {
            if (!($value_email = trim($value_email, " \t\n\r\0\x0B"))) {
                unset($send_mails[$key_email]);
            }
        }
        if ($body_actions != '') {
            $body_actions = 'Закончились акции (' . date('d.m.Y H:i:s') . '): <br/> ' . $body_actions;
            \Yii::$app->mailer->compose()
                ->setHtmlBody($body_actions)
                ->setFrom([\Yii::$app->params['supportEmail'] => \Yii::$app->params['siteName'] . ' info'])
                ->setTo($send_mails)
                ->setSubject('Оповещение с сайта ' . \Yii::$app->params['siteName'] . '.kz')->send();
        }
        //endregion
        //region Оповещение о начале акция
        $body_actions = '';
        /** @var Actions[] $actions */
        $actions = Actions::find()
            ->andWhere(
                [
                    '>=',
                    'date_start',
                    $start_date
                ]
            )->andWhere(
                [
                    '<=',
                    'date_start',
                    $end_date
                ]
            )->all();
        $i = 1;
        foreach ($actions as $action) {
            $body_actions .= $i++ . ')' . Html::a($action->name . ' (' . date('d.m.Y', $action->date_end) . ')',
                    Url::to(['site/actions', 'id' => $action->id], true)) . '<br/>';
        }
        $send_mails = explode(',', \Yii::$app->settings->get('end_actions_email', 'viktor@instinct.kz'));
        foreach ($send_mails as $key_email => &$value_email) {
            if (!($value_email = trim($value_email, " \t\n\r\0\x0B"))) {
                unset($send_mails[$key_email]);
            }
        }
        if ($body_actions != '') {
            $body_actions = 'Сегодня начались акции (' . date('d.m.Y H:i:s') . '): <br/> ' . $body_actions;
            \Yii::$app->mailer->compose()
                ->setHtmlBody($body_actions)
                ->setFrom([\Yii::$app->params['supportEmail'] => \Yii::$app->params['siteName'] . ' info'])
                ->setTo($send_mails)
                ->setSubject('Оповещение с сайта ' . \Yii::$app->params['siteName'] . '.kz')->send();
        }
        //endregion
        echo 'OK';
    }

    public function actionSuccessPay()
    { 
        $headers = \Yii::$app->request->getHeaders();
        $request_hmac = $headers->get('Content-HMAC');
        if (!$request_hmac) {
            \Yii::error('Not header Content-HMAC');
            exit;
        }
        $message = \Yii::$app->request->queryString;
        $s = hash_hmac('sha256', $message, \Yii::$app->params['cloudpayments']['api_key'], true);
        $hmac = base64_encode($s);
        if ($request_hmac != $hmac) {
            \Yii::error('No validate header Content-HMAC');
            exit("hmac error");
        }
        $TransactionId = \Yii::$app->request->get('TransactionId');
        $Amount = \Yii::$app->request->get('Amount');
        $InvoiceId = \Yii::$app->request->get('InvoiceId');
        $order = Orders::findOne($InvoiceId);
        if ($order) {
            \Yii::$app->db->createCommand()->insert(OrdersPay::tableName(), [
                'id' => $TransactionId,
                'order_id' => $order->id,
                'amount' => $Amount,
                'status' => 0
            ])->execute();
            if ($order->pay_status == 'wait_surcharge') {
                Orders::updateAll(['pay_status' => 'success_surcharge'], ['id' => $order->id]);
            } else {
                Orders::updateAll(['pay_status' => 'success'], ['id' => $order->id]);
            }
        } else {
            \Yii::error('no correct InvoiceId');
            exit("no correct InvoiceId");
        }
        \Yii::$app->response->format = Response::FORMAT_JSON;
        return [
            'code' => 0
        ];
    }  
	/*
	*	Первичная оценка доставки без создания заявки.
	*	https://yandex.ru/dev/taxi/doc/cargo-api/ref/v1/estimate.html
	*	Класс автомобиля для доставки (courier, express, cargo)
	*
	*  skip_door_to_door - В случае true — курьер доставит заказ только на улицу, до подъезда
	*/
	public function actionAssessmentyandex()
    {   
		$longitude_from = \Yii::$app->request->post('longitude_from');
		$latitude_from = \Yii::$app->request->post('latitude_from');
		$longitude_to = \Yii::$app->request->post('longitude_to');
		$latitude_to = \Yii::$app->request->post('latitude_to');
			
		$pick = \Yii::$app->request->post('pick');
		$name = \Yii::$app->request->post('name');	
			
		$coord_answer = $latitude_to . ',' . $longitude_to . ',' . $latitude_from . ',' . $longitude_from;
			
		$params = array(
			'items' => array(
				array(
					"quantity"=> 1,
					"size"=> array(
						"height"=> 0.1,							
						"length"=> 0.1,
						"width"=> 0.1
					),
					"weight"=> 2
				)
			), 
			'requirements' => array(
				"taxi_class"=> "express"
			),
			'route_points' => array(
				array(
					'coordinates' => array(
						(double)$longitude_from, (double)$latitude_from
					)
				),
				array(
					'coordinates' => array(
						(double)$longitude_to,(double)$latitude_to
					)
				)
			),
			"skip_door_to_door"=>false
 
		);
		
		$string = json_encode($params); 		
	
		$string = json_encode($params); 
		$ch = curl_init("https://b2b.taxi.yandex.net/b2b/cargo/integration/v1/check-price");
		curl_setopt($ch, CURLOPT_HTTPHEADER, array(
			'Content-Type: application/json',
			'Accept-Language: en-US',
			'Authorization: Bearer ' . \Yii::$app->params['bearer'],
			'Content-Length: ' . strlen($string)
		));
		curl_setopt($ch, CURLOPT_POSTFIELDS, $string); 
		curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params)); 
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
		curl_setopt($ch, CURLOPT_HEADER, false);
		$html = curl_exec($ch);
		curl_close($ch);  
		$html = json_decode($html);
		
        \Yii::$app->response->format = Response::FORMAT_JSON;
        return [
            'code'=>$html->price, 
			'coord_answer' => $coord_answer,
			'name' => $name,
			'pick' => $pick
        ];
    }
	
	 public function actionUsersaction()
    {   	  
		//$test = true;      //  запустить тестовый режим, чтобы посмотреть сколько человек
		$test = false;    //   запустить реальную рассылку
	
		$day = 4;  // какой день запускаем
	  
		switch ($day) {
			case 1:
				$limit = 2000;    // сколько записей надо выбрать
				$offset = 0;    // с какой записи надо выбрать
				break;
				/*
			case 2:
				$limit = 2000;
				$offset = 2000;
				break;
				*/
				case 2:
				$limit = 1000;
				$offset = 3000;
				break;				
			case 3:
				$limit = 1000;
				$offset = 4000;
				break;
		   case 4:
				$limit = 2000;
				$offset = 6000;
				break;
		   case 5:
				$limit = 2000;
				$offset = 8000;
				break;
		   case 6:
				$limit = 2000;
				$offset = 10000;
				break;
		   case 7:
				$limit = 2000;
				$offset = 12000;
				break;
		}
	
		/*
		if ((date('d')% 2) == 0) {
			$limit = 5000;
			$offset = 0;
		} else {
			$limit = 11000;
			$offset = 5000;
		}
		*/
	
	
		// $user_res = User::find()->andWhere(
			// [  
				// '>',										
				// '`user`.date_last_sms',
				// 0						
			// ]	
		// )->all();
								
		// $arr_ = [];
		// foreach ($user_res as $result) {		
			// $arr_[] = [$result->id, $result->date_last_sms];		
		// }
		// Yii::$app->db->createCommand()->batchInsert('monitoring_sms', ['user_id', 'created_at'],$arr_)->execute();	
		// return 1;
		
		$last = time() - (30 * 24 * 60 * 60);
		$user_res = User::find()->andWhere(
					[                             
						'`user`.status' => 10,							
					])
				->andWhere(
					[  
						'>',										
						'`user`.bonus',
						0						
					]	
				) 
				//->andWhere(['<', 'date_last_sms', $last])->all();
				->andWhere(['<', 'date_last_sms', $last])->orderBy('id ASC')->limit($limit)->offset($offset)->all();
				$users_ = [];

				/*
				У пользователя должна быть хоть одна успешная покупка Orders::getSucessOrdersUsers
				
				Пользователь в предыдущем месяце не должен совершать успешной покупки и 
				он не получал sms в течении месяца Orders::getCountOrdersThisMounth
				*/
				
				$r = '';
				if ($user_res) {
					foreach ($user_res as $key => $result) {
						if (Orders::getCountOrdersThisMounth($result['id']) == 0 && 
						Orders::getSucessOrdersUsers($result['id']) > \Yii::$app->params['usersaction']['count_success']) 
						{
							$users_[] = $result;

						}
					}
				 }
				
				if ($test == false) {
						$insert_monitoring_sms = [];
					foreach ($users_ as $result) {
						$phone = $result['phone'];
						$bonus = $result['bonus'];
						SmsController::send_sms("$phone", "Ваши бонусы: $bonus Т. Акции https://kingfisher.kz/actions/");
				
					}

					foreach ($users_ as $result) {
						
						$time_ = time();						
						$user_info = User::findOne($result['id']);
						$user_info-> date_last_sms = $time_;
						$user_info->count_sms = ($user_info->count_sms + 1);
						$user_info->save();
						
			  			$insert_monitoring_sms[] = [$result['id'], $time_];						
					}	

					Yii::$app->db->createCommand()->batchInsert('monitoring_sms', ['user_id', 'created_at'],$insert_monitoring_sms)->execute();				
				}
		return count($users_);
    }
	
	public function actionDeadline()
    {  	
		$languages_delivery_method = [
			0 => 'Не выбрано',
			1 => 'Самовывоз',
			2 => 'ЯндексДоставка',
			3 => 'Курьер до двери'	
		];
		   
		$date = time() - 3600;
		$orders_deadline = Orders::find()
			->andWhere(
				[  
					'>=',										
					'`orders`.created_at',
					$date					
				])->andWhere(
				[
					'is', 
					'manager_id', 
					new \yii\db\Expression('null')
				]
				)->andWhere(
				[
					'isDeadline' => 0
				]
				);
 
		$orders_deadline_ = $orders_deadline->all();
		$orders_deadline_str = 'Имеются не принятые заказы: ';
		
		if (!empty($orders_deadline_)) {  
		
			foreach ($orders_deadline_ as $result) {
				
				if ((time() - $result['created_at']) >= 600) {

					Orders::updateAll(['isDeadline' => 1], ['like', 'id', $result['id']]);	
		
					$arr[] = array(
						'id' => '<a href="https://kingfisher.kz/admin/orders/control.html?id=' . $result['id'] .'">' . $result['id'] . '</a>',
						'user_name' => $result['user_name'], 
						'user_phone' => "%2B" . trim($result['user_phone']), 
						'created_at' => date('H:i:s', $result['created_at']),
						'delivery_method' => $languages_delivery_method[$result['delivery_method']]		
					);		
				}			
			}
			
			if (!empty($arr)) {
				$txt = 'Имеются не принятые заказы: %0A';

				foreach($arr as $key => $value) {
					$txt .= "<b> Заказ ".$value['id']."</b>%0A";
					$txt .= "<b> Имя ".$value['user_name']."</b>%0A";
					$txt .= $value['user_phone']."%0A";
					$txt .= "<b> Время ".$value['created_at']."</b>%0A";
					$txt .= "<b> Метод доставки ".$value['delivery_method']."</b>%0A";
					$txt .= "<b>------------------------------------</b>%0A";
				};

				//в переменную $token нужно вставить токен, который нам прислал @botFather
				//		$token = '965577145:AAHYVCoZ0LYHAblaRBEG9v4W85NRAEVxCY4';
								
				$token = '1713051743:AAElppnerY8-fjf4BpAoIMSJPW55bfLaOkI';
				//нужна вставить chat_id (Как получить chad id, читайте ниже)
				//		$chat_id = '-480684147';

				$chat_id = '-531160281';
				//1713051743:AAElppnerY8-fjf4BpAoIMSJPW55bfLaOkI
				 
				//Осуществляется отправка данных в переменной $sendToTelegram
				$sendToTelegram = fopen("https://api.telegram.org/bot{$token}/sendMessage?chat_id={$chat_id}&parse_mode=html&text={$txt}","r");	
			}
		}
	}	
}