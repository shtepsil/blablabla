<?php

namespace common\models;

use shadow\plugins\datetimepicker\DateTimePicker;
use shadow\widgets\CKEditor;
use Yii;
use yii\helpers\Inflector;
use shadow\SResizeImg;

/**
 * This is the model class for table "news".
 *
 * @property integer $id
 * @property string $name
 * @property string $small_body
 * @property string $body
 * @property string $img
 * @property integer $created_at
 * @property integer $isVisible
 */
class News extends \shadow\SActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'news';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'body', 'created_at'], 'required'],
            ['created_at', 'match', 'pattern' => "/^[0-9]{2}\/[0-9]{2}\/[0-9]{4}$/i"],
            ['created_at', 'date', 'timestampAttribute' => 'created_at', 'format' => 'php:d/m/Y'],
            [['body'], 'string'],
            [['isVisible'], 'integer'],
            [['isVisible'], 'default','value'=>1],
            [['name'], 'string', 'max' => 255],
            ['img', 'image', 'extensions' => 'jpg, gif, png, jpeg','skipOnEmpty'=>!$this->isNewRecord],
            [['small_body'], 'string', 'max' => 1000]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Название',
            'small_body' => 'Краткий текст',
            'body' => 'Текст',
            'img' => 'Изображение',
            'created_at' => 'Дата',
            'isVisible' => 'Видимость',
        ];
    }
    public function FormParams()
    {
        if ($this->isNewRecord) {
            $this->loadDefaultValues(true);
            $this->created_at = date('d/m/Y');
        }else{
            $this->created_at = date('d/m/Y',$this->created_at);
        }
        $controller_name = Inflector::camel2id(Yii::$app->controller->id);
        $result = [
            'form_action' => ["$controller_name/save"],
            'cancel' => ["$controller_name/index"],
            'fields' => [
                'isVisible' => [
                    'type' => 'checkbox'
                ],
                'name' => [],
                'img' => [
                    'type' => 'img'
                ],
                'small_body' => [
                    'type' => 'textArea'
                ],
                'created_at'=>[
                    'widget' => [
                        'class' => DateTimePicker::className(),
                        'config'=>[
                            'language' => 'ru',
                            'size' => 'ms',
                            'template' => '{input}',
                            'pickButtonIcon' => 'glyphicon glyphicon-time',
                            'clientOptions' => [
                                'format' => 'dd/mm/yyyy',
                                'minView' => 2,
                                'autoclose' => true,
                                'todayBtn' => true
                            ]
                        ]
                    ]
                ],
                'body' => [
                    'type' => 'textArea',
                    'widget' => [
                        'class' => CKEditor::className(),
                        'config'=>[
                            'editorOptions'=>[
                                'enterMode'=>1
                            ]
                        ]
                    ]
                ],
            ],
        ];
        return $result;
    }
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => '\shadow\behaviors\UploadFileBehavior',
                'attributes' => ['img'],
            ],
        ];
    }
    public function saveClear($event)
    {
        /**
         * @var $frontend_cache \yii\caching\FileCache
         */
        $frontend_cache = Yii::$app->frontend_cache;
        $frontend_cache->delete('news_years');
        parent::saveClear($event); // TODO: Change the autogenerated stub
    }
    use SResizeImg;
    public function img($resize = false, $size_type = 'mini', $array = false)
    {
        if (!$array) {
            if ($this->img) {
                if ($resize && isset(ItemImg::$_size_img_a[$size_type])) {
                    $result = $this->resizeImg(ItemImg::$_size_img_a[$size_type], 'img');
                } else {
                    $result = $this->img;
                }
            } else {
                if (isset($this->itemImgs[0]->url)) {
                    if ($resize) {
                        $result = $this->itemImgs[0]->resizeImg($size_type);
                    } else {
                        $result = $this->itemImgs[0]->url;
                    }
                } else {
                    $result = '/uploads/no_photo.png';
                }
            }
            if (!$result) {
                $result = '/uploads/no_photo.png';
            }
            if ($result != '/uploads/no_photo.png' && !is_file(Yii::getAlias('@frontend/web') . $result)) {
                $result = '/uploads/no_photo.png';
            }
        } else {
            $result = [];
            if ($this->itemImgs) {
                $result = array();
                foreach ($this->itemImgs as $img) {
                    if ($resize) {
                        if (is_array($size_type)) {
                            $img_size = [];
                            foreach ($size_type as $value) {
                                if ($img_resize = $img->resizeImg($value)) {
                                    $img_size[$value] = $img_resize;
                                }else{
                                    $img_size[$value] = '';
                                }
                            }
                            $img_size['title'] = $img->name;
                            $result[] = $img_size;
                        } else {
                            if ($img_resize = $img->resizeImg($size_type)) {
                                $result[] = $img_resize;
                            }
                        }
                    } else {
                        if (is_file(Yii::getAlias('@frontend/web') . $img->url)) {
                            $result[] = $img->url;
                        }
                    }
                }
            } else {
                if ($this->img) {
                    if ($resize) {
                        if (is_array($size_type)) {
                            $img_size = [];
                            foreach ($size_type as $value) {
                                if (!isset(ItemImg::$_size_img_a[$value])) {
                                    if (is_file(Yii::getAlias('@frontend/web') . $this->img)) {
                                        $img_size[$value] = $this->img;
                                    }else{
                                        $img_size[$value] = null;
                                    }
                                    continue;
                                }
                                if ($img_resize = $this->resizeImg(ItemImg::$_size_img_a[$value], 'img')) {
                                    $img_size[$value] = $img_resize;
                                }
                            }
                            $img_size['title'] = $this->name;
                            $result[] = $img_size;
                        } else {
                            if (isset(ItemImg::$_size_img_a[$size_type]) && ($img_resize = $this->resizeImg(ItemImg::$_size_img_a[$size_type], 'img'))) {
                                $result[] = $img_resize;
                            }
                        }
                    } else {
                        if (is_file(Yii::getAlias('@frontend/web') . $this->img)) {
                            $result[] = $this->img;
                        }
                    }
                }
            }
            if (!$result) {
                $result[] = '/uploads/no_photo.png';
            }
        }
        return $result;
    }

}
